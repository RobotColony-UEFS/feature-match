Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.680 MiB   48.680 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.434 MiB    0.754 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.496 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.730 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.016 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.441 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.629 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.629 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.723 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.723 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.754 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.754 MiB    0.000 MiB   	matriz1=[]
    20   51.754 MiB    0.000 MiB   	for variavel in corners1:
    21   51.754 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.754 MiB    0.000 MiB   		matriz1.append(array)
    23   51.855 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.691 MiB    3.836 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.750 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.750 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.750 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.070 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.070 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.070 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.750 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.070 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.070 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.070 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.070 MiB    0.000 MiB   	matriz2=[]
    38   58.078 MiB    0.000 MiB   	for variavel in corners2:
    39   58.078 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.078 MiB    0.000 MiB   		matriz2.append(array)
    41   58.090 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.102 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.379 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.89796 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18361.0  18361.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        351.0    351.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3837.0   3837.0      0.1  	imagem1 = np.float32(img1)
    12         1      73125.0  73125.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14886.0  14886.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      13421.0  13421.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5108.0   5108.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11589.0  11589.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         93.0     93.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20764.0  20764.0      0.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3027.0     64.4      0.1  	for variavel in corners1:
    21        46       7617.0    165.6      0.2  		array=np.array([variavel])
    22        46       2857.0     62.1      0.1  		matriz1.append(array)
    23         1       1229.0   1229.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     236200.0 236200.0      6.1  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        283.0    283.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      72518.0  72518.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      24364.0  24364.0      0.6  	imagem2 = np.float32(img2)
    30         1     622804.0 622804.0     16.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97163.0  97163.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84902.0  84902.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35142.0  35142.0      0.9  	dst2 = np.uint8(dst2)
    34         1      77034.0  77034.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     183755.0 183755.0      4.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       273      18511.0     67.8      0.5  	for variavel in corners2:
    39       272      44008.0    161.8      1.1  		array=np.array([variavel])
    40       272      17082.0     62.8      0.4  		matriz2.append(array)
    41         1       5446.0   5446.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2159640.0 2159640.0     55.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      42652.0  42652.0      1.1  	matches = bf.match(des1,des2)

