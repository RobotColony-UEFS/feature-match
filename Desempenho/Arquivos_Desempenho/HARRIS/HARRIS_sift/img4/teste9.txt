Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.738 MiB   48.738 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.555 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.617 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.852 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.199 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.668 MiB    0.469 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.855 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.855 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.938 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.938 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.957 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.957 MiB    0.000 MiB   	matriz1=[]
    20   51.957 MiB    0.000 MiB   	for variavel in corners1:
    21   51.957 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.957 MiB    0.000 MiB   		matriz1.append(array)
    23   52.051 MiB    0.094 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.023 MiB    3.973 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.082 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.082 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.082 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.402 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.402 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.402 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.082 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.402 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.402 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.402 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.402 MiB    0.000 MiB   	matriz2=[]
    38   58.410 MiB    0.000 MiB   	for variavel in corners2:
    39   58.410 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.410 MiB    0.000 MiB   		matriz2.append(array)
    41   58.422 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.434 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.598 MiB    0.164 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.91429 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17960.0  17960.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1       1521.0   1521.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3959.0   3959.0      0.1  	imagem1 = np.float32(img1)
    12         1      74976.0  74976.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13705.0  13705.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      13595.0  13595.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5137.0   5137.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11590.0  11590.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1        133.0    133.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20892.0  20892.0      0.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3107.0     66.1      0.1  	for variavel in corners1:
    21        46       8587.0    186.7      0.2  		array=np.array([variavel])
    22        46       2782.0     60.5      0.1  		matriz1.append(array)
    23         1       1297.0   1297.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     233310.0 233310.0      6.0  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        271.0    271.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      75044.0  75044.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22222.0  22222.0      0.6  	imagem2 = np.float32(img2)
    30         1     627224.0 627224.0     16.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96363.0  96363.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84606.0  84606.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35027.0  35027.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76746.0  76746.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1        218.0    218.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     181329.0 181329.0      4.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       273      17553.0     64.3      0.4  	for variavel in corners2:
    39       272      44404.0    163.2      1.1  		array=np.array([variavel])
    40       272      17693.0     65.0      0.5  		matriz2.append(array)
    41         1       5876.0   5876.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2175333.0 2175333.0     55.6  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      41718.0  41718.0      1.1  	matches = bf.match(des1,des2)

