Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.836 MiB   48.836 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.719 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.840 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.074 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.426 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.812 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.051 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.051 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.176 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.176 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.176 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.176 MiB    0.000 MiB   	matriz1=[]
    20   52.176 MiB    0.000 MiB   	for variavel in corners1:
    21   52.176 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.176 MiB    0.000 MiB   		matriz1.append(array)
    23   52.242 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.328 MiB    4.086 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.387 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.387 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.387 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.707 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.707 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.707 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.387 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.707 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.707 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.707 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.707 MiB    0.000 MiB   	matriz2=[]
    38   58.715 MiB    0.000 MiB   	for variavel in corners2:
    39   58.715 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.715 MiB    0.000 MiB   		matriz2.append(array)
    41   58.727 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.738 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.039 MiB    0.301 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.93585 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      16997.0  16997.0      0.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        246.0    246.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3991.0   3991.0      0.1  	imagem1 = np.float32(img1)
    12         1      75167.0  75167.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14144.0  14144.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12688.0  12688.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4984.0   4984.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11864.0  11864.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21765.0  21765.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         63.0     63.0      0.0  	matriz1=[]
    20        47       3645.0     77.6      0.1  	for variavel in corners1:
    21        46       7666.0    166.7      0.2  		array=np.array([variavel])
    22        46       2905.0     63.2      0.1  		matriz1.append(array)
    23         1       1609.0   1609.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     235509.0 235509.0      6.0  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        276.0    276.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74323.0  74323.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22822.0  22822.0      0.6  	imagem2 = np.float32(img2)
    30         1     628889.0 628889.0     16.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97931.0  97931.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84497.0  84497.0      2.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35698.0  35698.0      0.9  	dst2 = np.uint8(dst2)
    34         1      77323.0  77323.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     184925.0 184925.0      4.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       273      18646.0     68.3      0.5  	for variavel in corners2:
    39       272      46232.0    170.0      1.2  		array=np.array([variavel])
    40       272      17398.0     64.0      0.4  		matriz2.append(array)
    41         1       5414.0   5414.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2187940.0 2187940.0     55.6  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      40059.0  40059.0      1.0  	matches = bf.match(des1,des2)

