Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.922 MiB   48.922 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.805 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.926 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.160 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.512 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.898 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.137 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.137 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.262 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.262 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.262 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.262 MiB    0.000 MiB   	matriz1=[]
    20   52.262 MiB    0.000 MiB   	for variavel in corners1:
    21   52.262 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.262 MiB    0.000 MiB   		matriz1.append(array)
    23   52.328 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.414 MiB    4.086 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.473 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.473 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.473 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.793 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.793 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.793 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.473 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.793 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.793 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.793 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.793 MiB    0.000 MiB   	matriz2=[]
    38   58.801 MiB    0.000 MiB   	for variavel in corners2:
    39   58.801 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.801 MiB    0.000 MiB   		matriz2.append(array)
    41   58.812 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.824 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.098 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.92223 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17067.0  17067.0      0.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        353.0    353.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4536.0   4536.0      0.1  	imagem1 = np.float32(img1)
    12         1      74525.0  74525.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12168.0  12168.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      13850.0  13850.0      0.4  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5200.0   5200.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12896.0  12896.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20843.0  20843.0      0.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         99.0     99.0      0.0  	matriz1=[]
    20        47       3135.0     66.7      0.1  	for variavel in corners1:
    21        46       7466.0    162.3      0.2  		array=np.array([variavel])
    22        46       2976.0     64.7      0.1  		matriz1.append(array)
    23         1       1302.0   1302.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     235202.0 235202.0      6.0  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        386.0    386.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      75103.0  75103.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21750.0  21750.0      0.6  	imagem2 = np.float32(img2)
    30         1     628597.0 628597.0     16.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95245.0  95245.0      2.4  	dst2 = cv2.dilate(dst2,None)
    32         1      84720.0  84720.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36620.0  36620.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76721.0  76721.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     187161.0 187161.0      4.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       273      17844.0     65.4      0.5  	for variavel in corners2:
    39       272      46317.0    170.3      1.2  		array=np.array([variavel])
    40       272      18685.0     68.7      0.5  		matriz2.append(array)
    41         1       6515.0   6515.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2172978.0 2172978.0     55.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      41743.0  41743.0      1.1  	matches = bf.match(des1,des2)

