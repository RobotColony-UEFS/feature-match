Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.996 MiB   48.996 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.922 MiB    0.926 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.039 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.273 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.492 MiB    1.219 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.875 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.051 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.051 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.160 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.160 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.207 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.207 MiB    0.000 MiB   	matriz1=[]
    20   52.207 MiB    0.000 MiB   	for variavel in corners1:
    21   52.207 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.207 MiB    0.000 MiB   		matriz1.append(array)
    23   52.324 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.102 MiB    3.777 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.227 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.227 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.227 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.547 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.547 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.547 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.227 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.547 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.547 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.547 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.547 MiB    0.000 MiB   	matriz2=[]
    38   58.555 MiB    0.000 MiB   	for variavel in corners2:
    39   58.555 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.555 MiB    0.000 MiB   		matriz2.append(array)
    41   58.566 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.578 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.914 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.92878 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17787.0  17787.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        257.0    257.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3828.0   3828.0      0.1  	imagem1 = np.float32(img1)
    12         1      75013.0  75013.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14218.0  14218.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12363.0  12363.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5068.0   5068.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11543.0  11543.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21080.0  21080.0      0.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3072.0     65.4      0.1  	for variavel in corners1:
    21        46       7586.0    164.9      0.2  		array=np.array([variavel])
    22        46       4226.0     91.9      0.1  		matriz1.append(array)
    23         1       1402.0   1402.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     235359.0 235359.0      6.0  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        281.0    281.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74183.0  74183.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22686.0  22686.0      0.6  	imagem2 = np.float32(img2)
    30         1     625999.0 625999.0     15.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96743.0  96743.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85423.0  85423.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35492.0  35492.0      0.9  	dst2 = np.uint8(dst2)
    34         1      77449.0  77449.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     183358.0 183358.0      4.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       273      17509.0     64.1      0.4  	for variavel in corners2:
    39       272      46598.0    171.3      1.2  		array=np.array([variavel])
    40       272      17167.0     63.1      0.4  		matriz2.append(array)
    41         1       5516.0   5516.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2187684.0 2187684.0     55.7  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      39606.0  39606.0      1.0  	matches = bf.match(des1,des2)

