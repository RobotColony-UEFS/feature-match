Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.621 MiB   48.621 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.504 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.629 MiB    0.125 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.922 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.211 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.625 MiB    0.414 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.867 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.867 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.992 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.992 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.004 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.004 MiB    0.000 MiB   	matriz1=[]
    20   52.004 MiB    0.000 MiB   	for variavel in corners1:
    21   52.004 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.004 MiB    0.000 MiB   		matriz1.append(array)
    23   52.070 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.152 MiB    4.082 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.211 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.211 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.211 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.531 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.531 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.531 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.211 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.531 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.531 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.531 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.531 MiB    0.000 MiB   	matriz2=[]
    38   58.539 MiB    0.000 MiB   	for variavel in corners2:
    39   58.539 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.539 MiB    0.000 MiB   		matriz2.append(array)
    41   58.547 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.555 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.832 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.82839 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18621.0  18621.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        340.0    340.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3802.0   3802.0      0.1  	imagem1 = np.float32(img1)
    12         1      74841.0  74841.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13219.0  13219.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12684.0  12684.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5225.0   5225.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11663.0  11663.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20960.0  20960.0      0.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3831.0     81.5      0.1  	for variavel in corners1:
    21        46       7643.0    166.2      0.2  		array=np.array([variavel])
    22        46       2899.0     63.0      0.1  		matriz1.append(array)
    23         1       1494.0   1494.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234021.0 234021.0      6.1  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        281.0    281.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74235.0  74235.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      23282.0  23282.0      0.6  	imagem2 = np.float32(img2)
    30         1     628729.0 628729.0     16.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96756.0  96756.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85014.0  85014.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      34915.0  34915.0      0.9  	dst2 = np.uint8(dst2)
    34         1      77103.0  77103.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     116806.0 116806.0      3.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       226      15604.0     69.0      0.4  	for variavel in corners2:
    39       225      39912.0    177.4      1.0  		array=np.array([variavel])
    40       225      14058.0     62.5      0.4  		matriz2.append(array)
    41         1       4776.0   4776.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2170917.0 2170917.0     56.7  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      34469.0  34469.0      0.9  	matches = bf.match(des1,des2)

