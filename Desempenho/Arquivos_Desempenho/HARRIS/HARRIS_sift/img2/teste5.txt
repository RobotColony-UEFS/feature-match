Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.188 MiB   49.188 MiB   @profile
     7                             def HARRIS_sift(img):
     8   50.109 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.227 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.461 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.672 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.062 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.246 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.246 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.406 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.406 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.457 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.457 MiB    0.000 MiB   	matriz1=[]
    20   52.457 MiB    0.000 MiB   	for variavel in corners1:
    21   52.457 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.457 MiB    0.000 MiB   		matriz1.append(array)
    23   52.578 MiB    0.121 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.398 MiB    3.820 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.457 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.457 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.457 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.777 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.777 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.777 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.457 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.777 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.777 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.777 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.777 MiB    0.000 MiB   	matriz2=[]
    38   58.785 MiB    0.000 MiB   	for variavel in corners2:
    39   58.785 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.785 MiB    0.000 MiB   		matriz2.append(array)
    41   58.793 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.801 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.098 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.83397 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17628.0  17628.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        339.0    339.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3856.0   3856.0      0.1  	imagem1 = np.float32(img1)
    12         1      76025.0  76025.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12017.0  12017.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12789.0  12789.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5052.0   5052.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12489.0  12489.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22181.0  22181.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3103.0     66.0      0.1  	for variavel in corners1:
    21        46       7476.0    162.5      0.2  		array=np.array([variavel])
    22        46       3814.0     82.9      0.1  		matriz1.append(array)
    23         1       1427.0   1427.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     233437.0 233437.0      6.1  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        286.0    286.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      75831.0  75831.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21773.0  21773.0      0.6  	imagem2 = np.float32(img2)
    30         1     629416.0 629416.0     16.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96345.0  96345.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      83982.0  83982.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37130.0  37130.0      1.0  	dst2 = np.uint8(dst2)
    34         1      75727.0  75727.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114850.0 114850.0      3.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       226      14620.0     64.7      0.4  	for variavel in corners2:
    39       225      38858.0    172.7      1.0  		array=np.array([variavel])
    40       225      14533.0     64.6      0.4  		matriz2.append(array)
    41         1       4691.0   4691.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2178635.0 2178635.0     56.8  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      35379.0  35379.0      0.9  	matches = bf.match(des1,des2)

