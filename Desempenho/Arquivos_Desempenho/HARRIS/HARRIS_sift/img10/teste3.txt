Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.000 MiB   49.000 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.930 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.047 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.281 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.496 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.883 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.059 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.059 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.168 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.168 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.215 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.215 MiB    0.000 MiB   	matriz1=[]
    20   52.215 MiB    0.000 MiB   	for variavel in corners1:
    21   52.215 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.215 MiB    0.000 MiB   		matriz1.append(array)
    23   52.332 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.109 MiB    3.777 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.234 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.234 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.234 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.555 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.555 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.555 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.234 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.555 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.555 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.555 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.555 MiB    0.000 MiB   	matriz2=[]
    38   58.559 MiB    0.000 MiB   	for variavel in corners2:
    39   58.559 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.559 MiB    0.000 MiB   		matriz2.append(array)
    41   58.562 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.566 MiB    0.004 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.902 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.70544 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17290.0  17290.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        326.0    326.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3812.0   3812.0      0.1  	imagem1 = np.float32(img1)
    12         1      76520.0  76520.0      2.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13092.0  13092.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12410.0  12410.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5187.0   5187.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11563.0  11563.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         95.0     95.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21028.0  21028.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3083.0     65.6      0.1  	for variavel in corners1:
    21        46       7604.0    165.3      0.2  		array=np.array([variavel])
    22        46       2877.0     62.5      0.1  		matriz1.append(array)
    23         1       1448.0   1448.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234941.0 234941.0      6.3  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        281.0    281.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74848.0  74848.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21939.0  21939.0      0.6  	imagem2 = np.float32(img2)
    30         1     626901.0 626901.0     16.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96804.0  96804.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84676.0  84676.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35294.0  35294.0      1.0  	dst2 = np.uint8(dst2)
    34         1      76308.0  76308.0      2.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      61621.0  61621.0      1.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       105       6825.0     65.0      0.2  	for variavel in corners2:
    39       104      16914.0    162.6      0.5  		array=np.array([variavel])
    40       104       6541.0     62.9      0.2  		matriz2.append(array)
    41         1       2616.0   2616.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2165249.0 2165249.0     58.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      17149.0  17149.0      0.5  	matches = bf.match(des1,des2)

