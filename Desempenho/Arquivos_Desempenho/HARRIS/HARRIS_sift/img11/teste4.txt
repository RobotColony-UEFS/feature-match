Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.926 MiB   48.926 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.812 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.934 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.168 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.516 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.906 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.145 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.145 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.270 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.270 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.270 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.270 MiB    0.000 MiB   	matriz1=[]
    20   52.270 MiB    0.000 MiB   	for variavel in corners1:
    21   52.270 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.270 MiB    0.000 MiB   		matriz1.append(array)
    23   52.336 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.422 MiB    4.086 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.480 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.480 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.480 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.801 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.801 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.801 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.480 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.801 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.801 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.801 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.801 MiB    0.000 MiB   	matriz2=[]
    38   58.805 MiB    0.000 MiB   	for variavel in corners2:
    39   58.805 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.805 MiB    0.000 MiB   		matriz2.append(array)
    41   58.809 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.816 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.090 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.75092 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17097.0  17097.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        251.0    251.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4658.0   4658.0      0.1  	imagem1 = np.float32(img1)
    12         1      76156.0  76156.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13211.0  13211.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      13414.0  13414.0      0.4  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5875.0   5875.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11885.0  11885.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22309.0  22309.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3069.0     65.3      0.1  	for variavel in corners1:
    21        46       7561.0    164.4      0.2  		array=np.array([variavel])
    22        46       2872.0     62.4      0.1  		matriz1.append(array)
    23         1       1348.0   1348.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     232876.0 232876.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        287.0    287.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      71547.0  71547.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21783.0  21783.0      0.6  	imagem2 = np.float32(img2)
    30         1     630288.0 630288.0     16.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96673.0  96673.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      83239.0  83239.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36798.0  36798.0      1.0  	dst2 = np.uint8(dst2)
    34         1      75535.0  75535.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      85958.0  85958.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       129       9511.0     73.7      0.3  	for variavel in corners2:
    39       128      22388.0    174.9      0.6  		array=np.array([variavel])
    40       128       8239.0     64.4      0.2  		matriz2.append(array)
    41         1       2887.0   2887.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2173253.0 2173253.0     57.9  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      19672.0  19672.0      0.5  	matches = bf.match(des1,des2)

