Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.605 MiB   48.605 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.496 MiB    0.891 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.621 MiB    0.125 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.914 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.203 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.617 MiB    0.414 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.859 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.859 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.984 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.984 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.996 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.996 MiB    0.000 MiB   	matriz1=[]
    20   51.996 MiB    0.000 MiB   	for variavel in corners1:
    21   51.996 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.996 MiB    0.000 MiB   		matriz1.append(array)
    23   52.062 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.145 MiB    4.082 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.203 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.203 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.203 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.523 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.523 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.523 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.203 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.523 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.523 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.523 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.523 MiB    0.000 MiB   	matriz2=[]
    38   58.527 MiB    0.000 MiB   	for variavel in corners2:
    39   58.527 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.527 MiB    0.000 MiB   		matriz2.append(array)
    41   58.531 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.539 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.816 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.80046 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      16937.0  16937.0      0.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        255.0    255.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3988.0   3988.0      0.1  	imagem1 = np.float32(img1)
    12         1      76134.0  76134.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13449.0  13449.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12386.0  12386.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5209.0   5209.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11523.0  11523.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23038.0  23038.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3035.0     64.6      0.1  	for variavel in corners1:
    21        46       8654.0    188.1      0.2  		array=np.array([variavel])
    22        46       2925.0     63.6      0.1  		matriz1.append(array)
    23         1       1284.0   1284.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234836.0 234836.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        290.0    290.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      70932.0  70932.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21791.0  21791.0      0.6  	imagem2 = np.float32(img2)
    30         1     625792.0 625792.0     16.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97386.0  97386.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85817.0  85817.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35718.0  35718.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76270.0  76270.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      89575.0  89575.0      2.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       129       8446.0     65.5      0.2  	for variavel in corners2:
    39       128      22085.0    172.5      0.6  		array=np.array([variavel])
    40       128       7949.0     62.1      0.2  		matriz2.append(array)
    41         1       2768.0   2768.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2221345.0 2221345.0     58.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      20354.0  20354.0      0.5  	matches = bf.match(des1,des2)

