Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.656 MiB   48.656 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.535 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.598 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.832 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.121 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.582 MiB    0.461 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.770 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.770 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.910 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.910 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.926 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.926 MiB    0.000 MiB   	matriz1=[]
    20   51.926 MiB    0.000 MiB   	for variavel in corners1:
    21   51.926 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.926 MiB    0.000 MiB   		matriz1.append(array)
    23   52.016 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.051 MiB    4.035 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.109 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.109 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.109 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.430 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.430 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.430 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.109 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.430 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.430 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.430 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.430 MiB    0.000 MiB   	matriz2=[]
    38   58.438 MiB    0.000 MiB   	for variavel in corners2:
    39   58.438 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.438 MiB    0.000 MiB   		matriz2.append(array)
    41   58.441 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.449 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.609 MiB    0.160 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 4.27272 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17976.0  17976.0      0.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        352.0    352.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4080.0   4080.0      0.1  	imagem1 = np.float32(img1)
    12         1      75772.0  75772.0      1.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14122.0  14122.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12318.0  12318.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5082.0   5082.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12000.0  12000.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         94.0     94.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22827.0  22827.0      0.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3186.0     67.8      0.1  	for variavel in corners1:
    21        46       7368.0    160.2      0.2  		array=np.array([variavel])
    22        46       2934.0     63.8      0.1  		matriz1.append(array)
    23         1       1285.0   1285.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234380.0 234380.0      5.5  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        387.0    387.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      73379.0  73379.0      1.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22602.0  22602.0      0.5  	imagem2 = np.float32(img2)
    30         1     629757.0 629757.0     14.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98467.0  98467.0      2.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84381.0  84381.0      2.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36703.0  36703.0      0.9  	dst2 = np.uint8(dst2)
    34         1      75353.0  75353.0      1.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     112679.0 112679.0      2.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       180      11726.0     65.1      0.3  	for variavel in corners2:
    39       179      29545.0    165.1      0.7  		array=np.array([variavel])
    40       179      11216.0     62.7      0.3  		matriz2.append(array)
    41         1       3533.0   3533.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2642341.0 2642341.0     61.8  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      26674.0  26674.0      0.6  	matches = bf.match(des1,des2)

