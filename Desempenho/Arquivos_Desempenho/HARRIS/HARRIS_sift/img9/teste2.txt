Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.105 MiB   49.105 MiB   @profile
     7                             def HARRIS_sift(img):
     8   50.070 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.188 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.422 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.637 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.027 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.203 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.203 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.371 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.371 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.426 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.426 MiB    0.000 MiB   	matriz1=[]
    20   52.426 MiB    0.000 MiB   	for variavel in corners1:
    21   52.426 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.426 MiB    0.000 MiB   		matriz1.append(array)
    23   52.551 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.434 MiB    3.883 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.492 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.492 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.492 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.812 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.812 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.812 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.492 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.812 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.812 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.812 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.812 MiB    0.000 MiB   	matriz2=[]
    38   58.820 MiB    0.000 MiB   	for variavel in corners2:
    39   58.820 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.820 MiB    0.000 MiB   		matriz2.append(array)
    41   58.824 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.832 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.125 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.80718 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17358.0  17358.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        330.0    330.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3949.0   3949.0      0.1  	imagem1 = np.float32(img1)
    12         1      76493.0  76493.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13088.0  13088.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12217.0  12217.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5217.0   5217.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12554.0  12554.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20912.0  20912.0      0.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3075.0     65.4      0.1  	for variavel in corners1:
    21        46       8641.0    187.8      0.2  		array=np.array([variavel])
    22        46       2995.0     65.1      0.1  		matriz1.append(array)
    23         1       1312.0   1312.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234902.0 234902.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        327.0    327.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      77729.0  77729.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21781.0  21781.0      0.6  	imagem2 = np.float32(img2)
    30         1     627336.0 627336.0     16.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96661.0  96661.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84876.0  84876.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36012.0  36012.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76561.0  76561.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     105023.0 105023.0      2.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       190      14097.0     74.2      0.4  	for variavel in corners2:
    39       189      32023.0    169.4      0.8  		array=np.array([variavel])
    40       189      11782.0     62.3      0.3  		matriz2.append(array)
    41         1       3736.0   3736.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2177774.0 2177774.0     57.2  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      28141.0  28141.0      0.7  	matches = bf.match(des1,des2)

