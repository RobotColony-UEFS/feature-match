Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.582 MiB   48.582 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.461 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.586 MiB    0.125 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.879 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.172 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.582 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.824 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.824 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.949 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.949 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.961 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.961 MiB    0.000 MiB   	matriz1=[]
    20   51.961 MiB    0.000 MiB   	for variavel in corners1:
    21   51.961 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.961 MiB    0.000 MiB   		matriz1.append(array)
    23   52.027 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.109 MiB    4.082 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.168 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.168 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.168 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.488 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.488 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.488 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.168 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.488 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.488 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.488 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.488 MiB    0.000 MiB   	matriz2=[]
    38   58.496 MiB    0.000 MiB   	for variavel in corners2:
    39   58.496 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.496 MiB    0.000 MiB   		matriz2.append(array)
    41   58.500 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.508 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.785 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.79728 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17138.0  17138.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        345.0    345.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3833.0   3833.0      0.1  	imagem1 = np.float32(img1)
    12         1      76331.0  76331.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12961.0  12961.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12494.0  12494.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5075.0   5075.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11503.0  11503.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23083.0  23083.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3313.0     70.5      0.1  	for variavel in corners1:
    21        46       7592.0    165.0      0.2  		array=np.array([variavel])
    22        46       4686.0    101.9      0.1  		matriz1.append(array)
    23         1       1278.0   1278.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234591.0 234591.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        275.0    275.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      77385.0  77385.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21719.0  21719.0      0.6  	imagem2 = np.float32(img2)
    30         1     626958.0 626958.0     16.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97063.0  97063.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85558.0  85558.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36611.0  36611.0      1.0  	dst2 = np.uint8(dst2)
    34         1      75301.0  75301.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     106965.0 106965.0      2.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       190      12504.0     65.8      0.3  	for variavel in corners2:
    39       189      32494.0    171.9      0.9  		array=np.array([variavel])
    40       189      13303.0     70.4      0.4  		matriz2.append(array)
    41         1       3871.0   3871.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2164679.0 2164679.0     57.0  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      28084.0  28084.0      0.7  	matches = bf.match(des1,des2)

