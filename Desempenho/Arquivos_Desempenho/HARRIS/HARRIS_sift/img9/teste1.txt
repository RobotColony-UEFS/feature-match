Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.664 MiB   48.664 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.629 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.746 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.980 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.250 MiB    1.270 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.629 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.930 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.930 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.113 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.113 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.176 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.176 MiB    0.000 MiB   	matriz1=[]
    20   52.176 MiB    0.000 MiB   	for variavel in corners1:
    21   52.176 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.176 MiB    0.000 MiB   		matriz1.append(array)
    23   52.301 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.250 MiB    3.949 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.309 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.309 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.309 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.629 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.629 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.629 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.309 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.629 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.629 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.629 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.629 MiB    0.000 MiB   	matriz2=[]
    38   58.637 MiB    0.000 MiB   	for variavel in corners2:
    39   58.637 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.637 MiB    0.000 MiB   		matriz2.append(array)
    41   58.641 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.648 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.891 MiB    0.242 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.78585 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      20037.0  20037.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        356.0    356.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3950.0   3950.0      0.1  	imagem1 = np.float32(img1)
    12         1      73525.0  73525.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14386.0  14386.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      13876.0  13876.0      0.4  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5077.0   5077.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11772.0  11772.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20875.0  20875.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3292.0     70.0      0.1  	for variavel in corners1:
    21        46       7345.0    159.7      0.2  		array=np.array([variavel])
    22        46       2801.0     60.9      0.1  		matriz1.append(array)
    23         1       1249.0   1249.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     235064.0 235064.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        274.0    274.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74766.0  74766.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      24195.0  24195.0      0.6  	imagem2 = np.float32(img2)
    30         1     624924.0 624924.0     16.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96169.0  96169.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84327.0  84327.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      34988.0  34988.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76757.0  76757.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     107086.0 107086.0      2.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       190      12370.0     65.1      0.3  	for variavel in corners2:
    39       189      31715.0    167.8      0.8  		array=np.array([variavel])
    40       189      11985.0     63.4      0.3  		matriz2.append(array)
    41         1       4026.0   4026.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2160420.0 2160420.0     57.1  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      27956.0  27956.0      0.7  	matches = bf.match(des1,des2)

