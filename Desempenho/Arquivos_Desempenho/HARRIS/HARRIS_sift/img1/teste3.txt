Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.012 MiB   49.012 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.918 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.039 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.273 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.621 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.012 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.312 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.312 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.500 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.500 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.500 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.500 MiB    0.000 MiB   	matriz1=[]
    20   52.500 MiB    0.000 MiB   	for variavel in corners1:
    21   52.500 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.500 MiB    0.000 MiB   		matriz1.append(array)
    23   52.566 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.641 MiB    4.074 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.699 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.699 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.699 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   59.020 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   59.020 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   59.020 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.699 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   59.020 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   59.020 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   59.020 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   59.020 MiB    0.000 MiB   	matriz2=[]
    38   59.031 MiB    0.000 MiB   	for variavel in corners2:
    39   59.031 MiB    0.004 MiB   		array=np.array([variavel])
    40   59.031 MiB    0.000 MiB   		matriz2.append(array)
    41   59.039 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   59.051 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.324 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.97467 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18714.0  18714.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        355.0    355.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4320.0   4320.0      0.1  	imagem1 = np.float32(img1)
    12         1      74692.0  74692.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13560.0  13560.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      13906.0  13906.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5184.0   5184.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11683.0  11683.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21203.0  21203.0      0.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         53.0     53.0      0.0  	matriz1=[]
    20        47       4031.0     85.8      0.1  	for variavel in corners1:
    21        46       7503.0    163.1      0.2  		array=np.array([variavel])
    22        46       2783.0     60.5      0.1  		matriz1.append(array)
    23         1       1241.0   1241.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234758.0 234758.0      5.9  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        274.0    274.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74756.0  74756.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      23293.0  23293.0      0.6  	imagem2 = np.float32(img2)
    30         1     628309.0 628309.0     15.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96840.0  96840.0      2.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85166.0  85166.0      2.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      34991.0  34991.0      0.9  	dst2 = np.uint8(dst2)
    34         1      77407.0  77407.0      1.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     171101.0 171101.0      4.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       287      20050.0     69.9      0.5  	for variavel in corners2:
    39       286      47927.0    167.6      1.2  		array=np.array([variavel])
    40       286      17779.0     62.2      0.4  		matriz2.append(array)
    41         1       5875.0   5875.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2233588.0 2233588.0     56.2  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      43100.0  43100.0      1.1  	matches = bf.match(des1,des2)

