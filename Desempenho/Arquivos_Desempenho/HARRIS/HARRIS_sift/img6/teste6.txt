Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.621 MiB   48.621 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.500 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.625 MiB    0.125 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.918 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.211 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.621 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.863 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.863 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.988 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.988 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.000 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.000 MiB    0.000 MiB   	matriz1=[]
    20   52.000 MiB    0.000 MiB   	for variavel in corners1:
    21   52.000 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.000 MiB    0.000 MiB   		matriz1.append(array)
    23   52.066 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.148 MiB    4.082 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.207 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.207 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.207 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.527 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.527 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.527 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.207 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.527 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.527 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.527 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.527 MiB    0.000 MiB   	matriz2=[]
    38   58.531 MiB    0.000 MiB   	for variavel in corners2:
    39   58.531 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.531 MiB    0.000 MiB   		matriz2.append(array)
    41   58.539 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.547 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.824 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.78993 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17078.0  17078.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        261.0    261.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4059.0   4059.0      0.1  	imagem1 = np.float32(img1)
    12         1      77417.0  77417.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13195.0  13195.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12441.0  12441.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5103.0   5103.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11582.0  11582.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22062.0  22062.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       4665.0     99.3      0.1  	for variavel in corners1:
    21        46       7795.0    169.5      0.2  		array=np.array([variavel])
    22        46       3420.0     74.3      0.1  		matriz1.append(array)
    23         1       1237.0   1237.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     233686.0 233686.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        276.0    276.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74843.0  74843.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21797.0  21797.0      0.6  	imagem2 = np.float32(img2)
    30         1     626487.0 626487.0     16.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96975.0  96975.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84870.0  84870.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36147.0  36147.0      1.0  	dst2 = np.uint8(dst2)
    34         1      75584.0  75584.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100924.0 100924.0      2.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       179      15090.0     84.3      0.4  	for variavel in corners2:
    39       178      29744.0    167.1      0.8  		array=np.array([variavel])
    40       178      11299.0     63.5      0.3  		matriz2.append(array)
    41         1       3646.0   3646.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2169789.0 2169789.0     57.3  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      28179.0  28179.0      0.7  	matches = bf.match(des1,des2)

