Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.199 MiB   49.199 MiB   @profile
     7                             def HARRIS_sift(img):
     8   50.121 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.238 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.473 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.684 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.074 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.258 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.258 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.418 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.418 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.469 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.469 MiB    0.000 MiB   	matriz1=[]
    20   52.469 MiB    0.000 MiB   	for variavel in corners1:
    21   52.469 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.469 MiB    0.000 MiB   		matriz1.append(array)
    23   52.590 MiB    0.121 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.410 MiB    3.820 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.469 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.469 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.469 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.789 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.789 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.789 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.469 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.789 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.789 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.789 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.789 MiB    0.000 MiB   	matriz2=[]
    38   58.793 MiB    0.000 MiB   	for variavel in corners2:
    39   58.793 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.793 MiB    0.000 MiB   		matriz2.append(array)
    41   58.801 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.809 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.105 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.78611 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17284.0  17284.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        353.0    353.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3964.0   3964.0      0.1  	imagem1 = np.float32(img1)
    12         1      76177.0  76177.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13042.0  13042.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12459.0  12459.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5999.0   5999.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12596.0  12596.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21842.0  21842.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3132.0     66.6      0.1  	for variavel in corners1:
    21        46       7673.0    166.8      0.2  		array=np.array([variavel])
    22        46       3922.0     85.3      0.1  		matriz1.append(array)
    23         1       1428.0   1428.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     231950.0 231950.0      6.1  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        391.0    391.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      75199.0  75199.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21819.0  21819.0      0.6  	imagem2 = np.float32(img2)
    30         1     629563.0 629563.0     16.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96681.0  96681.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      82948.0  82948.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37653.0  37653.0      1.0  	dst2 = np.uint8(dst2)
    34         1      76214.0  76214.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     101373.0 101373.0      2.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       179      12837.0     71.7      0.3  	for variavel in corners2:
    39       178      29456.0    165.5      0.8  		array=np.array([variavel])
    40       178      11535.0     64.8      0.3  		matriz2.append(array)
    41         1       3791.0   3791.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2168099.0 2168099.0     57.3  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      26441.0  26441.0      0.7  	matches = bf.match(des1,des2)

