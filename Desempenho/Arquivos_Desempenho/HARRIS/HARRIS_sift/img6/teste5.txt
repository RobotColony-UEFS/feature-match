Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.531 MiB   48.531 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.414 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.539 MiB    0.125 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.832 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.121 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.535 MiB    0.414 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.777 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.777 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.902 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.902 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.914 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.914 MiB    0.000 MiB   	matriz1=[]
    20   51.914 MiB    0.000 MiB   	for variavel in corners1:
    21   51.914 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.914 MiB    0.000 MiB   		matriz1.append(array)
    23   51.980 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.062 MiB    4.082 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.121 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.121 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.121 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.441 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.441 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.441 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.121 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.441 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.441 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.441 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.441 MiB    0.000 MiB   	matriz2=[]
    38   58.445 MiB    0.000 MiB   	for variavel in corners2:
    39   58.445 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.445 MiB    0.000 MiB   		matriz2.append(array)
    41   58.453 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.461 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.762 MiB    0.301 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.78353 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17013.0  17013.0      0.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        343.0    343.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3968.0   3968.0      0.1  	imagem1 = np.float32(img1)
    12         1      75637.0  75637.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12089.0  12089.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12866.0  12866.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4986.0   4986.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11680.0  11680.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20984.0  20984.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3251.0     69.2      0.1  	for variavel in corners1:
    21        46       8711.0    189.4      0.2  		array=np.array([variavel])
    22        46       4542.0     98.7      0.1  		matriz1.append(array)
    23         1       1366.0   1366.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     232684.0 232684.0      6.1  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        385.0    385.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      77718.0  77718.0      2.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21693.0  21693.0      0.6  	imagem2 = np.float32(img2)
    30         1     623594.0 623594.0     16.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96530.0  96530.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84645.0  84645.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      34899.0  34899.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76715.0  76715.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100878.0 100878.0      2.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         94.0     94.0      0.0  	matriz2=[]
    38       179      11517.0     64.3      0.3  	for variavel in corners2:
    39       178      32288.0    181.4      0.9  		array=np.array([variavel])
    40       178      11626.0     65.3      0.3  		matriz2.append(array)
    41         1       3674.0   3674.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2169335.0 2169335.0     57.3  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      27588.0  27588.0      0.7  	matches = bf.match(des1,des2)

