Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.656 MiB   48.656 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.535 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.598 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.832 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.121 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.582 MiB    0.461 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.770 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.770 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.910 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.910 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.926 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.926 MiB    0.000 MiB   	matriz1=[]
    20   51.926 MiB    0.000 MiB   	for variavel in corners1:
    21   51.926 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.926 MiB    0.000 MiB   		matriz1.append(array)
    23   52.016 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.051 MiB    4.035 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.109 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.109 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.109 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.430 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.430 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.430 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.109 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.430 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.430 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.430 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.430 MiB    0.000 MiB   	matriz2=[]
    38   58.434 MiB    0.000 MiB   	for variavel in corners2:
    39   58.434 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.434 MiB    0.000 MiB   		matriz2.append(array)
    41   58.441 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.449 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.609 MiB    0.160 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.78674 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17738.0  17738.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        504.0    504.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3782.0   3782.0      0.1  	imagem1 = np.float32(img1)
    12         1      76091.0  76091.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13723.0  13723.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12916.0  12916.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5182.0   5182.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12372.0  12372.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1        214.0    214.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21409.0  21409.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3186.0     67.8      0.1  	for variavel in corners1:
    21        46       7461.0    162.2      0.2  		array=np.array([variavel])
    22        46       2810.0     61.1      0.1  		matriz1.append(array)
    23         1       1274.0   1274.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     236845.0 236845.0      6.3  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74724.0  74724.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22646.0  22646.0      0.6  	imagem2 = np.float32(img2)
    30         1     627631.0 627631.0     16.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96478.0  96478.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84254.0  84254.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35805.0  35805.0      0.9  	dst2 = np.uint8(dst2)
    34         1      77355.0  77355.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     103724.0 103724.0      2.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       179      11662.0     65.2      0.3  	for variavel in corners2:
    39       178      29344.0    164.9      0.8  		array=np.array([variavel])
    40       178      11310.0     63.5      0.3  		matriz2.append(array)
    41         1       3642.0   3642.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2165771.0 2165771.0     57.2  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      26419.0  26419.0      0.7  	matches = bf.match(des1,des2)

