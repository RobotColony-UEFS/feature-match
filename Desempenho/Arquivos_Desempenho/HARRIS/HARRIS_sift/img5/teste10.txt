Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.695 MiB   48.695 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.660 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.777 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.012 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.281 MiB    1.270 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.660 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.961 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.961 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.145 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.145 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.207 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.207 MiB    0.000 MiB   	matriz1=[]
    20   52.207 MiB    0.000 MiB   	for variavel in corners1:
    21   52.207 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.207 MiB    0.000 MiB   		matriz1.append(array)
    23   52.332 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.281 MiB    3.949 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.340 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.340 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.340 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.660 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.660 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.660 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.340 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.660 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.660 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.660 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.660 MiB    0.000 MiB   	matriz2=[]
    38   58.668 MiB    0.000 MiB   	for variavel in corners2:
    39   58.668 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.668 MiB    0.000 MiB   		matriz2.append(array)
    41   58.672 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.680 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.949 MiB    0.270 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.76918 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18077.0  18077.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        256.0    256.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3936.0   3936.0      0.1  	imagem1 = np.float32(img1)
    12         1      76000.0  76000.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13242.0  13242.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12584.0  12584.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5024.0   5024.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11589.0  11589.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22384.0  22384.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         52.0     52.0      0.0  	matriz1=[]
    20        47       2996.0     63.7      0.1  	for variavel in corners1:
    21        46       7570.0    164.6      0.2  		array=np.array([variavel])
    22        46       2848.0     61.9      0.1  		matriz1.append(array)
    23         1       1261.0   1261.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234189.0 234189.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        350.0    350.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      71498.0  71498.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      23887.0  23887.0      0.6  	imagem2 = np.float32(img2)
    30         1     626285.0 626285.0     16.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96691.0  96691.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84824.0  84824.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35137.0  35137.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76741.0  76741.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      89353.0  89353.0      2.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       189      12438.0     65.8      0.3  	for variavel in corners2:
    39       188      33396.0    177.6      0.9  		array=np.array([variavel])
    40       188      12043.0     64.1      0.3  		matriz2.append(array)
    41         1       3724.0   3724.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2161748.0 2161748.0     57.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      28837.0  28837.0      0.8  	matches = bf.match(des1,des2)

