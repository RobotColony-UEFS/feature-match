Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.645 MiB   48.645 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.453 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.516 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.750 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.039 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.512 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.699 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.699 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.789 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.789 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.816 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.816 MiB    0.000 MiB   	matriz1=[]
    20   51.816 MiB    0.000 MiB   	for variavel in corners1:
    21   51.816 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.816 MiB    0.000 MiB   		matriz1.append(array)
    23   51.914 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.777 MiB    3.863 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.836 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.836 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.836 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.156 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.156 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.156 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.836 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.156 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.156 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.156 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.156 MiB    0.000 MiB   	matriz2=[]
    38   58.164 MiB    0.000 MiB   	for variavel in corners2:
    39   58.164 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.164 MiB    0.000 MiB   		matriz2.append(array)
    41   58.168 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.176 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.473 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.78871 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17992.0  17992.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        358.0    358.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4029.0   4029.0      0.1  	imagem1 = np.float32(img1)
    12         1      74286.0  74286.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12273.0  12273.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      13662.0  13662.0      0.4  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4944.0   4944.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11637.0  11637.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22944.0  22944.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3086.0     65.7      0.1  	for variavel in corners1:
    21        46       7307.0    158.8      0.2  		array=np.array([variavel])
    22        46       2863.0     62.2      0.1  		matriz1.append(array)
    23         1       1327.0   1327.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     235689.0 235689.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        396.0    396.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      75074.0  75074.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22717.0  22717.0      0.6  	imagem2 = np.float32(img2)
    30         1     626165.0 626165.0     16.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96451.0  96451.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85273.0  85273.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36040.0  36040.0      1.0  	dst2 = np.uint8(dst2)
    34         1      76274.0  76274.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      94078.0  94078.0      2.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       184      11846.0     64.4      0.3  	for variavel in corners2:
    39       183      30563.0    167.0      0.8  		array=np.array([variavel])
    40       183      11349.0     62.0      0.3  		matriz2.append(array)
    41         1       3757.0   3757.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2178126.0 2178126.0     57.5  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      27927.0  27927.0      0.7  	matches = bf.match(des1,des2)

