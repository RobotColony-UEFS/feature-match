Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.551 MiB   48.551 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.430 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.492 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.727 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.016 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.477 MiB    0.461 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.664 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.664 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.805 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.805 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.820 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.820 MiB    0.000 MiB   	matriz1=[]
    20   51.820 MiB    0.000 MiB   	for variavel in corners1:
    21   51.820 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.820 MiB    0.000 MiB   		matriz1.append(array)
    23   51.910 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.945 MiB    4.035 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.004 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.004 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.004 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.324 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.324 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.324 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.004 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.324 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.324 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.324 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.324 MiB    0.000 MiB   	matriz2=[]
    38   58.332 MiB    0.000 MiB   	for variavel in corners2:
    39   58.332 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.332 MiB    0.000 MiB   		matriz2.append(array)
    41   58.336 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.344 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.504 MiB    0.160 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.78094 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18485.0  18485.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        336.0    336.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3953.0   3953.0      0.1  	imagem1 = np.float32(img1)
    12         1      78033.0  78033.0      2.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13111.0  13111.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12851.0  12851.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4912.0   4912.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11903.0  11903.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22963.0  22963.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3145.0     66.9      0.1  	for variavel in corners1:
    21        46       7758.0    168.7      0.2  		array=np.array([variavel])
    22        46       2907.0     63.2      0.1  		matriz1.append(array)
    23         1       1290.0   1290.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234621.0 234621.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        279.0    279.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74995.0  74995.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      23601.0  23601.0      0.6  	imagem2 = np.float32(img2)
    30         1     623934.0 623934.0     16.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97212.0  97212.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85358.0  85358.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      34936.0  34936.0      0.9  	dst2 = np.uint8(dst2)
    34         1      77088.0  77088.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      92610.0  92610.0      2.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         64.0     64.0      0.0  	matriz2=[]
    38       184      12429.0     67.5      0.3  	for variavel in corners2:
    39       183      30600.0    167.2      0.8  		array=np.array([variavel])
    40       183      13707.0     74.9      0.4  		matriz2.append(array)
    41         1       3697.0   3697.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2166271.0 2166271.0     57.3  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      27660.0  27660.0      0.7  	matches = bf.match(des1,des2)

