Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.523 MiB   48.523 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.266 MiB    0.742 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.328 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.562 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   50.906 MiB    1.344 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.379 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.566 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.566 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.652 MiB    0.086 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.652 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.676 MiB    0.023 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.676 MiB    0.000 MiB   	matriz1=[]
    20   51.676 MiB    0.000 MiB   	for variavel in corners1:
    21   51.676 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.676 MiB    0.000 MiB   		matriz1.append(array)
    23   51.773 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.684 MiB    3.910 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.742 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.742 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.742 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.062 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.062 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.062 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.742 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.062 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.062 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.062 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.062 MiB    0.000 MiB   	matriz2=[]
    38   58.070 MiB    0.000 MiB   	for variavel in corners2:
    39   58.070 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.070 MiB    0.000 MiB   		matriz2.append(array)
    41   58.074 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.082 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.316 MiB    0.234 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.76048 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      19141.0  19141.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        331.0    331.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3809.0   3809.0      0.1  	imagem1 = np.float32(img1)
    12         1      74143.0  74143.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12804.0  12804.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      13956.0  13956.0      0.4  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5202.0   5202.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12546.0  12546.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20939.0  20939.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3132.0     66.6      0.1  	for variavel in corners1:
    21        46       7496.0    163.0      0.2  		array=np.array([variavel])
    22        46       2853.0     62.0      0.1  		matriz1.append(array)
    23         1       1276.0   1276.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234424.0 234424.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        306.0    306.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74469.0  74469.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22220.0  22220.0      0.6  	imagem2 = np.float32(img2)
    30         1     626395.0 626395.0     16.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96403.0  96403.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      82549.0  82549.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38102.0  38102.0      1.0  	dst2 = np.uint8(dst2)
    34         1      75650.0  75650.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      90874.0  90874.0      2.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       184      11960.0     65.0      0.3  	for variavel in corners2:
    39       183      31524.0    172.3      0.8  		array=np.array([variavel])
    40       183      12224.0     66.8      0.3  		matriz2.append(array)
    41         1       3599.0   3599.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2153935.0 2153935.0     57.3  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      27929.0  27929.0      0.7  	matches = bf.match(des1,des2)

