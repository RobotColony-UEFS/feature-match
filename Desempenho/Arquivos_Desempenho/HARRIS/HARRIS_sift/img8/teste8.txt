Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.961 MiB   48.961 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.867 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.988 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.223 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.570 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.961 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.262 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.262 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.449 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.449 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.449 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.449 MiB    0.000 MiB   	matriz1=[]
    20   52.449 MiB    0.000 MiB   	for variavel in corners1:
    21   52.449 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.449 MiB    0.000 MiB   		matriz1.append(array)
    23   52.516 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.590 MiB    4.074 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.648 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.648 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.648 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.969 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.969 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.969 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.648 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.969 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.969 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.969 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.969 MiB    0.000 MiB   	matriz2=[]
    38   58.980 MiB    0.000 MiB   	for variavel in corners2:
    39   58.980 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.980 MiB    0.000 MiB   		matriz2.append(array)
    41   58.988 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   59.000 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.273 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.94586 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18092.0  18092.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        344.0    344.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4056.0   4056.0      0.1  	imagem1 = np.float32(img1)
    12         1      75780.0  75780.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14078.0  14078.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12416.0  12416.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5142.0   5142.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12040.0  12040.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22735.0  22735.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3026.0     64.4      0.1  	for variavel in corners1:
    21        46       7613.0    165.5      0.2  		array=np.array([variavel])
    22        46       2798.0     60.8      0.1  		matriz1.append(array)
    23         1       1289.0   1289.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234628.0 234628.0      5.9  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        285.0    285.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      75629.0  75629.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22746.0  22746.0      0.6  	imagem2 = np.float32(img2)
    30         1     628451.0 628451.0     15.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96674.0  96674.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84340.0  84340.0      2.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36906.0  36906.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76445.0  76445.0      1.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     184717.0 184717.0      4.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1        102.0    102.0      0.0  	matriz2=[]
    38       285      18424.0     64.6      0.5  	for variavel in corners2:
    39       284      47899.0    168.7      1.2  		array=np.array([variavel])
    40       284      18702.0     65.9      0.5  		matriz2.append(array)
    41         1       5569.0   5569.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2189507.0 2189507.0     55.5  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      45202.0  45202.0      1.1  	matches = bf.match(des1,des2)

