Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.598 MiB   48.598 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.473 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.535 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.770 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.062 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.520 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.707 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.707 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.848 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.848 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.863 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.863 MiB    0.000 MiB   	matriz1=[]
    20   51.863 MiB    0.000 MiB   	for variavel in corners1:
    21   51.863 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.863 MiB    0.000 MiB   		matriz1.append(array)
    23   51.953 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.988 MiB    4.035 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.047 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.047 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.047 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.367 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.367 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.367 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.047 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.367 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.367 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.367 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.367 MiB    0.000 MiB   	matriz2=[]
    38   58.379 MiB    0.000 MiB   	for variavel in corners2:
    39   58.379 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.379 MiB    0.000 MiB   		matriz2.append(array)
    41   58.387 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.398 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.559 MiB    0.160 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.92183 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      20116.0  20116.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        338.0    338.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4075.0   4075.0      0.1  	imagem1 = np.float32(img1)
    12         1      73086.0  73086.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13199.0  13199.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      15055.0  15055.0      0.4  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5007.0   5007.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12224.0  12224.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21060.0  21060.0      0.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3033.0     64.5      0.1  	for variavel in corners1:
    21        46       7744.0    168.3      0.2  		array=np.array([variavel])
    22        46       2858.0     62.1      0.1  		matriz1.append(array)
    23         1       1350.0   1350.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234299.0 234299.0      6.0  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        282.0    282.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      73637.0  73637.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22316.0  22316.0      0.6  	imagem2 = np.float32(img2)
    30         1     629577.0 629577.0     16.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96727.0  96727.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      83650.0  83650.0      2.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36091.0  36091.0      0.9  	dst2 = np.uint8(dst2)
    34         1      77144.0  77144.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     179813.0 179813.0      4.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       285      20068.0     70.4      0.5  	for variavel in corners2:
    39       284      47871.0    168.6      1.2  		array=np.array([variavel])
    40       284      19319.0     68.0      0.5  		matriz2.append(array)
    41         1       5589.0   5589.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2171891.0 2171891.0     55.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      44123.0  44123.0      1.1  	matches = bf.match(des1,des2)

