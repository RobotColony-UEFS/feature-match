Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.762 MiB   48.762 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.574 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.695 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.930 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.219 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.645 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.832 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.832 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.930 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.930 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.965 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.965 MiB    0.000 MiB   	matriz1=[]
    20   51.965 MiB    0.000 MiB   	for variavel in corners1:
    21   51.965 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.965 MiB    0.000 MiB   		matriz1.append(array)
    23   52.070 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.797 MiB    3.727 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.855 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.855 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.855 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.176 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.176 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.176 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.855 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.176 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.176 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.176 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.176 MiB    0.000 MiB   	matriz2=[]
    38   58.188 MiB    0.000 MiB   	for variavel in corners2:
    39   58.188 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.188 MiB    0.000 MiB   		matriz2.append(array)
    41   58.195 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.207 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.555 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.91521 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18894.0  18894.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        360.0    360.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3843.0   3843.0      0.1  	imagem1 = np.float32(img1)
    12         1      74549.0  74549.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13897.0  13897.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12931.0  12931.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5069.0   5069.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11689.0  11689.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21143.0  21143.0      0.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3129.0     66.6      0.1  	for variavel in corners1:
    21        46       9017.0    196.0      0.2  		array=np.array([variavel])
    22        46       2903.0     63.1      0.1  		matriz1.append(array)
    23         1       1592.0   1592.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234755.0 234755.0      6.0  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        279.0    279.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74981.0  74981.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      23072.0  23072.0      0.6  	imagem2 = np.float32(img2)
    30         1     624650.0 624650.0     16.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96671.0  96671.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84879.0  84879.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      34887.0  34887.0      0.9  	dst2 = np.uint8(dst2)
    34         1      77354.0  77354.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     184165.0 184165.0      4.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       285      19165.0     67.2      0.5  	for variavel in corners2:
    39       284      48343.0    170.2      1.2  		array=np.array([variavel])
    40       284      17159.0     60.4      0.4  		matriz2.append(array)
    41         1       5718.0   5718.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2167458.0 2167458.0     55.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      42381.0  42381.0      1.1  	matches = bf.match(des1,des2)

