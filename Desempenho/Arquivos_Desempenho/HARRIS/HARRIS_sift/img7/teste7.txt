Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.672 MiB   48.672 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.480 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.543 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.777 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.066 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.539 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.727 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.727 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.816 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.816 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.844 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.844 MiB    0.000 MiB   	matriz1=[]
    20   51.844 MiB    0.000 MiB   	for variavel in corners1:
    21   51.844 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.844 MiB    0.000 MiB   		matriz1.append(array)
    23   51.941 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.805 MiB    3.863 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.863 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.863 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.863 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.184 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.184 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.184 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.863 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.184 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.184 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.184 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.184 MiB    0.000 MiB   	matriz2=[]
    38   58.188 MiB    0.000 MiB   	for variavel in corners2:
    39   58.188 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.188 MiB    0.000 MiB   		matriz2.append(array)
    41   58.195 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.199 MiB    0.004 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.496 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.74497 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17921.0  17921.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        333.0    333.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3970.0   3970.0      0.1  	imagem1 = np.float32(img1)
    12         1      75367.0  75367.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13320.0  13320.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12633.0  12633.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6334.0   6334.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12580.0  12580.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21125.0  21125.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         53.0     53.0      0.0  	matriz1=[]
    20        47       3069.0     65.3      0.1  	for variavel in corners1:
    21        46       7518.0    163.4      0.2  		array=np.array([variavel])
    22        46       2823.0     61.4      0.1  		matriz1.append(array)
    23         1       1319.0   1319.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234018.0 234018.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        281.0    281.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      77319.0  77319.0      2.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22206.0  22206.0      0.6  	imagem2 = np.float32(img2)
    30         1     627143.0 627143.0     16.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95273.0  95273.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84609.0  84609.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37435.0  37435.0      1.0  	dst2 = np.uint8(dst2)
    34         1      76142.0  76142.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      73811.0  73811.0      2.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       145      10681.0     73.7      0.3  	for variavel in corners2:
    39       144      24746.0    171.8      0.7  		array=np.array([variavel])
    40       144       9715.0     67.5      0.3  		matriz2.append(array)
    41         1       3136.0   3136.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2167252.0 2167252.0     57.9  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      22607.0  22607.0      0.6  	matches = bf.match(des1,des2)

