Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.043 MiB   49.043 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.918 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.023 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.258 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.469 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.852 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.031 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.031 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.137 MiB    0.105 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.137 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.180 MiB    0.043 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.180 MiB    0.000 MiB   	matriz1=[]
    20   52.180 MiB    0.000 MiB   	for variavel in corners1:
    21   52.180 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.180 MiB    0.000 MiB   		matriz1.append(array)
    23   52.293 MiB    0.113 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.691 MiB    0.398 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.754 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.336 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.656 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.977 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.977 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.977 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.238 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.559 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.559 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.559 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.559 MiB    0.000 MiB   	matriz2=[]
    38   58.566 MiB    0.000 MiB   	for variavel in corners2:
    39   58.566 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.566 MiB    0.000 MiB   		matriz2.append(array)
    41   58.574 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.582 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.977 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.42943 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17026.0  17026.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        332.0    332.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3843.0   3843.0      0.3  	imagem1 = np.float32(img1)
    12         1      75844.0  75844.0      5.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12444.0  12444.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12878.0  12878.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5071.0   5071.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11765.0  11765.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22615.0  22615.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3072.0     65.4      0.2  	for variavel in corners1:
    21        46       7689.0    167.2      0.5  		array=np.array([variavel])
    22        46       2983.0     64.8      0.2  		matriz1.append(array)
    23         1       1293.0   1293.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      10399.0  10399.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        272.0    272.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79403.0  79403.0      5.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27542.0  27542.0      1.9  	imagem2 = np.float32(img2)
    30         1     577702.0 577702.0     40.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96798.0  96798.0      6.8  	dst2 = cv2.dilate(dst2,None)
    32         1      85851.0  85851.0      6.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39002.0  39002.0      2.7  	dst2 = np.uint8(dst2)
    34         1      75934.0  75934.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     115503.0 115503.0      8.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       226      15877.0     70.3      1.1  	for variavel in corners2:
    39       225      37451.0    166.4      2.6  		array=np.array([variavel])
    40       225      14122.0     62.8      1.0  		matriz2.append(array)
    41         1       4594.0   4594.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      66274.0  66274.0      4.6  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5563.0   5563.0      0.4  	matches = bf.match(des1,des2)

