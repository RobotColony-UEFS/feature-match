Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.754 MiB   48.754 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.559 MiB    0.805 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.609 MiB    0.051 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.844 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.133 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.605 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.793 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.793 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.883 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.883 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.910 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.910 MiB    0.000 MiB   	matriz1=[]
    20   51.910 MiB    0.000 MiB   	for variavel in corners1:
    21   51.910 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.910 MiB    0.000 MiB   		matriz1.append(array)
    23   52.008 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.652 MiB    0.645 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.711 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.293 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.613 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.934 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.934 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.934 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.195 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.516 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.516 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.516 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.516 MiB    0.000 MiB   	matriz2=[]
    38   58.520 MiB    0.000 MiB   	for variavel in corners2:
    39   58.520 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.520 MiB    0.000 MiB   		matriz2.append(array)
    41   58.527 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.535 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.828 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.40192 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17616.0  17616.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        248.0    248.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3844.0   3844.0      0.3  	imagem1 = np.float32(img1)
    12         1      76422.0  76422.0      5.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12246.0  12246.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12735.0  12735.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5115.0   5115.0      0.4  	dst1 = np.uint8(dst1)
    16         1      12495.0  12495.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         83.0     83.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22209.0  22209.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3184.0     67.7      0.2  	for variavel in corners1:
    21        46       8176.0    177.7      0.6  		array=np.array([variavel])
    22        46       2807.0     61.0      0.2  		matriz1.append(array)
    23         1       1525.0   1525.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9248.0   9248.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        394.0    394.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78758.0  78758.0      5.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26715.0  26715.0      1.9  	imagem2 = np.float32(img2)
    30         1     579720.0 579720.0     41.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96323.0  96323.0      6.9  	dst2 = cv2.dilate(dst2,None)
    32         1      85653.0  85653.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38024.0  38024.0      2.7  	dst2 = np.uint8(dst2)
    34         1      75750.0  75750.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1        128.0    128.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114054.0 114054.0      8.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       180      13565.0     75.4      1.0  	for variavel in corners2:
    39       179      28928.0    161.6      2.1  		array=np.array([variavel])
    40       179      11097.0     62.0      0.8  		matriz2.append(array)
    41         1       3803.0   3803.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      57506.0  57506.0      4.1  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3443.0   3443.0      0.2  	matches = bf.match(des1,des2)

