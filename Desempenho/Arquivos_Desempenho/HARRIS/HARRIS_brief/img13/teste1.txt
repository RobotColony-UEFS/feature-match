Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.594 MiB   48.594 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.465 MiB    0.871 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.523 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.758 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.051 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.508 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.695 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.695 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.836 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.836 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.852 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.852 MiB    0.000 MiB   	matriz1=[]
    20   51.852 MiB    0.000 MiB   	for variavel in corners1:
    21   51.852 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.852 MiB    0.000 MiB   		matriz1.append(array)
    23   51.941 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.516 MiB    0.574 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.516 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.098 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.418 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.738 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.738 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.789 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.051 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.371 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.371 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.371 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.371 MiB    0.000 MiB   	matriz2=[]
    38   58.375 MiB    0.000 MiB   	for variavel in corners2:
    39   58.375 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.375 MiB    0.000 MiB   		matriz2.append(array)
    41   58.383 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.391 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.609 MiB    0.219 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.44429 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18024.0  18024.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        249.0    249.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3975.0   3975.0      0.3  	imagem1 = np.float32(img1)
    12         1      74576.0  74576.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13964.0  13964.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12555.0  12555.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5103.0   5103.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11538.0  11538.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20911.0  20911.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3166.0     67.4      0.2  	for variavel in corners1:
    21        46       7815.0    169.9      0.5  		array=np.array([variavel])
    22        46       4207.0     91.5      0.3  		matriz1.append(array)
    23         1       1348.0   1348.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9272.0   9272.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        177.0    177.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77855.0  77855.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28514.0  28514.0      2.0  	imagem2 = np.float32(img2)
    30         1     626363.0 626363.0     43.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96832.0  96832.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      85049.0  85049.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37179.0  37179.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76934.0  76934.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     111555.0 111555.0      7.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       180      11797.0     65.5      0.8  	for variavel in corners2:
    39       179      30015.0    167.7      2.1  		array=np.array([variavel])
    40       179      11911.0     66.5      0.8  		matriz2.append(array)
    41         1       3663.0   3663.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      56004.0  56004.0      3.9  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3444.0   3444.0      0.2  	matches = bf.match(des1,des2)

