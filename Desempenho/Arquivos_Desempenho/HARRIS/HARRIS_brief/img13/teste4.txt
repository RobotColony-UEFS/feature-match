Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.984 MiB   48.984 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.840 MiB    0.855 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.945 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.180 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.465 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.840 MiB    0.375 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.023 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.023 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.125 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.125 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.164 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.164 MiB    0.000 MiB   	matriz1=[]
    20   52.164 MiB    0.000 MiB   	for variavel in corners1:
    21   52.164 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.164 MiB    0.000 MiB   		matriz1.append(array)
    23   52.273 MiB    0.109 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.664 MiB    0.391 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.785 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.367 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.688 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.008 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.008 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.008 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.270 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.590 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.590 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.590 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.590 MiB    0.000 MiB   	matriz2=[]
    38   58.594 MiB    0.000 MiB   	for variavel in corners2:
    39   58.594 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.594 MiB    0.000 MiB   		matriz2.append(array)
    41   58.602 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.609 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.832 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.45361 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17096.0  17096.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        237.0    237.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3851.0   3851.0      0.3  	imagem1 = np.float32(img1)
    12         1      75752.0  75752.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13097.0  13097.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12876.0  12876.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4989.0   4989.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12013.0  12013.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         93.0     93.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22981.0  22981.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3229.0     68.7      0.2  	for variavel in corners1:
    21        46       7793.0    169.4      0.5  		array=np.array([variavel])
    22        46       2987.0     64.9      0.2  		matriz1.append(array)
    23         1       1258.0   1258.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9042.0   9042.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        287.0    287.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82184.0  82184.0      5.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26792.0  26792.0      1.8  	imagem2 = np.float32(img2)
    30         1     623492.0 623492.0     42.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96657.0  96657.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84794.0  84794.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37853.0  37853.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76993.0  76993.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     112971.0 112971.0      7.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       180      12976.0     72.1      0.9  	for variavel in corners2:
    39       179      31356.0    175.2      2.2  		array=np.array([variavel])
    40       179      12211.0     68.2      0.8  		matriz2.append(array)
    41         1       3752.0   3752.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      60194.0  60194.0      4.1  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3606.0   3606.0      0.2  	matches = bf.match(des1,des2)

