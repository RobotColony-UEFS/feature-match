Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.012 MiB   49.012 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.977 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.082 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.316 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.531 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.922 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.098 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.098 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.266 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.266 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.320 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.320 MiB    0.000 MiB   	matriz1=[]
    20   52.320 MiB    0.000 MiB   	for variavel in corners1:
    21   52.320 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.320 MiB    0.000 MiB   		matriz1.append(array)
    23   52.445 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.922 MiB    0.477 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.922 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.504 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.824 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.145 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.145 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.145 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.406 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.727 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.727 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.727 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.727 MiB    0.000 MiB   	matriz2=[]
    38   58.734 MiB    0.000 MiB   	for variavel in corners2:
    39   58.734 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.734 MiB    0.000 MiB   		matriz2.append(array)
    41   58.746 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.758 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.105 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.50767 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18808.0  18808.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        301.0    301.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3833.0   3833.0      0.3  	imagem1 = np.float32(img1)
    12         1      74215.0  74215.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13082.0  13082.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12637.0  12637.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5117.0   5117.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11766.0  11766.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21421.0  21421.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1        116.0    116.0      0.0  	matriz1=[]
    20        47       3064.0     65.2      0.2  	for variavel in corners1:
    21        46       8612.0    187.2      0.6  		array=np.array([variavel])
    22        46       2843.0     61.8      0.2  		matriz1.append(array)
    23         1       1260.0   1260.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9098.0   9098.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        167.0    167.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80362.0  80362.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27228.0  27228.0      1.8  	imagem2 = np.float32(img2)
    30         1     577679.0 577679.0     38.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95473.0  95473.0      6.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84827.0  84827.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39159.0  39159.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76023.0  76023.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     170121.0 170121.0     11.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       287      19449.0     67.8      1.3  	for variavel in corners2:
    39       286      49707.0    173.8      3.3  		array=np.array([variavel])
    40       286      18114.0     63.3      1.2  		matriz2.append(array)
    41         1       5434.0   5434.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      72340.0  72340.0      4.8  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5193.0   5193.0      0.3  	matches = bf.match(des1,des2)

