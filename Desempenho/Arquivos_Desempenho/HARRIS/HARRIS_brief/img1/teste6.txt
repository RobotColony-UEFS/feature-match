Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.672 MiB   48.672 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.418 MiB    0.746 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.520 MiB    0.102 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.754 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.043 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.465 MiB    0.422 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.652 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.652 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.746 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.746 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.777 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.777 MiB    0.000 MiB   	matriz1=[]
    20   51.777 MiB    0.000 MiB   	for variavel in corners1:
    21   51.777 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.777 MiB    0.000 MiB   		matriz1.append(array)
    23   51.879 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.398 MiB    0.520 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.457 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.039 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.359 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.680 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.680 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.680 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.941 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.262 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.262 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.262 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.262 MiB    0.000 MiB   	matriz2=[]
    38   58.270 MiB    0.000 MiB   	for variavel in corners2:
    39   58.270 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.270 MiB    0.000 MiB   		matriz2.append(array)
    41   58.281 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.293 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.570 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.55708 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17061.0  17061.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        327.0    327.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4780.0   4780.0      0.3  	imagem1 = np.float32(img1)
    12         1      74520.0  74520.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13084.0  13084.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      13226.0  13226.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5205.0   5205.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12661.0  12661.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1        203.0    203.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20797.0  20797.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1        104.0    104.0      0.0  	matriz1=[]
    20        47       3126.0     66.5      0.2  	for variavel in corners1:
    21        46       7933.0    172.5      0.5  		array=np.array([variavel])
    22        46       2847.0     61.9      0.2  		matriz1.append(array)
    23         1       2175.0   2175.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8735.0   8735.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        281.0    281.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79775.0  79775.0      5.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27601.0  27601.0      1.8  	imagem2 = np.float32(img2)
    30         1     622935.0 622935.0     40.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95487.0  95487.0      6.1  	dst2 = cv2.dilate(dst2,None)
    32         1      84912.0  84912.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39026.0  39026.0      2.5  	dst2 = np.uint8(dst2)
    34         1      75848.0  75848.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     176417.0 176417.0     11.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       287      19588.0     68.3      1.3  	for variavel in corners2:
    39       286      46666.0    163.2      3.0  		array=np.array([variavel])
    40       286      17934.0     62.7      1.2  		matriz2.append(array)
    41         1       6421.0   6421.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      71706.0  71706.0      4.6  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5554.0   5554.0      0.4  	matches = bf.match(des1,des2)

