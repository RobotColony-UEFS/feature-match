Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   47.789 MiB   47.789 MiB   @profile
     7                             def HARRIS_brief(img):
     8   48.715 MiB    0.926 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   48.773 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.008 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   50.234 MiB    1.227 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   50.688 MiB    0.453 MiB   	dst1 = cv2.dilate(dst1,None)
    14   50.879 MiB    0.191 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   50.879 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.020 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.020 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.035 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.035 MiB    0.000 MiB   	matriz1=[]
    20   51.035 MiB    0.000 MiB   	for variavel in corners1:
    21   51.035 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.035 MiB    0.000 MiB   		matriz1.append(array)
    23   51.125 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   51.742 MiB    0.617 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   51.742 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.324 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   54.645 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   56.965 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   56.965 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.016 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.277 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   57.598 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   57.598 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   57.598 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   57.598 MiB    0.000 MiB   	matriz2=[]
    38   57.605 MiB    0.000 MiB   	for variavel in corners2:
    39   57.605 MiB    0.004 MiB   		array=np.array([variavel])
    40   57.605 MiB    0.000 MiB   		matriz2.append(array)
    41   57.617 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   57.629 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   57.848 MiB    0.219 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.50771 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17270.0  17270.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        317.0    317.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4930.0   4930.0      0.3  	imagem1 = np.float32(img1)
    12         1      74338.0  74338.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12396.0  12396.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12690.0  12690.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4975.0   4975.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11823.0  11823.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23909.0  23909.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3109.0     66.1      0.2  	for variavel in corners1:
    21        46       7635.0    166.0      0.5  		array=np.array([variavel])
    22        46       2872.0     62.4      0.2  		matriz1.append(array)
    23         1       1382.0   1382.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9504.0   9504.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        163.0    163.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80668.0  80668.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26712.0  26712.0      1.8  	imagem2 = np.float32(img2)
    30         1     575230.0 575230.0     38.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96711.0  96711.0      6.4  	dst2 = cv2.dilate(dst2,None)
    32         1      82749.0  82749.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39737.0  39737.0      2.6  	dst2 = np.uint8(dst2)
    34         1      77030.0  77030.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     172493.0 172493.0     11.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       287      20256.0     70.6      1.3  	for variavel in corners2:
    39       286      48508.0    169.6      3.2  		array=np.array([variavel])
    40       286      18386.0     64.3      1.2  		matriz2.append(array)
    41         1       6181.0   6181.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      70158.0  70158.0      4.7  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5294.0   5294.0      0.4  	matches = bf.match(des1,des2)

