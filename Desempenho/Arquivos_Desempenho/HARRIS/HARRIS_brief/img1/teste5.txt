Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.934 MiB   48.934 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.855 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.965 MiB    0.109 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.199 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.547 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.938 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.238 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.238 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.426 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.426 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.426 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.426 MiB    0.000 MiB   	matriz1=[]
    20   52.426 MiB    0.000 MiB   	for variavel in corners1:
    21   52.426 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.426 MiB    0.000 MiB   		matriz1.append(array)
    23   52.492 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.973 MiB    0.480 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.973 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.555 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.875 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.195 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.195 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.195 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.457 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.777 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.777 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.777 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.777 MiB    0.000 MiB   	matriz2=[]
    38   58.785 MiB    0.000 MiB   	for variavel in corners2:
    39   58.785 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.785 MiB    0.000 MiB   		matriz2.append(array)
    41   58.797 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.809 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.141 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.56612 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17280.0  17280.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        350.0    350.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3974.0   3974.0      0.3  	imagem1 = np.float32(img1)
    12         1      76035.0  76035.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13210.0  13210.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12587.0  12587.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5046.0   5046.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11631.0  11631.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23419.0  23419.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3177.0     67.6      0.2  	for variavel in corners1:
    21        46       7613.0    165.5      0.5  		array=np.array([variavel])
    22        46       2943.0     64.0      0.2  		matriz1.append(array)
    23         1       1227.0   1227.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8691.0   8691.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        177.0    177.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80653.0  80653.0      5.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26743.0  26743.0      1.7  	imagem2 = np.float32(img2)
    30         1     629705.0 629705.0     40.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96751.0  96751.0      6.2  	dst2 = cv2.dilate(dst2,None)
    32         1      86417.0  86417.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37207.0  37207.0      2.4  	dst2 = np.uint8(dst2)
    34         1      77125.0  77125.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     173202.0 173202.0     11.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       287      19637.0     68.4      1.3  	for variavel in corners2:
    39       286      48053.0    168.0      3.1  		array=np.array([variavel])
    40       286      18478.0     64.6      1.2  		matriz2.append(array)
    41         1       5903.0   5903.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      73397.0  73397.0      4.7  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5201.0   5201.0      0.3  	matches = bf.match(des1,des2)

