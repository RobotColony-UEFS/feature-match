Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.637 MiB   48.637 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.508 MiB    0.871 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.566 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.801 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.094 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.551 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.738 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.738 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.879 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.879 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.895 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.895 MiB    0.000 MiB   	matriz1=[]
    20   51.895 MiB    0.000 MiB   	for variavel in corners1:
    21   51.895 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.895 MiB    0.000 MiB   		matriz1.append(array)
    23   51.984 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.559 MiB    0.574 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.559 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.141 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.461 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.781 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.781 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.832 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.094 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.414 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.414 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.414 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.414 MiB    0.000 MiB   	matriz2=[]
    38   58.422 MiB    0.000 MiB   	for variavel in corners2:
    39   58.422 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.422 MiB    0.000 MiB   		matriz2.append(array)
    41   58.434 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.445 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.664 MiB    0.219 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.50286 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      16971.0  16971.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        334.0    334.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3972.0   3972.0      0.3  	imagem1 = np.float32(img1)
    12         1      75816.0  75816.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13215.0  13215.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12755.0  12755.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4980.0   4980.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12030.0  12030.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22986.0  22986.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3156.0     67.1      0.2  	for variavel in corners1:
    21        46       7624.0    165.7      0.5  		array=np.array([variavel])
    22        46       3765.0     81.8      0.3  		matriz1.append(array)
    23         1       1488.0   1488.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8982.0   8982.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        288.0    288.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79826.0  79826.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26574.0  26574.0      1.8  	imagem2 = np.float32(img2)
    30         1     574637.0 574637.0     38.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97265.0  97265.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      82376.0  82376.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      40044.0  40044.0      2.7  	dst2 = np.uint8(dst2)
    34         1      77315.0  77315.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     169476.0 169476.0     11.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       287      18592.0     64.8      1.2  	for variavel in corners2:
    39       286      47259.0    165.2      3.1  		array=np.array([variavel])
    40       286      17830.0     62.3      1.2  		matriz2.append(array)
    41         1       8572.0   8572.0      0.6  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      69553.0  69553.0      4.6  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       4891.0   4891.0      0.3  	matches = bf.match(des1,des2)

