Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.762 MiB   48.762 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.578 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.688 MiB    0.109 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.922 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.207 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.637 MiB    0.430 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.824 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.824 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.922 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.922 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.957 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.957 MiB    0.000 MiB   	matriz1=[]
    20   51.957 MiB    0.000 MiB   	for variavel in corners1:
    21   51.957 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.957 MiB    0.000 MiB   		matriz1.append(array)
    23   52.062 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.453 MiB    0.391 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.512 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.094 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.414 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.734 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.734 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.734 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.996 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.316 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.316 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.316 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.316 MiB    0.000 MiB   	matriz2=[]
    38   58.324 MiB    0.000 MiB   	for variavel in corners2:
    39   58.324 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.324 MiB    0.000 MiB   		matriz2.append(array)
    41   58.336 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.348 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.633 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.55884 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      16998.0  16998.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        330.0    330.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4053.0   4053.0      0.3  	imagem1 = np.float32(img1)
    12         1      75634.0  75634.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13141.0  13141.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12331.0  12331.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5083.0   5083.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11621.0  11621.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22746.0  22746.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3084.0     65.6      0.2  	for variavel in corners1:
    21        46       8158.0    177.3      0.5  		array=np.array([variavel])
    22        46       2941.0     63.9      0.2  		matriz1.append(array)
    23         1       1352.0   1352.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8596.0   8596.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        288.0    288.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79585.0  79585.0      5.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27719.0  27719.0      1.8  	imagem2 = np.float32(img2)
    30         1     628070.0 628070.0     40.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96774.0  96774.0      6.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84939.0  84939.0      5.4  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37834.0  37834.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76828.0  76828.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     172406.0 172406.0     11.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       287      18102.0     63.1      1.2  	for variavel in corners2:
    39       286      46993.0    164.3      3.0  		array=np.array([variavel])
    40       286      17880.0     62.5      1.1  		matriz2.append(array)
    41         1       6053.0   6053.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      73705.0  73705.0      4.7  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5315.0   5315.0      0.3  	matches = bf.match(des1,des2)

