Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.086 MiB   49.086 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.961 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.066 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.301 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.512 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.895 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.074 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.074 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.180 MiB    0.105 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.180 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.223 MiB    0.043 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.223 MiB    0.000 MiB   	matriz1=[]
    20   52.223 MiB    0.000 MiB   	for variavel in corners1:
    21   52.223 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.223 MiB    0.000 MiB   		matriz1.append(array)
    23   52.336 MiB    0.113 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.734 MiB    0.398 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.797 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.379 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.699 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.020 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.020 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.020 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.281 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.602 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.602 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.602 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.602 MiB    0.000 MiB   	matriz2=[]
    38   58.605 MiB    0.000 MiB   	for variavel in corners2:
    39   58.605 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.605 MiB    0.000 MiB   		matriz2.append(array)
    41   58.609 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.613 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.008 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.35291 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18526.0  18526.0      1.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        311.0    311.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4114.0   4114.0      0.3  	imagem1 = np.float32(img1)
    12         1      74484.0  74484.0      5.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13084.0  13084.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      13324.0  13324.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5701.0   5701.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11715.0  11715.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22131.0  22131.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3125.0     66.5      0.2  	for variavel in corners1:
    21        46       7493.0    162.9      0.6  		array=np.array([variavel])
    22        46       2917.0     63.4      0.2  		matriz1.append(array)
    23         1       1374.0   1374.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9310.0   9310.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        171.0    171.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76370.0  76370.0      5.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26710.0  26710.0      2.0  	imagem2 = np.float32(img2)
    30         1     577664.0 577664.0     42.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97441.0  97441.0      7.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85119.0  85119.0      6.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37303.0  37303.0      2.8  	dst2 = np.uint8(dst2)
    34         1      76451.0  76451.0      5.7  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1        203.0    203.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      90344.0  90344.0      6.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       129       8486.0     65.8      0.6  	for variavel in corners2:
    39       128      20972.0    163.8      1.6  		array=np.array([variavel])
    40       128       7841.0     61.3      0.6  		matriz2.append(array)
    41         1       2806.0   2806.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      54145.0  54145.0      4.0  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3076.0   3076.0      0.2  	matches = bf.match(des1,des2)

