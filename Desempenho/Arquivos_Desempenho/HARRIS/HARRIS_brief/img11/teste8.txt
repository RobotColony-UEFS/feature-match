Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.781 MiB   48.781 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.527 MiB    0.746 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.629 MiB    0.102 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.863 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.152 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.574 MiB    0.422 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.762 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.762 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.855 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.855 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.887 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.887 MiB    0.000 MiB   	matriz1=[]
    20   51.887 MiB    0.000 MiB   	for variavel in corners1:
    21   51.887 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.887 MiB    0.000 MiB   		matriz1.append(array)
    23   51.988 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.508 MiB    0.520 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.566 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.148 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.469 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.789 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.789 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.789 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.051 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.371 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.371 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.371 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.371 MiB    0.000 MiB   	matriz2=[]
    38   58.375 MiB    0.000 MiB   	for variavel in corners2:
    39   58.375 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.375 MiB    0.000 MiB   		matriz2.append(array)
    41   58.379 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.383 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.660 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.39476 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17070.0  17070.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        355.0    355.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3834.0   3834.0      0.3  	imagem1 = np.float32(img1)
    12         1      76130.0  76130.0      5.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13077.0  13077.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12740.0  12740.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4904.0   4904.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11575.0  11575.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20776.0  20776.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1        104.0    104.0      0.0  	matriz1=[]
    20        47       4027.0     85.7      0.3  	for variavel in corners1:
    21        46       9356.0    203.4      0.7  		array=np.array([variavel])
    22        46       3169.0     68.9      0.2  		matriz1.append(array)
    23         1       1374.0   1374.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8994.0   8994.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        285.0    285.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      73941.0  73941.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29289.0  29289.0      2.1  	imagem2 = np.float32(img2)
    30         1     623406.0 623406.0     44.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96222.0  96222.0      6.9  	dst2 = cv2.dilate(dst2,None)
    32         1      85456.0  85456.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37092.0  37092.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76060.0  76060.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      88035.0  88035.0      6.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       129       8294.0     64.3      0.6  	for variavel in corners2:
    39       128      21330.0    166.6      1.5  		array=np.array([variavel])
    40       128       8978.0     70.1      0.6  		matriz2.append(array)
    41         1       2847.0   2847.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      52699.0  52699.0      3.8  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3115.0   3115.0      0.2  	matches = bf.match(des1,des2)

