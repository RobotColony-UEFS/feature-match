Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.895 MiB   48.895 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.801 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.910 MiB    0.109 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.145 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.492 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.883 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.184 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.184 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.371 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.371 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.371 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.371 MiB    0.000 MiB   	matriz1=[]
    20   52.371 MiB    0.000 MiB   	for variavel in corners1:
    21   52.371 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.371 MiB    0.000 MiB   		matriz1.append(array)
    23   52.438 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.918 MiB    0.480 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.918 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.500 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.820 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.141 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.141 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.141 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.402 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.723 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.723 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.723 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.723 MiB    0.000 MiB   	matriz2=[]
    38   58.727 MiB    0.000 MiB   	for variavel in corners2:
    39   58.727 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.727 MiB    0.000 MiB   		matriz2.append(array)
    41   58.730 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.734 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.066 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.34558 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      19116.0  19116.0      1.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        308.0    308.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3955.0   3955.0      0.3  	imagem1 = np.float32(img1)
    12         1      73799.0  73799.0      5.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      15092.0  15092.0      1.1  	dst1 = cv2.dilate(dst1,None)
    14         1      12421.0  12421.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4985.0   4985.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11682.0  11682.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21744.0  21744.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         61.0     61.0      0.0  	matriz1=[]
    20        47       4115.0     87.6      0.3  	for variavel in corners1:
    21        46       7645.0    166.2      0.6  		array=np.array([variavel])
    22        46       2860.0     62.2      0.2  		matriz1.append(array)
    23         1       1376.0   1376.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8945.0   8945.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        179.0    179.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      74991.0  74991.0      5.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27634.0  27634.0      2.1  	imagem2 = np.float32(img2)
    30         1     575854.0 575854.0     42.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97435.0  97435.0      7.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85884.0  85884.0      6.4  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38191.0  38191.0      2.8  	dst2 = np.uint8(dst2)
    34         1      75880.0  75880.0      5.6  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      86627.0  86627.0      6.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       129       8781.0     68.1      0.7  	for variavel in corners2:
    39       128      21255.0    166.1      1.6  		array=np.array([variavel])
    40       128       8211.0     64.1      0.6  		matriz2.append(array)
    41         1       2826.0   2826.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      50216.0  50216.0      3.7  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3282.0   3282.0      0.2  	matches = bf.match(des1,des2)

