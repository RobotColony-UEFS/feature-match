Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.957 MiB   48.957 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.859 MiB    0.902 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.969 MiB    0.109 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.203 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.555 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.941 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.242 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.242 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.430 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.430 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.430 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.430 MiB    0.000 MiB   	matriz1=[]
    20   52.430 MiB    0.000 MiB   	for variavel in corners1:
    21   52.430 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.430 MiB    0.000 MiB   		matriz1.append(array)
    23   52.496 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.977 MiB    0.480 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.977 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.559 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.879 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.199 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.199 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.199 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.461 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.781 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.781 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.781 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.781 MiB    0.000 MiB   	matriz2=[]
    38   58.785 MiB    0.000 MiB   	for variavel in corners2:
    39   58.785 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.785 MiB    0.000 MiB   		matriz2.append(array)
    41   58.789 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.793 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.125 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.35367 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18856.0  18856.0      1.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        338.0    338.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3941.0   3941.0      0.3  	imagem1 = np.float32(img1)
    12         1      74202.0  74202.0      5.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14507.0  14507.0      1.1  	dst1 = cv2.dilate(dst1,None)
    14         1      13424.0  13424.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5202.0   5202.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11495.0  11495.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22029.0  22029.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3102.0     66.0      0.2  	for variavel in corners1:
    21        46       7529.0    163.7      0.6  		array=np.array([variavel])
    22        46       2891.0     62.8      0.2  		matriz1.append(array)
    23         1       1251.0   1251.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8692.0   8692.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        222.0    222.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76076.0  76076.0      5.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26595.0  26595.0      2.0  	imagem2 = np.float32(img2)
    30         1     582415.0 582415.0     43.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96793.0  96793.0      7.2  	dst2 = cv2.dilate(dst2,None)
    32         1      86042.0  86042.0      6.4  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37181.0  37181.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76542.0  76542.0      5.7  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      88206.0  88206.0      6.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       129       8699.0     67.4      0.6  	for variavel in corners2:
    39       128      21487.0    167.9      1.6  		array=np.array([variavel])
    40       128       8418.0     65.8      0.6  		matriz2.append(array)
    41         1       2815.0   2815.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      51214.0  51214.0      3.8  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3218.0   3218.0      0.2  	matches = bf.match(des1,des2)

