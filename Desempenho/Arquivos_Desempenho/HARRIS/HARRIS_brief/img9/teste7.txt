Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.758 MiB   48.758 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.562 MiB    0.805 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.613 MiB    0.051 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.848 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.137 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.609 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.797 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.797 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.887 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.887 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.914 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.914 MiB    0.000 MiB   	matriz1=[]
    20   51.914 MiB    0.000 MiB   	for variavel in corners1:
    21   51.914 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.914 MiB    0.000 MiB   		matriz1.append(array)
    23   52.012 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.656 MiB    0.645 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.715 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.297 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.617 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.938 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.938 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.938 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.199 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.520 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.520 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.520 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.520 MiB    0.000 MiB   	matriz2=[]
    38   58.523 MiB    0.000 MiB   	for variavel in corners2:
    39   58.523 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.523 MiB    0.000 MiB   		matriz2.append(array)
    41   58.531 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.539 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.832 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.39988 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17705.0  17705.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        330.0    330.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4052.0   4052.0      0.3  	imagem1 = np.float32(img1)
    12         1      75464.0  75464.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13211.0  13211.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12534.0  12534.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6162.0   6162.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11950.0  11950.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         83.0     83.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22510.0  22510.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3045.0     64.8      0.2  	for variavel in corners1:
    21        46       7712.0    167.7      0.6  		array=np.array([variavel])
    22        46       2837.0     61.7      0.2  		matriz1.append(array)
    23         1       1334.0   1334.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8588.0   8588.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        280.0    280.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81606.0  81606.0      5.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27316.0  27316.0      2.0  	imagem2 = np.float32(img2)
    30         1     578468.0 578468.0     41.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96795.0  96795.0      6.9  	dst2 = cv2.dilate(dst2,None)
    32         1      85685.0  85685.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37150.0  37150.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76576.0  76576.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     105410.0 105410.0      7.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         96.0     96.0      0.0  	matriz2=[]
    38       190      12486.0     65.7      0.9  	for variavel in corners2:
    39       189      32777.0    173.4      2.3  		array=np.array([variavel])
    40       189      13281.0     70.3      0.9  		matriz2.append(array)
    41         1       4005.0   4005.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      56418.0  56418.0      4.0  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3875.0   3875.0      0.3  	matches = bf.match(des1,des2)

