Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.164 MiB   49.164 MiB   @profile
     7                             def HARRIS_brief(img):
     8   50.082 MiB    0.918 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.188 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.422 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.637 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.023 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.207 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.207 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.367 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.367 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.418 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.418 MiB    0.000 MiB   	matriz1=[]
    20   52.418 MiB    0.000 MiB   	for variavel in corners1:
    21   52.418 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.418 MiB    0.000 MiB   		matriz1.append(array)
    23   52.539 MiB    0.121 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   53.012 MiB    0.473 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   53.012 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.594 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.914 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.234 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.234 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.234 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.496 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.816 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.816 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.816 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.816 MiB    0.000 MiB   	matriz2=[]
    38   58.820 MiB    0.000 MiB   	for variavel in corners2:
    39   58.820 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.820 MiB    0.000 MiB   		matriz2.append(array)
    41   58.828 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.836 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.191 MiB    0.355 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.39609 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      16993.0  16993.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        251.0    251.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4089.0   4089.0      0.3  	imagem1 = np.float32(img1)
    12         1      75487.0  75487.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13285.0  13285.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12458.0  12458.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5093.0   5093.0      0.4  	dst1 = np.uint8(dst1)
    16         1      13587.0  13587.0      1.0  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22049.0  22049.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3107.0     66.1      0.2  	for variavel in corners1:
    21        46       7514.0    163.3      0.5  		array=np.array([variavel])
    22        46       2875.0     62.5      0.2  		matriz1.append(array)
    23         1       1324.0   1324.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8874.0   8874.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81872.0  81872.0      5.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26878.0  26878.0      1.9  	imagem2 = np.float32(img2)
    30         1     576136.0 576136.0     41.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97384.0  97384.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      85201.0  85201.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37010.0  37010.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76602.0  76602.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     105828.0 105828.0      7.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       190      13312.0     70.1      1.0  	for variavel in corners2:
    39       189      32426.0    171.6      2.3  		array=np.array([variavel])
    40       189      11870.0     62.8      0.9  		matriz2.append(array)
    41         1       4011.0   4011.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      56566.0  56566.0      4.1  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3448.0   3448.0      0.2  	matches = bf.match(des1,des2)

