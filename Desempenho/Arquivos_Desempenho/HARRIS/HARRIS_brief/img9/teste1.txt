Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.703 MiB   48.703 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.508 MiB    0.805 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.559 MiB    0.051 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.793 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.082 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.555 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.742 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.742 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.832 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.832 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.859 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.859 MiB    0.000 MiB   	matriz1=[]
    20   51.859 MiB    0.000 MiB   	for variavel in corners1:
    21   51.859 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.859 MiB    0.000 MiB   		matriz1.append(array)
    23   51.957 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.602 MiB    0.645 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.660 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.242 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.562 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.883 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.883 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.883 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.145 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.465 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.465 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.465 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.465 MiB    0.000 MiB   	matriz2=[]
    38   58.469 MiB    0.000 MiB   	for variavel in corners2:
    39   58.469 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.469 MiB    0.000 MiB   		matriz2.append(array)
    41   58.477 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.484 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.777 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.4015 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18412.0  18412.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        347.0    347.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3968.0   3968.0      0.3  	imagem1 = np.float32(img1)
    12         1      74524.0  74524.0      5.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14549.0  14549.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12701.0  12701.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4946.0   4946.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11620.0  11620.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21873.0  21873.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         69.0     69.0      0.0  	matriz1=[]
    20        47       3550.0     75.5      0.3  	for variavel in corners1:
    21        46       7728.0    168.0      0.6  		array=np.array([variavel])
    22        46       2969.0     64.5      0.2  		matriz1.append(array)
    23         1       1266.0   1266.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9646.0   9646.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        175.0    175.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81914.0  81914.0      5.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27800.0  27800.0      2.0  	imagem2 = np.float32(img2)
    30         1     576185.0 576185.0     41.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97322.0  97322.0      6.9  	dst2 = cv2.dilate(dst2,None)
    32         1      84984.0  84984.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37833.0  37833.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76417.0  76417.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     104895.0 104895.0      7.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1        139.0    139.0      0.0  	matriz2=[]
    38       190      13954.0     73.4      1.0  	for variavel in corners2:
    39       189      32517.0    172.0      2.3  		array=np.array([variavel])
    40       189      12153.0     64.3      0.9  		matriz2.append(array)
    41         1       3892.0   3892.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      59217.0  59217.0      4.2  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3767.0   3767.0      0.3  	matches = bf.match(des1,des2)

