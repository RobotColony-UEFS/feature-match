Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.762 MiB   48.762 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.508 MiB    0.746 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.609 MiB    0.102 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.844 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.133 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.555 MiB    0.422 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.742 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.742 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.836 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.836 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.867 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.867 MiB    0.000 MiB   	matriz1=[]
    20   51.867 MiB    0.000 MiB   	for variavel in corners1:
    21   51.867 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.867 MiB    0.000 MiB   		matriz1.append(array)
    23   51.969 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.488 MiB    0.520 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.547 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.129 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.449 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.770 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.770 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.770 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.031 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.352 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.352 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.352 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.352 MiB    0.000 MiB   	matriz2=[]
    38   58.355 MiB    0.000 MiB   	for variavel in corners2:
    39   58.355 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.355 MiB    0.000 MiB   		matriz2.append(array)
    41   58.363 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.371 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.648 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.40291 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18208.0  18208.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        537.0    537.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4804.0   4804.0      0.3  	imagem1 = np.float32(img1)
    12         1      74227.0  74227.0      5.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13200.0  13200.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      14397.0  14397.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5151.0   5151.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11551.0  11551.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         95.0     95.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21956.0  21956.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3185.0     67.8      0.2  	for variavel in corners1:
    21        46       7664.0    166.6      0.5  		array=np.array([variavel])
    22        46       2989.0     65.0      0.2  		matriz1.append(array)
    23         1       1408.0   1408.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8812.0   8812.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        177.0    177.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81899.0  81899.0      5.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27208.0  27208.0      1.9  	imagem2 = np.float32(img2)
    30         1     577466.0 577466.0     41.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97698.0  97698.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      84707.0  84707.0      6.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37798.0  37798.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76786.0  76786.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     104595.0 104595.0      7.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       190      12833.0     67.5      0.9  	for variavel in corners2:
    39       189      34715.0    183.7      2.5  		array=np.array([variavel])
    40       189      12235.0     64.7      0.9  		matriz2.append(array)
    41         1       3902.0   3902.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      58853.0  58853.0      4.2  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3649.0   3649.0      0.3  	matches = bf.match(des1,des2)

