Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.953 MiB   48.953 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.859 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.969 MiB    0.109 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.203 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.551 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.941 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.242 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.242 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.430 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.430 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.430 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.430 MiB    0.000 MiB   	matriz1=[]
    20   52.430 MiB    0.000 MiB   	for variavel in corners1:
    21   52.430 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.430 MiB    0.000 MiB   		matriz1.append(array)
    23   52.496 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.977 MiB    0.480 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.977 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.559 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.879 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.199 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.199 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.199 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.461 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.781 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.781 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.781 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.781 MiB    0.000 MiB   	matriz2=[]
    38   58.785 MiB    0.000 MiB   	for variavel in corners2:
    39   58.785 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.785 MiB    0.000 MiB   		matriz2.append(array)
    41   58.793 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.801 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.133 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.39687 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17393.0  17393.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        348.0    348.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3968.0   3968.0      0.3  	imagem1 = np.float32(img1)
    12         1      75463.0  75463.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13116.0  13116.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12607.0  12607.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5064.0   5064.0      0.4  	dst1 = np.uint8(dst1)
    16         1      12189.0  12189.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22102.0  22102.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1        117.0    117.0      0.0  	matriz1=[]
    20        47       3419.0     72.7      0.2  	for variavel in corners1:
    21        46       7470.0    162.4      0.5  		array=np.array([variavel])
    22        46       2880.0     62.6      0.2  		matriz1.append(array)
    23         1       1237.0   1237.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9681.0   9681.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        175.0    175.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81275.0  81275.0      5.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27625.0  27625.0      2.0  	imagem2 = np.float32(img2)
    30         1     576734.0 576734.0     41.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97185.0  97185.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      85782.0  85782.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38105.0  38105.0      2.7  	dst2 = np.uint8(dst2)
    34         1      75732.0  75732.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     103691.0 103691.0      7.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       190      12211.0     64.3      0.9  	for variavel in corners2:
    39       189      32677.0    172.9      2.3  		array=np.array([variavel])
    40       189      12548.0     66.4      0.9  		matriz2.append(array)
    41         1       4171.0   4171.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      57854.0  57854.0      4.1  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3825.0   3825.0      0.3  	matches = bf.match(des1,des2)

