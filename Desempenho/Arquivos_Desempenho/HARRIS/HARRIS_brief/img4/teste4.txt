Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.922 MiB   48.922 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.809 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.926 MiB    0.117 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.160 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.508 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.898 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.137 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.137 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.262 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.262 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.262 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.262 MiB    0.000 MiB   	matriz1=[]
    20   52.262 MiB    0.000 MiB   	for variavel in corners1:
    21   52.262 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.262 MiB    0.000 MiB   		matriz1.append(array)
    23   52.328 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.812 MiB    0.484 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.812 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.395 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.715 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.035 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.035 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.035 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.297 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.617 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.617 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.617 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.617 MiB    0.000 MiB   	matriz2=[]
    38   58.625 MiB    0.000 MiB   	for variavel in corners2:
    39   58.625 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.625 MiB    0.000 MiB   		matriz2.append(array)
    41   58.637 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.645 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.977 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.57138 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17241.0  17241.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        326.0    326.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3987.0   3987.0      0.3  	imagem1 = np.float32(img1)
    12         1      76075.0  76075.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      17962.0  17962.0      1.1  	dst1 = cv2.dilate(dst1,None)
    14         1      12524.0  12524.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5013.0   5013.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11504.0  11504.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21413.0  21413.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3431.0     73.0      0.2  	for variavel in corners1:
    21        46       8747.0    190.2      0.6  		array=np.array([variavel])
    22        46       2982.0     64.8      0.2  		matriz1.append(array)
    23         1       1338.0   1338.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8697.0   8697.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        279.0    279.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78118.0  78118.0      5.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29151.0  29151.0      1.9  	imagem2 = np.float32(img2)
    30         1     626537.0 626537.0     39.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97705.0  97705.0      6.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85395.0  85395.0      5.4  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37220.0  37220.0      2.4  	dst2 = np.uint8(dst2)
    34         1      77060.0  77060.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     184721.0 184721.0     11.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       273      18147.0     66.5      1.2  	for variavel in corners2:
    39       272      45706.0    168.0      2.9  		array=np.array([variavel])
    40       272      17923.0     65.9      1.1  		matriz2.append(array)
    41         1       5828.0   5828.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      70849.0  70849.0      4.5  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5215.0   5215.0      0.3  	matches = bf.match(des1,des2)

