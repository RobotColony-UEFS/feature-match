Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.758 MiB   48.758 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.566 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.617 MiB    0.051 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.852 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.137 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.613 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.801 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.801 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.891 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.891 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.918 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.918 MiB    0.000 MiB   	matriz1=[]
    20   51.918 MiB    0.000 MiB   	for variavel in corners1:
    21   51.918 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.918 MiB    0.000 MiB   		matriz1.append(array)
    23   52.016 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.660 MiB    0.645 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.719 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.301 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.621 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.941 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.941 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.941 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.203 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.523 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.523 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.523 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.523 MiB    0.000 MiB   	matriz2=[]
    38   58.531 MiB    0.000 MiB   	for variavel in corners2:
    39   58.531 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.531 MiB    0.000 MiB   		matriz2.append(array)
    41   58.543 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.551 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.844 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.51431 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18212.0  18212.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        250.0    250.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3836.0   3836.0      0.3  	imagem1 = np.float32(img1)
    12         1      75073.0  75073.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14042.0  14042.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12495.0  12495.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5613.0   5613.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11457.0  11457.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21686.0  21686.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3173.0     67.5      0.2  	for variavel in corners1:
    21        46       7670.0    166.7      0.5  		array=np.array([variavel])
    22        46       2891.0     62.8      0.2  		matriz1.append(array)
    23         1       1344.0   1344.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9235.0   9235.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        280.0    280.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79091.0  79091.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27749.0  27749.0      1.8  	imagem2 = np.float32(img2)
    30         1     574926.0 574926.0     38.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98062.0  98062.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84188.0  84188.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39162.0  39162.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76368.0  76368.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     183449.0 183449.0     12.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       273      18605.0     68.2      1.2  	for variavel in corners2:
    39       272      47153.0    173.4      3.1  		array=np.array([variavel])
    40       272      17886.0     65.8      1.2  		matriz2.append(array)
    41         1       5903.0   5903.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      69168.0  69168.0      4.6  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5051.0   5051.0      0.3  	matches = bf.match(des1,des2)

