Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.754 MiB   48.754 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.562 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.613 MiB    0.051 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.848 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.133 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.609 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.797 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.797 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.887 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.887 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.914 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.914 MiB    0.000 MiB   	matriz1=[]
    20   51.914 MiB    0.000 MiB   	for variavel in corners1:
    21   51.914 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.914 MiB    0.000 MiB   		matriz1.append(array)
    23   52.012 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.656 MiB    0.645 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.715 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.297 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.617 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.938 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.938 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.938 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.199 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.520 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.520 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.520 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.520 MiB    0.000 MiB   	matriz2=[]
    38   58.527 MiB    0.000 MiB   	for variavel in corners2:
    39   58.527 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.527 MiB    0.000 MiB   		matriz2.append(array)
    41   58.539 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.547 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.840 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.57192 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18795.0  18795.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        240.0    240.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3957.0   3957.0      0.3  	imagem1 = np.float32(img1)
    12         1      74709.0  74709.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14814.0  14814.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12589.0  12589.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5197.0   5197.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11542.0  11542.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21583.0  21583.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3256.0     69.3      0.2  	for variavel in corners1:
    21        46       7377.0    160.4      0.5  		array=np.array([variavel])
    22        46       2934.0     63.8      0.2  		matriz1.append(array)
    23         1       2395.0   2395.0      0.2  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9006.0   9006.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        286.0    286.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79323.0  79323.0      5.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28142.0  28142.0      1.8  	imagem2 = np.float32(img2)
    30         1     626638.0 626638.0     39.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96689.0  96689.0      6.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85365.0  85365.0      5.4  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37303.0  37303.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76772.0  76772.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     188885.0 188885.0     12.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       273      18662.0     68.4      1.2  	for variavel in corners2:
    39       272      46361.0    170.4      2.9  		array=np.array([variavel])
    40       272      17488.0     64.3      1.1  		matriz2.append(array)
    41         1       5362.0   5362.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      69387.0  69387.0      4.4  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       6572.0   6572.0      0.4  	matches = bf.match(des1,des2)

