Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.996 MiB   48.996 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.898 MiB    0.902 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.008 MiB    0.109 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.242 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.594 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.980 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.281 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.281 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.469 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.469 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.469 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.469 MiB    0.000 MiB   	matriz1=[]
    20   52.469 MiB    0.000 MiB   	for variavel in corners1:
    21   52.469 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.469 MiB    0.000 MiB   		matriz1.append(array)
    23   52.535 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   53.016 MiB    0.480 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   53.016 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.598 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.918 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.238 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.238 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.238 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.500 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.820 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.820 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.820 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.820 MiB    0.000 MiB   	matriz2=[]
    38   58.824 MiB    0.000 MiB   	for variavel in corners2:
    39   58.824 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.824 MiB    0.000 MiB   		matriz2.append(array)
    41   58.832 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.840 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.172 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.3776 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      16994.0  16994.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        317.0    317.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4088.0   4088.0      0.3  	imagem1 = np.float32(img1)
    12         1      76034.0  76034.0      5.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13234.0  13234.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12461.0  12461.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5059.0   5059.0      0.4  	dst1 = np.uint8(dst1)
    16         1      12730.0  12730.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21961.0  21961.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3177.0     67.6      0.2  	for variavel in corners1:
    21        46       7461.0    162.2      0.5  		array=np.array([variavel])
    22        46       2982.0     64.8      0.2  		matriz1.append(array)
    23         1       1342.0   1342.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9715.0   9715.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        181.0    181.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76799.0  76799.0      5.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27899.0  27899.0      2.0  	imagem2 = np.float32(img2)
    30         1     578706.0 578706.0     42.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96914.0  96914.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      85690.0  85690.0      6.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37074.0  37074.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76777.0  76777.0      5.6  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      87635.0  87635.0      6.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       189      13693.0     72.4      1.0  	for variavel in corners2:
    39       188      31385.0    166.9      2.3  		array=np.array([variavel])
    40       188      12973.0     69.0      0.9  		matriz2.append(array)
    41         1       5065.0   5065.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      55343.0  55343.0      4.0  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3623.0   3623.0      0.3  	matches = bf.match(des1,des2)

