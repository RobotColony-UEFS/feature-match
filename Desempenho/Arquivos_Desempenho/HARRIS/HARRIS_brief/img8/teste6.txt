Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.598 MiB   48.598 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.480 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.602 MiB    0.121 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.895 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.184 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.598 MiB    0.414 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.840 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.840 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.965 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.965 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.977 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.977 MiB    0.000 MiB   	matriz1=[]
    20   51.977 MiB    0.000 MiB   	for variavel in corners1:
    21   51.977 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.977 MiB    0.000 MiB   		matriz1.append(array)
    23   52.043 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.531 MiB    0.488 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.531 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.113 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.434 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.754 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.754 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.809 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.070 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.391 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.391 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.391 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.391 MiB    0.000 MiB   	matriz2=[]
    38   58.398 MiB    0.000 MiB   	for variavel in corners2:
    39   58.398 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.398 MiB    0.000 MiB   		matriz2.append(array)
    41   58.410 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.422 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.758 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.56974 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17982.0  17982.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        349.0    349.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3911.0   3911.0      0.2  	imagem1 = np.float32(img1)
    12         1      76435.0  76435.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13140.0  13140.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12560.0  12560.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5978.0   5978.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11602.0  11602.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20942.0  20942.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         53.0     53.0      0.0  	matriz1=[]
    20        47       3109.0     66.1      0.2  	for variavel in corners1:
    21        46       7364.0    160.1      0.5  		array=np.array([variavel])
    22        46       2871.0     62.4      0.2  		matriz1.append(array)
    23         1       1472.0   1472.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9725.0   9725.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        172.0    172.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80045.0  80045.0      5.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29149.0  29149.0      1.9  	imagem2 = np.float32(img2)
    30         1     626416.0 626416.0     39.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96428.0  96428.0      6.1  	dst2 = cv2.dilate(dst2,None)
    32         1      86050.0  86050.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38042.0  38042.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76225.0  76225.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     180955.0 180955.0     11.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       285      17902.0     62.8      1.1  	for variavel in corners2:
    39       284      46930.0    165.2      3.0  		array=np.array([variavel])
    40       284      19136.0     67.4      1.2  		matriz2.append(array)
    41         1       5784.0   5784.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      73529.0  73529.0      4.7  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5263.0   5263.0      0.3  	matches = bf.match(des1,des2)

