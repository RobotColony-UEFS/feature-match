Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.141 MiB   49.141 MiB   @profile
     7                             def HARRIS_brief(img):
     8   50.059 MiB    0.918 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.164 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.398 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.613 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.000 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.184 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.184 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.344 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.344 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.395 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.395 MiB    0.000 MiB   	matriz1=[]
    20   52.395 MiB    0.000 MiB   	for variavel in corners1:
    21   52.395 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.395 MiB    0.000 MiB   		matriz1.append(array)
    23   52.516 MiB    0.121 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.988 MiB    0.473 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.988 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.570 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.891 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.211 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.211 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.211 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.473 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.793 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.793 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.793 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.793 MiB    0.000 MiB   	matriz2=[]
    38   58.801 MiB    0.000 MiB   	for variavel in corners2:
    39   58.801 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.801 MiB    0.000 MiB   		matriz2.append(array)
    41   58.812 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.824 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.180 MiB    0.355 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.52413 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17296.0  17296.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        242.0    242.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3998.0   3998.0      0.3  	imagem1 = np.float32(img1)
    12         1      75615.0  75615.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13183.0  13183.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12717.0  12717.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4913.0   4913.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11886.0  11886.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21832.0  21832.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3240.0     68.9      0.2  	for variavel in corners1:
    21        46       9190.0    199.8      0.6  		array=np.array([variavel])
    22        46       2852.0     62.0      0.2  		matriz1.append(array)
    23         1       1397.0   1397.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9841.0   9841.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        284.0    284.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80152.0  80152.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27651.0  27651.0      1.8  	imagem2 = np.float32(img2)
    30         1     576281.0 576281.0     37.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97268.0  97268.0      6.4  	dst2 = cv2.dilate(dst2,None)
    32         1      83219.0  83219.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39750.0  39750.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76883.0  76883.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         76.0     76.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     183182.0 183182.0     12.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         63.0     63.0      0.0  	matriz2=[]
    38       285      20365.0     71.5      1.3  	for variavel in corners2:
    39       284      50022.0    176.1      3.3  		array=np.array([variavel])
    40       284      18134.0     63.9      1.2  		matriz2.append(array)
    41         1       5657.0   5657.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      71302.0  71302.0      4.7  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5501.0   5501.0      0.4  	matches = bf.match(des1,des2)

