Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.586 MiB   48.586 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.461 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.520 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.754 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.043 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.504 MiB    0.461 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.691 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.691 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.832 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.832 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.848 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.848 MiB    0.000 MiB   	matriz1=[]
    20   51.848 MiB    0.000 MiB   	for variavel in corners1:
    21   51.848 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.848 MiB    0.000 MiB   		matriz1.append(array)
    23   51.938 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.512 MiB    0.574 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.512 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.094 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.414 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.734 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.734 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.785 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.047 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.367 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.367 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.367 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.367 MiB    0.000 MiB   	matriz2=[]
    38   58.371 MiB    0.000 MiB   	for variavel in corners2:
    39   58.371 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.371 MiB    0.000 MiB   		matriz2.append(array)
    41   58.379 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.383 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.621 MiB    0.238 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.38554 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18044.0  18044.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        252.0    252.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4878.0   4878.0      0.4  	imagem1 = np.float32(img1)
    12         1      75128.0  75128.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13206.0  13206.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      13217.0  13217.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5117.0   5117.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11565.0  11565.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22132.0  22132.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3084.0     65.6      0.2  	for variavel in corners1:
    21        46       7263.0    157.9      0.5  		array=np.array([variavel])
    22        46       2889.0     62.8      0.2  		matriz1.append(array)
    23         1       1236.0   1236.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9022.0   9022.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        166.0    166.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79314.0  79314.0      5.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26708.0  26708.0      1.9  	imagem2 = np.float32(img2)
    30         1     581986.0 581986.0     42.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96982.0  96982.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      84942.0  84942.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38316.0  38316.0      2.8  	dst2 = np.uint8(dst2)
    34         1      76794.0  76794.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     101458.0 101458.0      7.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       165      10577.0     64.1      0.8  	for variavel in corners2:
    39       164      26126.0    159.3      1.9  		array=np.array([variavel])
    40       164      10779.0     65.7      0.8  		matriz2.append(array)
    41         1       3844.0   3844.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      56966.0  56966.0      4.1  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3278.0   3278.0      0.2  	matches = bf.match(des1,des2)

