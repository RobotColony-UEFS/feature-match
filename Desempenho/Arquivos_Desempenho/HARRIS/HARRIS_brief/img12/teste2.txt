Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.594 MiB   48.594 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.465 MiB    0.871 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.523 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.758 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.051 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.508 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.695 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.695 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.836 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.836 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.852 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.852 MiB    0.000 MiB   	matriz1=[]
    20   51.852 MiB    0.000 MiB   	for variavel in corners1:
    21   51.852 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.852 MiB    0.000 MiB   		matriz1.append(array)
    23   51.941 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.516 MiB    0.574 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.516 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.098 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.418 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.738 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.738 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.789 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.051 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.371 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.371 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.371 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.371 MiB    0.000 MiB   	matriz2=[]
    38   58.375 MiB    0.000 MiB   	for variavel in corners2:
    39   58.375 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.375 MiB    0.000 MiB   		matriz2.append(array)
    41   58.383 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.387 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.605 MiB    0.219 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.43323 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17142.0  17142.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        338.0    338.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3810.0   3810.0      0.3  	imagem1 = np.float32(img1)
    12         1      76814.0  76814.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13072.0  13072.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12476.0  12476.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5209.0   5209.0      0.4  	dst1 = np.uint8(dst1)
    16         1      12193.0  12193.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22780.0  22780.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3007.0     64.0      0.2  	for variavel in corners1:
    21        46       7513.0    163.3      0.5  		array=np.array([variavel])
    22        46       2770.0     60.2      0.2  		matriz1.append(array)
    23         1       1340.0   1340.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8615.0   8615.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        170.0    170.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79326.0  79326.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27620.0  27620.0      1.9  	imagem2 = np.float32(img2)
    30         1     627672.0 627672.0     43.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97124.0  97124.0      6.8  	dst2 = cv2.dilate(dst2,None)
    32         1      85755.0  85755.0      6.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38291.0  38291.0      2.7  	dst2 = np.uint8(dst2)
    34         1      75744.0  75744.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      99652.0  99652.0      7.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       165      11202.0     67.9      0.8  	for variavel in corners2:
    39       164      28096.0    171.3      2.0  		array=np.array([variavel])
    40       164      10235.0     62.4      0.7  		matriz2.append(array)
    41         1       3603.0   3603.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      56869.0  56869.0      4.0  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       4516.0   4516.0      0.3  	matches = bf.match(des1,des2)

