Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.059 MiB   49.059 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.984 MiB    0.926 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.090 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.324 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.543 MiB    1.219 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.926 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.102 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.102 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.211 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.211 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.258 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.258 MiB    0.000 MiB   	matriz1=[]
    20   52.258 MiB    0.000 MiB   	for variavel in corners1:
    21   52.258 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.258 MiB    0.000 MiB   		matriz1.append(array)
    23   52.375 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.773 MiB    0.398 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.836 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.418 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.738 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.059 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.059 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.059 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.320 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.641 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.641 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.641 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.641 MiB    0.000 MiB   	matriz2=[]
    38   58.645 MiB    0.000 MiB   	for variavel in corners2:
    39   58.645 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.645 MiB    0.000 MiB   		matriz2.append(array)
    41   58.652 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.656 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.051 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.3825 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17069.0  17069.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        344.0    344.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3987.0   3987.0      0.3  	imagem1 = np.float32(img1)
    12         1      75887.0  75887.0      5.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12260.0  12260.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13220.0  13220.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5114.0   5114.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11750.0  11750.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22398.0  22398.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3056.0     65.0      0.2  	for variavel in corners1:
    21        46       8092.0    175.9      0.6  		array=np.array([variavel])
    22        46       2966.0     64.5      0.2  		matriz1.append(array)
    23         1       1268.0   1268.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      10346.0  10346.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        169.0    169.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77814.0  77814.0      5.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27983.0  27983.0      2.0  	imagem2 = np.float32(img2)
    30         1     577280.0 577280.0     41.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97940.0  97940.0      7.1  	dst2 = cv2.dilate(dst2,None)
    32         1      83172.0  83172.0      6.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      40078.0  40078.0      2.9  	dst2 = np.uint8(dst2)
    34         1      75972.0  75972.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      98711.0  98711.0      7.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       165      10898.0     66.0      0.8  	for variavel in corners2:
    39       164      29248.0    178.3      2.1  		array=np.array([variavel])
    40       164      10623.0     64.8      0.8  		matriz2.append(array)
    41         1       3599.0   3599.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      57351.0  57351.0      4.1  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3617.0   3617.0      0.3  	matches = bf.match(des1,des2)

