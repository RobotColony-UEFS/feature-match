Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.684 MiB   48.684 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.652 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.758 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.992 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.258 MiB    1.266 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.641 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.941 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.941 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.125 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.125 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.188 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.188 MiB    0.000 MiB   	matriz1=[]
    20   52.188 MiB    0.000 MiB   	for variavel in corners1:
    21   52.188 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.188 MiB    0.000 MiB   		matriz1.append(array)
    23   52.312 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.852 MiB    0.539 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.852 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.434 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.754 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.074 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.074 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.074 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.336 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.656 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.656 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.656 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.656 MiB    0.000 MiB   	matriz2=[]
    38   58.660 MiB    0.000 MiB   	for variavel in corners2:
    39   58.660 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.660 MiB    0.000 MiB   		matriz2.append(array)
    41   58.664 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.672 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.000 MiB    0.328 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.3416 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      16929.0  16929.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        319.0    319.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3833.0   3833.0      0.3  	imagem1 = np.float32(img1)
    12         1      75658.0  75658.0      5.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13344.0  13344.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12543.0  12543.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5194.0   5194.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11448.0  11448.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23061.0  23061.0      1.7  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3129.0     66.6      0.2  	for variavel in corners1:
    21        46       7724.0    167.9      0.6  		array=np.array([variavel])
    22        46       2971.0     64.6      0.2  		matriz1.append(array)
    23         1       1234.0   1234.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9051.0   9051.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        287.0    287.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79673.0  79673.0      5.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26771.0  26771.0      2.0  	imagem2 = np.float32(img2)
    30         1     576462.0 576462.0     43.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95347.0  95347.0      7.1  	dst2 = cv2.dilate(dst2,None)
    32         1      83447.0  83447.0      6.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39779.0  39779.0      3.0  	dst2 = np.uint8(dst2)
    34         1      75750.0  75750.0      5.6  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      74521.0  74521.0      5.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       145       9570.0     66.0      0.7  	for variavel in corners2:
    39       144      23660.0    164.3      1.8  		array=np.array([variavel])
    40       144       9132.0     63.4      0.7  		matriz2.append(array)
    41         1       2904.0   2904.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      54535.0  54535.0      4.1  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3033.0   3033.0      0.2  	matches = bf.match(des1,des2)

