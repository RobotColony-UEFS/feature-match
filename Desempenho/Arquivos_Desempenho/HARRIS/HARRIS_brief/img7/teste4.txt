Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.133 MiB   49.133 MiB   @profile
     7                             def HARRIS_brief(img):
     8   50.055 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.160 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.395 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.605 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.996 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.180 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.180 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.340 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.340 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.391 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.391 MiB    0.000 MiB   	matriz1=[]
    20   52.391 MiB    0.000 MiB   	for variavel in corners1:
    21   52.391 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.391 MiB    0.000 MiB   		matriz1.append(array)
    23   52.512 MiB    0.121 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.984 MiB    0.473 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.984 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.566 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.887 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.207 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.207 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.207 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.469 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.789 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.789 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.789 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.789 MiB    0.000 MiB   	matriz2=[]
    38   58.793 MiB    0.000 MiB   	for variavel in corners2:
    39   58.793 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.793 MiB    0.000 MiB   		matriz2.append(array)
    41   58.797 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.805 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.160 MiB    0.355 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.34915 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18238.0  18238.0      1.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        311.0    311.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4671.0   4671.0      0.3  	imagem1 = np.float32(img1)
    12         1      74212.0  74212.0      5.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12899.0  12899.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      13997.0  13997.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5087.0   5087.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11894.0  11894.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22545.0  22545.0      1.7  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3087.0     65.7      0.2  	for variavel in corners1:
    21        46       7331.0    159.4      0.5  		array=np.array([variavel])
    22        46       2983.0     64.8      0.2  		matriz1.append(array)
    23         1       1268.0   1268.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8833.0   8833.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        171.0    171.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80653.0  80653.0      6.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27336.0  27336.0      2.0  	imagem2 = np.float32(img2)
    30         1     575741.0 575741.0     42.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1     101190.0 101190.0      7.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85523.0  85523.0      6.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36991.0  36991.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76380.0  76380.0      5.7  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      74507.0  74507.0      5.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       145       9401.0     64.8      0.7  	for variavel in corners2:
    39       144      23389.0    162.4      1.7  		array=np.array([variavel])
    40       144       9075.0     63.0      0.7  		matriz2.append(array)
    41         1       2752.0   2752.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      54937.0  54937.0      4.1  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3468.0   3468.0      0.3  	matches = bf.match(des1,des2)

