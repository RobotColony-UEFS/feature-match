Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.887 MiB   48.887 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.812 MiB    0.926 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.918 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.152 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.434 MiB    1.281 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.816 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.992 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.992 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.102 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.102 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.148 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.148 MiB    0.000 MiB   	matriz1=[]
    20   52.148 MiB    0.000 MiB   	for variavel in corners1:
    21   52.148 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.148 MiB    0.000 MiB   		matriz1.append(array)
    23   52.266 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.664 MiB    0.398 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.727 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.309 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.629 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.949 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.949 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.949 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.211 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.531 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.531 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.531 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.531 MiB    0.000 MiB   	matriz2=[]
    38   58.535 MiB    0.000 MiB   	for variavel in corners2:
    39   58.535 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.535 MiB    0.000 MiB   		matriz2.append(array)
    41   58.539 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.547 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.941 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.34342 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17253.0  17253.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        317.0    317.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3933.0   3933.0      0.3  	imagem1 = np.float32(img1)
    12         1      74661.0  74661.0      5.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12597.0  12597.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12705.0  12705.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5201.0   5201.0      0.4  	dst1 = np.uint8(dst1)
    16         1      14281.0  14281.0      1.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21161.0  21161.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3253.0     69.2      0.2  	for variavel in corners1:
    21        46       7473.0    162.5      0.6  		array=np.array([variavel])
    22        46       3012.0     65.5      0.2  		matriz1.append(array)
    23         1       1470.0   1470.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8971.0   8971.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        176.0    176.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79562.0  79562.0      5.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26589.0  26589.0      2.0  	imagem2 = np.float32(img2)
    30         1     576956.0 576956.0     42.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97306.0  97306.0      7.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84645.0  84645.0      6.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37182.0  37182.0      2.8  	dst2 = np.uint8(dst2)
    34         1      76955.0  76955.0      5.7  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      73591.0  73591.0      5.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       145       9555.0     65.9      0.7  	for variavel in corners2:
    39       144      23817.0    165.4      1.8  		array=np.array([variavel])
    40       144       9203.0     63.9      0.7  		matriz2.append(array)
    41         1       3101.0   3101.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      54910.0  54910.0      4.1  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3300.0   3300.0      0.2  	matches = bf.match(des1,des2)

