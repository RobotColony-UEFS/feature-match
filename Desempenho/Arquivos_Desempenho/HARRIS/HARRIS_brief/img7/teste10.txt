Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.617 MiB   48.617 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.492 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.551 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.785 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.074 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.535 MiB    0.461 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.723 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.723 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.863 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.863 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.879 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.879 MiB    0.000 MiB   	matriz1=[]
    20   51.879 MiB    0.000 MiB   	for variavel in corners1:
    21   51.879 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.879 MiB    0.000 MiB   		matriz1.append(array)
    23   51.969 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.543 MiB    0.574 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.543 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.125 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.445 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.766 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.766 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.816 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.078 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.398 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.398 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.398 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.398 MiB    0.000 MiB   	matriz2=[]
    38   58.402 MiB    0.000 MiB   	for variavel in corners2:
    39   58.402 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.402 MiB    0.000 MiB   		matriz2.append(array)
    41   58.406 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.414 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.633 MiB    0.219 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.39038 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18747.0  18747.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        333.0    333.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4096.0   4096.0      0.3  	imagem1 = np.float32(img1)
    12         1      75280.0  75280.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14056.0  14056.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12472.0  12472.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5043.0   5043.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11589.0  11589.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20812.0  20812.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3089.0     65.7      0.2  	for variavel in corners1:
    21        46       7439.0    161.7      0.5  		array=np.array([variavel])
    22        46       2991.0     65.0      0.2  		matriz1.append(array)
    23         1       2876.0   2876.0      0.2  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8742.0   8742.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        598.0    598.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79820.0  79820.0      5.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29115.0  29115.0      2.1  	imagem2 = np.float32(img2)
    30         1     621919.0 621919.0     44.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97048.0  97048.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      83978.0  83978.0      6.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38236.0  38236.0      2.8  	dst2 = np.uint8(dst2)
    34         1      76152.0  76152.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      72067.0  72067.0      5.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       145       9584.0     66.1      0.7  	for variavel in corners2:
    39       144      24275.0    168.6      1.7  		array=np.array([variavel])
    40       144       9597.0     66.6      0.7  		matriz2.append(array)
    41         1       3184.0   3184.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      53788.0  53788.0      3.9  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3171.0   3171.0      0.2  	matches = bf.match(des1,des2)

