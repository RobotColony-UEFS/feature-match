Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.680 MiB   48.680 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.645 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.750 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.984 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.254 MiB    1.270 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.633 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.934 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.934 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.117 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.117 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.180 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.180 MiB    0.000 MiB   	matriz1=[]
    20   52.180 MiB    0.000 MiB   	for variavel in corners1:
    21   52.180 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.180 MiB    0.000 MiB   		matriz1.append(array)
    23   52.305 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.844 MiB    0.539 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.844 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.426 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.746 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.066 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.066 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.066 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.328 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.648 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.648 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.648 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.648 MiB    0.000 MiB   	matriz2=[]
    38   58.652 MiB    0.000 MiB   	for variavel in corners2:
    39   58.652 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.652 MiB    0.000 MiB   		matriz2.append(array)
    41   58.656 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.664 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.992 MiB    0.328 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.39785 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17974.0  17974.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        322.0    322.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3941.0   3941.0      0.3  	imagem1 = np.float32(img1)
    12         1      74802.0  74802.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14452.0  14452.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      14106.0  14106.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4983.0   4983.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11585.0  11585.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21793.0  21793.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3131.0     66.6      0.2  	for variavel in corners1:
    21        46       7534.0    163.8      0.5  		array=np.array([variavel])
    22        46       3044.0     66.2      0.2  		matriz1.append(array)
    23         1       1232.0   1232.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8994.0   8994.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        284.0    284.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81083.0  81083.0      5.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26781.0  26781.0      1.9  	imagem2 = np.float32(img2)
    30         1     627763.0 627763.0     44.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96242.0  96242.0      6.9  	dst2 = cv2.dilate(dst2,None)
    32         1      84708.0  84708.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39172.0  39172.0      2.8  	dst2 = np.uint8(dst2)
    34         1      75576.0  75576.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      73860.0  73860.0      5.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       145      10520.0     72.6      0.8  	for variavel in corners2:
    39       144      24452.0    169.8      1.7  		array=np.array([variavel])
    40       144       9356.0     65.0      0.7  		matriz2.append(array)
    41         1       2894.0   2894.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      53961.0  53961.0      3.9  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3015.0   3015.0      0.2  	matches = bf.match(des1,des2)

