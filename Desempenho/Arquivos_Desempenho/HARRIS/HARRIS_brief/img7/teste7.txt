Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.742 MiB   48.742 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.707 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.812 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.047 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.316 MiB    1.270 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.695 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.996 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.996 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.180 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.180 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.242 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.242 MiB    0.000 MiB   	matriz1=[]
    20   52.242 MiB    0.000 MiB   	for variavel in corners1:
    21   52.242 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.242 MiB    0.000 MiB   		matriz1.append(array)
    23   52.367 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.906 MiB    0.539 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.906 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.488 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.809 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.129 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.129 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.129 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.391 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.711 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.711 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.711 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.711 MiB    0.000 MiB   	matriz2=[]
    38   58.715 MiB    0.000 MiB   	for variavel in corners2:
    39   58.715 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.715 MiB    0.000 MiB   		matriz2.append(array)
    41   58.719 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.727 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.055 MiB    0.328 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.34632 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17433.0  17433.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        477.0    477.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3856.0   3856.0      0.3  	imagem1 = np.float32(img1)
    12         1      76513.0  76513.0      5.7  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12992.0  12992.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12471.0  12471.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5043.0   5043.0      0.4  	dst1 = np.uint8(dst1)
    16         1      12666.0  12666.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         83.0     83.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21604.0  21604.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       4449.0     94.7      0.3  	for variavel in corners1:
    21        46       7550.0    164.1      0.6  		array=np.array([variavel])
    22        46       2845.0     61.8      0.2  		matriz1.append(array)
    23         1       1491.0   1491.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8856.0   8856.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        170.0    170.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80432.0  80432.0      6.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27211.0  27211.0      2.0  	imagem2 = np.float32(img2)
    30         1     577163.0 577163.0     42.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96574.0  96574.0      7.2  	dst2 = cv2.dilate(dst2,None)
    32         1      83706.0  83706.0      6.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39038.0  39038.0      2.9  	dst2 = np.uint8(dst2)
    34         1      76381.0  76381.0      5.7  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      73184.0  73184.0      5.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       145       9548.0     65.8      0.7  	for variavel in corners2:
    39       144      23889.0    165.9      1.8  		array=np.array([variavel])
    40       144      10635.0     73.9      0.8  		matriz2.append(array)
    41         1       3125.0   3125.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      53588.0  53588.0      4.0  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3158.0   3158.0      0.2  	matches = bf.match(des1,des2)

