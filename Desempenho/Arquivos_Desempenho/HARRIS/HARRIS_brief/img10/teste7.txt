Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.867 MiB   48.867 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.840 MiB    0.973 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.945 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.180 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.500 MiB    1.320 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.836 MiB    0.336 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.016 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.016 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.191 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.191 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.250 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.250 MiB    0.000 MiB   	matriz1=[]
    20   52.250 MiB    0.000 MiB   	for variavel in corners1:
    21   52.250 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.250 MiB    0.000 MiB   		matriz1.append(array)
    23   52.375 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.789 MiB    0.414 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.789 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.371 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.691 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.012 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.012 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.012 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.273 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.594 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.594 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.594 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.594 MiB    0.000 MiB   	matriz2=[]
    38   58.598 MiB    0.000 MiB   	for variavel in corners2:
    39   58.598 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.598 MiB    0.000 MiB   		matriz2.append(array)
    41   58.602 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.605 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.012 MiB    0.406 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.30933 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18577.0  18577.0      1.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        322.0    322.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3779.0   3779.0      0.3  	imagem1 = np.float32(img1)
    12         1      74153.0  74153.0      5.7  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13146.0  13146.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      13636.0  13636.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6605.0   6605.0      0.5  	dst1 = np.uint8(dst1)
    16         1      11473.0  11473.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         95.0     95.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21000.0  21000.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3657.0     77.8      0.3  	for variavel in corners1:
    21        46       7546.0    164.0      0.6  		array=np.array([variavel])
    22        46       2934.0     63.8      0.2  		matriz1.append(array)
    23         1       1432.0   1432.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8584.0   8584.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        287.0    287.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78720.0  78720.0      6.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26819.0  26819.0      2.0  	imagem2 = np.float32(img2)
    30         1     574689.0 574689.0     43.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97954.0  97954.0      7.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84933.0  84933.0      6.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37124.0  37124.0      2.8  	dst2 = np.uint8(dst2)
    34         1      76591.0  76591.0      5.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      61699.0  61699.0      4.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         62.0     62.0      0.0  	matriz2=[]
    38       105       6937.0     66.1      0.5  	for variavel in corners2:
    39       104      17381.0    167.1      1.3  		array=np.array([variavel])
    40       104       6782.0     65.2      0.5  		matriz2.append(array)
    41         1       2248.0   2248.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      47218.0  47218.0      3.6  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       2809.0   2809.0      0.2  	matches = bf.match(des1,des2)

