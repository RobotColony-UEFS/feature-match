Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.652 MiB   48.652 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.527 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.586 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.820 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.109 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.570 MiB    0.461 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.758 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.758 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.898 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.898 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.914 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.914 MiB    0.000 MiB   	matriz1=[]
    20   51.914 MiB    0.000 MiB   	for variavel in corners1:
    21   51.914 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.914 MiB    0.000 MiB   		matriz1.append(array)
    23   52.004 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.578 MiB    0.574 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.578 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.160 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.480 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.801 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.801 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.852 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.113 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.434 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.434 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.434 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.434 MiB    0.000 MiB   	matriz2=[]
    38   58.438 MiB    0.000 MiB   	for variavel in corners2:
    39   58.438 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.438 MiB    0.000 MiB   		matriz2.append(array)
    41   58.441 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.445 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.664 MiB    0.219 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.36122 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      19463.0  19463.0      1.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        238.0    238.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3919.0   3919.0      0.3  	imagem1 = np.float32(img1)
    12         1      74034.0  74034.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13065.0  13065.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      14132.0  14132.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5092.0   5092.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11578.0  11578.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21055.0  21055.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3123.0     66.4      0.2  	for variavel in corners1:
    21        46       7515.0    163.4      0.6  		array=np.array([variavel])
    22        46       4242.0     92.2      0.3  		matriz1.append(array)
    23         1       1405.0   1405.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9029.0   9029.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        285.0    285.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79727.0  79727.0      5.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27089.0  27089.0      2.0  	imagem2 = np.float32(img2)
    30         1     625368.0 625368.0     45.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95611.0  95611.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      85476.0  85476.0      6.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38747.0  38747.0      2.8  	dst2 = np.uint8(dst2)
    34         1      75240.0  75240.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      62907.0  62907.0      4.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       105       6884.0     65.6      0.5  	for variavel in corners2:
    39       104      16847.0    162.0      1.2  		array=np.array([variavel])
    40       104       6696.0     64.4      0.5  		matriz2.append(array)
    41         1       2202.0   2202.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      47226.0  47226.0      3.5  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       2744.0   2744.0      0.2  	matches = bf.match(des1,des2)

