Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.832 MiB   48.832 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.715 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.832 MiB    0.117 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.066 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.418 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.805 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.043 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.043 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.168 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.168 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.168 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.168 MiB    0.000 MiB   	matriz1=[]
    20   52.168 MiB    0.000 MiB   	for variavel in corners1:
    21   52.168 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.168 MiB    0.000 MiB   		matriz1.append(array)
    23   52.234 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.719 MiB    0.484 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.719 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.301 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.621 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.941 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.941 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.941 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.203 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.523 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.523 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.523 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.523 MiB    0.000 MiB   	matriz2=[]
    38   58.527 MiB    0.000 MiB   	for variavel in corners2:
    39   58.527 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.527 MiB    0.000 MiB   		matriz2.append(array)
    41   58.535 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.543 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.902 MiB    0.359 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.43011 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17136.0  17136.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        248.0    248.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3986.0   3986.0      0.3  	imagem1 = np.float32(img1)
    12         1      75903.0  75903.0      5.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13276.0  13276.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12939.0  12939.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5019.0   5019.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11612.0  11612.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21208.0  21208.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3126.0     66.5      0.2  	for variavel in corners1:
    21        46       7704.0    167.5      0.5  		array=np.array([variavel])
    22        46       5299.0    115.2      0.4  		matriz1.append(array)
    23         1       1280.0   1280.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9310.0   9310.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        167.0    167.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79544.0  79544.0      5.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28359.0  28359.0      2.0  	imagem2 = np.float32(img2)
    30         1     624153.0 624153.0     43.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97015.0  97015.0      6.8  	dst2 = cv2.dilate(dst2,None)
    32         1      85010.0  85010.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37723.0  37723.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76126.0  76126.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1        199.0    199.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      91589.0  91589.0      6.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       184      11673.0     63.4      0.8  	for variavel in corners2:
    39       183      29650.0    162.0      2.1  		array=np.array([variavel])
    40       183      12479.0     68.2      0.9  		matriz2.append(array)
    41         1       4372.0   4372.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      59949.0  59949.0      4.2  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3847.0   3847.0      0.3  	matches = bf.match(des1,des2)

