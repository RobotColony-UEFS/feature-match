Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.895 MiB   48.895 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.777 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.895 MiB    0.117 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.129 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.480 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.867 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.105 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.105 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.230 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.230 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.230 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.230 MiB    0.000 MiB   	matriz1=[]
    20   52.230 MiB    0.000 MiB   	for variavel in corners1:
    21   52.230 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.230 MiB    0.000 MiB   		matriz1.append(array)
    23   52.297 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.781 MiB    0.484 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.781 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.363 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.684 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.004 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.004 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.004 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.266 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.586 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.586 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.586 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.586 MiB    0.000 MiB   	matriz2=[]
    38   58.590 MiB    0.000 MiB   	for variavel in corners2:
    39   58.590 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.590 MiB    0.000 MiB   		matriz2.append(array)
    41   58.598 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.605 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.938 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.43367 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18845.0  18845.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        322.0    322.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3799.0   3799.0      0.3  	imagem1 = np.float32(img1)
    12         1      73895.0  73895.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14869.0  14869.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12534.0  12534.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5097.0   5097.0      0.4  	dst1 = np.uint8(dst1)
    16         1      12467.0  12467.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21618.0  21618.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3146.0     66.9      0.2  	for variavel in corners1:
    21        46       7295.0    158.6      0.5  		array=np.array([variavel])
    22        46       2881.0     62.6      0.2  		matriz1.append(array)
    23         1       1374.0   1374.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8736.0   8736.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        282.0    282.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81844.0  81844.0      5.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26660.0  26660.0      1.9  	imagem2 = np.float32(img2)
    30         1     625319.0 625319.0     43.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97158.0  97158.0      6.8  	dst2 = cv2.dilate(dst2,None)
    32         1      82931.0  82931.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39682.0  39682.0      2.8  	dst2 = np.uint8(dst2)
    34         1      76128.0  76128.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      92112.0  92112.0      6.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       184      12052.0     65.5      0.8  	for variavel in corners2:
    39       183      30624.0    167.3      2.1  		array=np.array([variavel])
    40       183      11718.0     64.0      0.8  		matriz2.append(array)
    41         1       3660.0   3660.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      62268.0  62268.0      4.3  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       4064.0   4064.0      0.3  	matches = bf.match(des1,des2)

