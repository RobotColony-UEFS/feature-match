Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.812 MiB   48.812 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.781 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.887 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.121 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.445 MiB    1.324 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.777 MiB    0.332 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.957 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.957 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.133 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.133 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.191 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.191 MiB    0.000 MiB   	matriz1=[]
    20   52.191 MiB    0.000 MiB   	for variavel in corners1:
    21   52.191 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.191 MiB    0.000 MiB   		matriz1.append(array)
    23   52.316 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.730 MiB    0.414 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.730 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.312 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.633 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.953 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.953 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.953 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.215 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.535 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.535 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.535 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.535 MiB    0.000 MiB   	matriz2=[]
    38   58.539 MiB    0.000 MiB   	for variavel in corners2:
    39   58.539 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.539 MiB    0.000 MiB   		matriz2.append(array)
    41   58.547 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.555 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.961 MiB    0.406 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.38703 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17661.0  17661.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        248.0    248.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4177.0   4177.0      0.3  	imagem1 = np.float32(img1)
    12         1      74584.0  74584.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14351.0  14351.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12447.0  12447.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4956.0   4956.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11755.0  11755.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22289.0  22289.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3112.0     66.2      0.2  	for variavel in corners1:
    21        46       7608.0    165.4      0.5  		array=np.array([variavel])
    22        46       3602.0     78.3      0.3  		matriz1.append(array)
    23         1       1299.0   1299.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9113.0   9113.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        279.0    279.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80380.0  80380.0      5.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29392.0  29392.0      2.1  	imagem2 = np.float32(img2)
    30         1     574421.0 574421.0     41.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96681.0  96681.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      86558.0  86558.0      6.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38099.0  38099.0      2.7  	dst2 = np.uint8(dst2)
    34         1      75589.0  75589.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      92976.0  92976.0      6.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       184      12306.0     66.9      0.9  	for variavel in corners2:
    39       183      31338.0    171.2      2.3  		array=np.array([variavel])
    40       183      12030.0     65.7      0.9  		matriz2.append(array)
    41         1       3750.0   3750.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      61899.0  61899.0      4.5  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3842.0   3842.0      0.3  	matches = bf.match(des1,des2)

