Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.527 MiB   48.527 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.410 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.531 MiB    0.121 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.824 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.113 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.527 MiB    0.414 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.770 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.770 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.895 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.895 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.906 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.906 MiB    0.000 MiB   	matriz1=[]
    20   51.906 MiB    0.000 MiB   	for variavel in corners1:
    21   51.906 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.906 MiB    0.000 MiB   		matriz1.append(array)
    23   51.973 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.461 MiB    0.488 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.461 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.043 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.363 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.684 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.684 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.738 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.000 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.320 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.320 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.320 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.320 MiB    0.000 MiB   	matriz2=[]
    38   58.324 MiB    0.000 MiB   	for variavel in corners2:
    39   58.324 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.324 MiB    0.000 MiB   		matriz2.append(array)
    41   58.332 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.340 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.676 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.4319 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      19103.0  19103.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        332.0    332.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3980.0   3980.0      0.3  	imagem1 = np.float32(img1)
    12         1      73159.0  73159.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13001.0  13001.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      14436.0  14436.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5090.0   5090.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11452.0  11452.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21244.0  21244.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1        161.0    161.0      0.0  	matriz1=[]
    20        47       3032.0     64.5      0.2  	for variavel in corners1:
    21        46       7270.0    158.0      0.5  		array=np.array([variavel])
    22        46       2794.0     60.7      0.2  		matriz1.append(array)
    23         1       1405.0   1405.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9391.0   9391.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        403.0    403.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80786.0  80786.0      5.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27434.0  27434.0      1.9  	imagem2 = np.float32(img2)
    30         1     626106.0 626106.0     43.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97283.0  97283.0      6.8  	dst2 = cv2.dilate(dst2,None)
    32         1      83301.0  83301.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39031.0  39031.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76750.0  76750.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      90345.0  90345.0      6.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1        332.0    332.0      0.0  	matriz2=[]
    38       184      11572.0     62.9      0.8  	for variavel in corners2:
    39       183      30918.0    169.0      2.2  		array=np.array([variavel])
    40       183      11296.0     61.7      0.8  		matriz2.append(array)
    41         1       4054.0   4054.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      62257.0  62257.0      4.3  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       4023.0   4023.0      0.3  	matches = bf.match(des1,des2)

