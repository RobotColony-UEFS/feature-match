Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.141 MiB   49.141 MiB   @profile
     7                             def HARRIS_brief(img):
     8   50.062 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.168 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.402 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.613 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.004 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.188 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.188 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.348 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.348 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.398 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.398 MiB    0.000 MiB   	matriz1=[]
    20   52.398 MiB    0.000 MiB   	for variavel in corners1:
    21   52.398 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.398 MiB    0.000 MiB   		matriz1.append(array)
    23   52.520 MiB    0.121 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.992 MiB    0.473 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.992 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.574 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.895 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.215 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.215 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.215 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.477 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.797 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.797 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.797 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.797 MiB    0.000 MiB   	matriz2=[]
    38   58.801 MiB    0.000 MiB   	for variavel in corners2:
    39   58.801 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.801 MiB    0.000 MiB   		matriz2.append(array)
    41   58.809 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.816 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.172 MiB    0.355 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.43089 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17120.0  17120.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        345.0    345.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4119.0   4119.0      0.3  	imagem1 = np.float32(img1)
    12         1      76328.0  76328.0      5.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13103.0  13103.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12476.0  12476.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5131.0   5131.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11614.0  11614.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21023.0  21023.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3143.0     66.9      0.2  	for variavel in corners1:
    21        46       7527.0    163.6      0.5  		array=np.array([variavel])
    22        46       2939.0     63.9      0.2  		matriz1.append(array)
    23         1       1278.0   1278.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8871.0   8871.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        170.0    170.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82079.0  82079.0      5.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29601.0  29601.0      2.1  	imagem2 = np.float32(img2)
    30         1     622603.0 622603.0     43.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97537.0  97537.0      6.8  	dst2 = cv2.dilate(dst2,None)
    32         1      85376.0  85376.0      6.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37117.0  37117.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76369.0  76369.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      91851.0  91851.0      6.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       184      12342.0     67.1      0.9  	for variavel in corners2:
    39       183      29577.0    161.6      2.1  		array=np.array([variavel])
    40       183      11669.0     63.8      0.8  		matriz2.append(array)
    41         1       4131.0   4131.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      61265.0  61265.0      4.3  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3895.0   3895.0      0.3  	matches = bf.match(des1,des2)

