Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.809 MiB   48.809 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.621 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.730 MiB    0.109 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.965 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.254 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.680 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.867 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.867 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.965 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.965 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.000 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.000 MiB    0.000 MiB   	matriz1=[]
    20   52.000 MiB    0.000 MiB   	for variavel in corners1:
    21   52.000 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.000 MiB    0.000 MiB   		matriz1.append(array)
    23   52.105 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.496 MiB    0.391 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.555 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.137 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.457 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.777 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.777 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.777 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.039 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.359 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.359 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.359 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.359 MiB    0.000 MiB   	matriz2=[]
    38   58.363 MiB    0.000 MiB   	for variavel in corners2:
    39   58.363 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.363 MiB    0.000 MiB   		matriz2.append(array)
    41   58.371 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.379 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.664 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.38971 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18188.0  18188.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        465.0    465.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4585.0   4585.0      0.3  	imagem1 = np.float32(img1)
    12         1      73986.0  73986.0      5.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12262.0  12262.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13730.0  13730.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5169.0   5169.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11686.0  11686.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21101.0  21101.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3161.0     67.3      0.2  	for variavel in corners1:
    21        46       9248.0    201.0      0.7  		array=np.array([variavel])
    22        46       2869.0     62.4      0.2  		matriz1.append(array)
    23         1       1407.0   1407.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9274.0   9274.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        211.0    211.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81131.0  81131.0      5.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26709.0  26709.0      1.9  	imagem2 = np.float32(img2)
    30         1     579855.0 579855.0     41.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      94956.0  94956.0      6.8  	dst2 = cv2.dilate(dst2,None)
    32         1      86065.0  86065.0      6.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38840.0  38840.0      2.8  	dst2 = np.uint8(dst2)
    34         1      74763.0  74763.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      94816.0  94816.0      6.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       184      12077.0     65.6      0.9  	for variavel in corners2:
    39       183      32447.0    177.3      2.3  		array=np.array([variavel])
    40       183      11850.0     64.8      0.9  		matriz2.append(array)
    41         1       4082.0   4082.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      60072.0  60072.0      4.3  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       4420.0   4420.0      0.3  	matches = bf.match(des1,des2)

