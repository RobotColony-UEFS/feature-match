Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.492 MiB   48.492 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.371 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.492 MiB    0.121 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.785 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.078 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.488 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.730 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.730 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.855 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.855 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.867 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.867 MiB    0.000 MiB   	matriz1=[]
    20   51.867 MiB    0.000 MiB   	for variavel in corners1:
    21   51.867 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.867 MiB    0.000 MiB   		matriz1.append(array)
    23   51.934 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.422 MiB    0.488 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.422 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.004 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.324 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.645 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.645 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.699 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.961 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.281 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.281 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.281 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.281 MiB    0.000 MiB   	matriz2=[]
    38   58.285 MiB    0.000 MiB   	for variavel in corners2:
    39   58.285 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.285 MiB    0.000 MiB   		matriz2.append(array)
    41   58.293 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.301 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.637 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.43879 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18879.0  18879.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        321.0    321.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3844.0   3844.0      0.3  	imagem1 = np.float32(img1)
    12         1      75287.0  75287.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14060.0  14060.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12458.0  12458.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5096.0   5096.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11538.0  11538.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20874.0  20874.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       4006.0     85.2      0.3  	for variavel in corners1:
    21        46       8225.0    178.8      0.6  		array=np.array([variavel])
    22        46       2925.0     63.6      0.2  		matriz1.append(array)
    23         1       1319.0   1319.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8960.0   8960.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        286.0    286.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78603.0  78603.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28229.0  28229.0      2.0  	imagem2 = np.float32(img2)
    30         1     627094.0 627094.0     43.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97416.0  97416.0      6.8  	dst2 = cv2.dilate(dst2,None)
    32         1      84511.0  84511.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38149.0  38149.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76378.0  76378.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100183.0 100183.0      7.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       179      12750.0     71.2      0.9  	for variavel in corners2:
    39       178      29688.0    166.8      2.1  		array=np.array([variavel])
    40       178      11216.0     63.0      0.8  		matriz2.append(array)
    41         1       3747.0   3747.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      58520.0  58520.0      4.1  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3947.0   3947.0      0.3  	matches = bf.match(des1,des2)

