Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.645 MiB   48.645 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.516 MiB    0.871 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.574 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.809 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.102 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.559 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.746 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.746 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.887 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.887 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.902 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.902 MiB    0.000 MiB   	matriz1=[]
    20   51.902 MiB    0.000 MiB   	for variavel in corners1:
    21   51.902 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.902 MiB    0.000 MiB   		matriz1.append(array)
    23   51.992 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.566 MiB    0.574 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.566 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.148 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.469 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.789 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.789 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.840 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.102 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.422 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.422 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.422 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.422 MiB    0.000 MiB   	matriz2=[]
    38   58.426 MiB    0.000 MiB   	for variavel in corners2:
    39   58.426 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.426 MiB    0.000 MiB   		matriz2.append(array)
    41   58.434 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.441 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.660 MiB    0.219 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.43756 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      20002.0  20002.0      1.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        351.0    351.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3853.0   3853.0      0.3  	imagem1 = np.float32(img1)
    12         1      73303.0  73303.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13092.0  13092.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      15020.0  15020.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4972.0   4972.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11596.0  11596.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20950.0  20950.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3162.0     67.3      0.2  	for variavel in corners1:
    21        46       7438.0    161.7      0.5  		array=np.array([variavel])
    22        46       2889.0     62.8      0.2  		matriz1.append(array)
    23         1       1346.0   1346.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8679.0   8679.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        173.0    173.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79234.0  79234.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27315.0  27315.0      1.9  	imagem2 = np.float32(img2)
    30         1     625751.0 625751.0     43.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      93407.0  93407.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85418.0  85418.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39806.0  39806.0      2.8  	dst2 = np.uint8(dst2)
    34         1      73670.0  73670.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     104054.0 104054.0      7.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       179      11889.0     66.4      0.8  	for variavel in corners2:
    39       178      29612.0    166.4      2.1  		array=np.array([variavel])
    40       178      12076.0     67.8      0.8  		matriz2.append(array)
    41         1       4075.0   4075.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      60205.0  60205.0      4.2  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3934.0   3934.0      0.3  	matches = bf.match(des1,des2)

