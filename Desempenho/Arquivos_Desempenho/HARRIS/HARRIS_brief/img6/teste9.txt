Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.855 MiB   48.855 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.824 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.930 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.164 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.488 MiB    1.324 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.820 MiB    0.332 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.000 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.000 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.176 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.176 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.234 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.234 MiB    0.000 MiB   	matriz1=[]
    20   52.234 MiB    0.000 MiB   	for variavel in corners1:
    21   52.234 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.234 MiB    0.000 MiB   		matriz1.append(array)
    23   52.359 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.773 MiB    0.414 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.773 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.355 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.676 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.996 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.996 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.996 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.258 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.578 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.578 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.578 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.578 MiB    0.000 MiB   	matriz2=[]
    38   58.582 MiB    0.000 MiB   	for variavel in corners2:
    39   58.582 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.582 MiB    0.000 MiB   		matriz2.append(array)
    41   58.590 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.598 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.004 MiB    0.406 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.39651 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17278.0  17278.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        354.0    354.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3945.0   3945.0      0.3  	imagem1 = np.float32(img1)
    12         1      75527.0  75527.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13646.0  13646.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12514.0  12514.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5097.0   5097.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11627.0  11627.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20932.0  20932.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3311.0     70.4      0.2  	for variavel in corners1:
    21        46       8399.0    182.6      0.6  		array=np.array([variavel])
    22        46       4353.0     94.6      0.3  		matriz1.append(array)
    23         1       1397.0   1397.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8687.0   8687.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        173.0    173.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76179.0  76179.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29445.0  29445.0      2.1  	imagem2 = np.float32(img2)
    30         1     573579.0 573579.0     41.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96844.0  96844.0      6.9  	dst2 = cv2.dilate(dst2,None)
    32         1      85223.0  85223.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39962.0  39962.0      2.9  	dst2 = np.uint8(dst2)
    34         1      79186.0  79186.0      5.7  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     106325.0 106325.0      7.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         63.0     63.0      0.0  	matriz2=[]
    38       179      11985.0     67.0      0.9  	for variavel in corners2:
    39       178      30008.0    168.6      2.1  		array=np.array([variavel])
    40       178      11371.0     63.9      0.8  		matriz2.append(array)
    41         1       3811.0   3811.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      60970.0  60970.0      4.4  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       4094.0   4094.0      0.3  	matches = bf.match(des1,des2)

