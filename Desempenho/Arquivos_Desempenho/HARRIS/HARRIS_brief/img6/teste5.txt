Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.051 MiB   49.051 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.863 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.969 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.203 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.488 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.863 MiB    0.375 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.047 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.047 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.148 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.148 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.188 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.188 MiB    0.000 MiB   	matriz1=[]
    20   52.188 MiB    0.000 MiB   	for variavel in corners1:
    21   52.188 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.188 MiB    0.000 MiB   		matriz1.append(array)
    23   52.297 MiB    0.109 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.688 MiB    0.391 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.809 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.391 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.711 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.031 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.031 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.031 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.293 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.613 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.613 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.613 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.613 MiB    0.000 MiB   	matriz2=[]
    38   58.617 MiB    0.000 MiB   	for variavel in corners2:
    39   58.617 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.617 MiB    0.000 MiB   		matriz2.append(array)
    41   58.625 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.633 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.855 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.39442 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17878.0  17878.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        470.0    470.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3981.0   3981.0      0.3  	imagem1 = np.float32(img1)
    12         1      75189.0  75189.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13081.0  13081.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12730.0  12730.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4960.0   4960.0      0.4  	dst1 = np.uint8(dst1)
    16         1      13264.0  13264.0      1.0  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21580.0  21580.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3148.0     67.0      0.2  	for variavel in corners1:
    21        46       7815.0    169.9      0.6  		array=np.array([variavel])
    22        46       3481.0     75.7      0.2  		matriz1.append(array)
    23         1       1273.0   1273.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8819.0   8819.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        175.0    175.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81520.0  81520.0      5.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27263.0  27263.0      2.0  	imagem2 = np.float32(img2)
    30         1     575442.0 575442.0     41.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96786.0  96786.0      6.9  	dst2 = cv2.dilate(dst2,None)
    32         1      85034.0  85034.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37838.0  37838.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76303.0  76303.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     102351.0 102351.0      7.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       179      11771.0     65.8      0.8  	for variavel in corners2:
    39       178      31666.0    177.9      2.3  		array=np.array([variavel])
    40       178      12496.0     70.2      0.9  		matriz2.append(array)
    41         1       4826.0   4826.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      58912.0  58912.0      4.2  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       4092.0   4092.0      0.3  	matches = bf.match(des1,des2)

