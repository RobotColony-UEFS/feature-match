Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.715 MiB   48.715 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.527 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.648 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.883 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.230 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.695 MiB    0.465 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.883 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.883 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.965 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.965 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.984 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.984 MiB    0.000 MiB   	matriz1=[]
    20   51.984 MiB    0.000 MiB   	for variavel in corners1:
    21   51.984 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.984 MiB    0.000 MiB   		matriz1.append(array)
    23   52.078 MiB    0.094 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.387 MiB    0.309 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.445 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.027 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.348 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.668 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.668 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.715 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.977 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.297 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.297 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.297 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.297 MiB    0.000 MiB   	matriz2=[]
    38   58.305 MiB    0.000 MiB   	for variavel in corners2:
    39   58.305 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.305 MiB    0.000 MiB   		matriz2.append(array)
    41   58.316 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.328 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.570 MiB    0.242 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.61229 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17205.0  17205.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        337.0    337.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4016.0   4016.0      0.2  	imagem1 = np.float32(img1)
    12         1      75767.0  75767.0      4.7  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13113.0  13113.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12315.0  12315.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5299.0   5299.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12494.0  12494.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1        127.0    127.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22897.0  22897.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3006.0     64.0      0.2  	for variavel in corners1:
    21        46       7529.0    163.7      0.5  		array=np.array([variavel])
    22        46       2719.0     59.1      0.2  		matriz1.append(array)
    23         1       1342.0   1342.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15604.0  15604.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        179.0    179.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80381.0  80381.0      5.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26754.0  26754.0      1.7  	imagem2 = np.float32(img2)
    30         1     592011.0 592011.0     36.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97467.0  97467.0      6.0  	dst2 = cv2.dilate(dst2,None)
    32         1      85257.0  85257.0      5.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37259.0  37259.0      2.3  	dst2 = np.uint8(dst2)
    34         1      77253.0  77253.0      4.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     186346.0 186346.0     11.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       285      18279.0     64.1      1.1  	for variavel in corners2:
    39       284      48310.0    170.1      3.0  		array=np.array([variavel])
    40       284      17718.0     62.4      1.1  		matriz2.append(array)
    41         1       5845.0   5845.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     139852.0 139852.0      8.7  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       5423.0   5423.0      0.3  	matches = bf.match(des1,des2)

