Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.660 MiB   48.660 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.535 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.656 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.891 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.180 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.637 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.824 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.824 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.965 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.965 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.980 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.980 MiB    0.000 MiB   	matriz1=[]
    20   51.980 MiB    0.000 MiB   	for variavel in corners1:
    21   51.980 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.980 MiB    0.000 MiB   		matriz1.append(array)
    23   52.070 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.438 MiB    0.367 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.438 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.020 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.340 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.660 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.660 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.711 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.973 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.293 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.293 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.293 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.293 MiB    0.000 MiB   	matriz2=[]
    38   58.301 MiB    0.000 MiB   	for variavel in corners2:
    39   58.301 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.301 MiB    0.000 MiB   		matriz2.append(array)
    41   58.312 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.324 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.547 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.65705 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17173.0  17173.0      1.0  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        334.0    334.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4008.0   4008.0      0.2  	imagem1 = np.float32(img1)
    12         1      76788.0  76788.0      4.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13144.0  13144.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12428.0  12428.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5077.0   5077.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12120.0  12120.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22904.0  22904.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3902.0     83.0      0.2  	for variavel in corners1:
    21        46       7536.0    163.8      0.5  		array=np.array([variavel])
    22        46       2793.0     60.7      0.2  		matriz1.append(array)
    23         1       1247.0   1247.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15439.0  15439.0      0.9  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        183.0    183.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81006.0  81006.0      4.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26909.0  26909.0      1.6  	imagem2 = np.float32(img2)
    30         1     635812.0 635812.0     38.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96715.0  96715.0      5.8  	dst2 = cv2.dilate(dst2,None)
    32         1      85486.0  85486.0      5.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39860.0  39860.0      2.4  	dst2 = np.uint8(dst2)
    34         1      75683.0  75683.0      4.6  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     182289.0 182289.0     11.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       285      19032.0     66.8      1.1  	for variavel in corners2:
    39       284      47799.0    168.3      2.9  		array=np.array([variavel])
    40       284      18062.0     63.6      1.1  		matriz2.append(array)
    41         1       6149.0   6149.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     141828.0 141828.0      8.6  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       5063.0   5063.0      0.3  	matches = bf.match(des1,des2)

