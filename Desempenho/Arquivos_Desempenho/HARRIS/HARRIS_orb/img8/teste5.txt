Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.992 MiB   48.992 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.898 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.020 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.254 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.602 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.992 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.293 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.293 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.480 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.480 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.480 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.480 MiB    0.000 MiB   	matriz1=[]
    20   52.480 MiB    0.000 MiB   	for variavel in corners1:
    21   52.480 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.480 MiB    0.000 MiB   		matriz1.append(array)
    23   52.547 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.816 MiB    0.270 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.816 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.398 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.719 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.039 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.039 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.039 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.301 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.621 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.621 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.621 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.621 MiB    0.000 MiB   	matriz2=[]
    38   58.629 MiB    0.000 MiB   	for variavel in corners2:
    39   58.629 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.629 MiB    0.000 MiB   		matriz2.append(array)
    41   58.641 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.652 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.926 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.66627 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17352.0  17352.0      1.0  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        337.0    337.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3954.0   3954.0      0.2  	imagem1 = np.float32(img1)
    12         1      76966.0  76966.0      4.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13143.0  13143.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12308.0  12308.0      0.7  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5848.0   5848.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11681.0  11681.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22289.0  22289.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3180.0     67.7      0.2  	for variavel in corners1:
    21        46       7943.0    172.7      0.5  		array=np.array([variavel])
    22        46       2856.0     62.1      0.2  		matriz1.append(array)
    23         1       1290.0   1290.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15486.0  15486.0      0.9  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        175.0    175.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81447.0  81447.0      4.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27157.0  27157.0      1.6  	imagem2 = np.float32(img2)
    30         1     645107.0 645107.0     38.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97900.0  97900.0      5.9  	dst2 = cv2.dilate(dst2,None)
    32         1      84009.0  84009.0      5.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39499.0  39499.0      2.4  	dst2 = np.uint8(dst2)
    34         1      75945.0  75945.0      4.6  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     181519.0 181519.0     10.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       285      18903.0     66.3      1.1  	for variavel in corners2:
    39       284      48759.0    171.7      2.9  		array=np.array([variavel])
    40       284      17168.0     60.5      1.0  		matriz2.append(array)
    41         1       6837.0   6837.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     142029.0 142029.0      8.5  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4902.0   4902.0      0.3  	matches = bf.match(des1,des2)

