Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.590 MiB   48.590 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.332 MiB    0.742 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.453 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.688 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.027 MiB    1.340 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.504 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.691 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.691 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.777 MiB    0.086 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.777 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.801 MiB    0.023 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.801 MiB    0.000 MiB   	matriz1=[]
    20   51.801 MiB    0.000 MiB   	for variavel in corners1:
    21   51.801 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.801 MiB    0.000 MiB   		matriz1.append(array)
    23   51.898 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.207 MiB    0.309 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.266 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.848 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.168 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.488 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.488 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.535 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.797 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.117 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.117 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.117 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.117 MiB    0.000 MiB   	matriz2=[]
    38   58.125 MiB    0.000 MiB   	for variavel in corners2:
    39   58.125 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.125 MiB    0.000 MiB   		matriz2.append(array)
    41   58.137 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.148 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.383 MiB    0.234 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.6584 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      19229.0  19229.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        333.0    333.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3856.0   3856.0      0.2  	imagem1 = np.float32(img1)
    12         1      73974.0  73974.0      4.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      15010.0  15010.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12780.0  12780.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5061.0   5061.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12304.0  12304.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21781.0  21781.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3025.0     64.4      0.2  	for variavel in corners1:
    21        46       7444.0    161.8      0.4  		array=np.array([variavel])
    22        46       2791.0     60.7      0.2  		matriz1.append(array)
    23         1       1321.0   1321.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15441.0  15441.0      0.9  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        297.0    297.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81653.0  81653.0      4.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28782.0  28782.0      1.7  	imagem2 = np.float32(img2)
    30         1     633273.0 633273.0     38.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97277.0  97277.0      5.9  	dst2 = cv2.dilate(dst2,None)
    32         1      85786.0  85786.0      5.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38204.0  38204.0      2.3  	dst2 = np.uint8(dst2)
    34         1      76343.0  76343.0      4.6  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     186789.0 186789.0     11.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       285      18158.0     63.7      1.1  	for variavel in corners2:
    39       284      48911.0    172.2      2.9  		array=np.array([variavel])
    40       284      17072.0     60.1      1.0  		matriz2.append(array)
    41         1       7068.0   7068.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     139240.0 139240.0      8.4  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4919.0   4919.0      0.3  	matches = bf.match(des1,des2)

