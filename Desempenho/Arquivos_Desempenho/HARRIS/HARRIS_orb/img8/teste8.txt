Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.766 MiB   48.766 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.578 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.699 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.934 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.281 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.750 MiB    0.469 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.938 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.938 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.020 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.020 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.039 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.039 MiB    0.000 MiB   	matriz1=[]
    20   52.039 MiB    0.000 MiB   	for variavel in corners1:
    21   52.039 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.039 MiB    0.000 MiB   		matriz1.append(array)
    23   52.133 MiB    0.094 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.441 MiB    0.309 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.500 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.082 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.402 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.723 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.723 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.770 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.031 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.352 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.352 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.352 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.352 MiB    0.000 MiB   	matriz2=[]
    38   58.359 MiB    0.000 MiB   	for variavel in corners2:
    39   58.359 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.359 MiB    0.000 MiB   		matriz2.append(array)
    41   58.371 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.383 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.609 MiB    0.227 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.60611 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17784.0  17784.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        466.0    466.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3836.0   3836.0      0.2  	imagem1 = np.float32(img1)
    12         1      75871.0  75871.0      4.7  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13666.0  13666.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12311.0  12311.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5303.0   5303.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11549.0  11549.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22281.0  22281.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3156.0     67.1      0.2  	for variavel in corners1:
    21        46       8562.0    186.1      0.5  		array=np.array([variavel])
    22        46       3410.0     74.1      0.2  		matriz1.append(array)
    23         1       1235.0   1235.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15533.0  15533.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        181.0    181.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80977.0  80977.0      5.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26823.0  26823.0      1.7  	imagem2 = np.float32(img2)
    30         1     587959.0 587959.0     36.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97463.0  97463.0      6.1  	dst2 = cv2.dilate(dst2,None)
    32         1      85737.0  85737.0      5.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37808.0  37808.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76832.0  76832.0      4.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     184913.0 184913.0     11.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       285      18690.0     65.6      1.2  	for variavel in corners2:
    39       284      46594.0    164.1      2.9  		array=np.array([variavel])
    40       284      17894.0     63.0      1.1  		matriz2.append(array)
    41         1       6126.0   6126.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     137922.0 137922.0      8.6  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4940.0   4940.0      0.3  	matches = bf.match(des1,des2)

