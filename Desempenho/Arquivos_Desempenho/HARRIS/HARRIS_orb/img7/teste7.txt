Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.824 MiB   48.824 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.793 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.855 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.090 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.414 MiB    1.324 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.746 MiB    0.332 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.926 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.926 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.102 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.102 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.160 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.160 MiB    0.000 MiB   	matriz1=[]
    20   52.160 MiB    0.000 MiB   	for variavel in corners1:
    21   52.160 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.160 MiB    0.000 MiB   		matriz1.append(array)
    23   52.285 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.488 MiB    0.203 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.488 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.070 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.391 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.711 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.711 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.711 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.973 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.293 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.293 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.293 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.293 MiB    0.000 MiB   	matriz2=[]
    38   58.297 MiB    0.000 MiB   	for variavel in corners2:
    39   58.297 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.297 MiB    0.000 MiB   		matriz2.append(array)
    41   58.301 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.309 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.656 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.4862 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18382.0  18382.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        339.0    339.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3844.0   3844.0      0.3  	imagem1 = np.float32(img1)
    12         1      75193.0  75193.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14253.0  14253.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12481.0  12481.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5329.0   5329.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11437.0  11437.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21350.0  21350.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3033.0     64.5      0.2  	for variavel in corners1:
    21        46       7488.0    162.8      0.5  		array=np.array([variavel])
    22        46       2911.0     63.3      0.2  		matriz1.append(array)
    23         1       1209.0   1209.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      17921.0  17921.0      1.2  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        179.0    179.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78952.0  78952.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29544.0  29544.0      2.0  	imagem2 = np.float32(img2)
    30         1     625817.0 625817.0     42.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97729.0  97729.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85570.0  85570.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37213.0  37213.0      2.5  	dst2 = np.uint8(dst2)
    34         1      76871.0  76871.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      74454.0  74454.0      5.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       145       9433.0     65.1      0.6  	for variavel in corners2:
    39       144      24455.0    169.8      1.6  		array=np.array([variavel])
    40       144       9443.0     65.6      0.6  		matriz2.append(array)
    41         1       2830.0   2830.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     135244.0 135244.0      9.1  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3016.0   3016.0      0.2  	matches = bf.match(des1,des2)

