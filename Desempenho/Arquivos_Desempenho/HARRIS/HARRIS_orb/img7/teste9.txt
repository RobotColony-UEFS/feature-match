Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.598 MiB   48.598 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.469 MiB    0.871 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.590 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.824 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.117 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.574 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.762 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.762 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.902 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.902 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.918 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.918 MiB    0.000 MiB   	matriz1=[]
    20   51.918 MiB    0.000 MiB   	for variavel in corners1:
    21   51.918 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.918 MiB    0.000 MiB   		matriz1.append(array)
    23   52.008 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.375 MiB    0.367 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.375 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.957 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.277 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.598 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.598 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.648 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.910 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.230 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.230 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.230 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.230 MiB    0.000 MiB   	matriz2=[]
    38   58.234 MiB    0.000 MiB   	for variavel in corners2:
    39   58.234 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.234 MiB    0.000 MiB   		matriz2.append(array)
    41   58.238 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.246 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.469 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.48771 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      16970.0  16970.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1       1843.0   1843.0      0.1  	orb = cv2.ORB_create()
    10                                           
    11         1       4859.0   4859.0      0.3  	imagem1 = np.float32(img1)
    12         1      69652.0  69652.0      4.7  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13275.0  13275.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      14931.0  14931.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5294.0   5294.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11448.0  11448.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21021.0  21021.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3078.0     65.5      0.2  	for variavel in corners1:
    21        46       7384.0    160.5      0.5  		array=np.array([variavel])
    22        46       2815.0     61.2      0.2  		matriz1.append(array)
    23         1       1444.0   1444.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15738.0  15738.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        302.0    302.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80579.0  80579.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26672.0  26672.0      1.8  	imagem2 = np.float32(img2)
    30         1     636003.0 636003.0     42.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98516.0  98516.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      82130.0  82130.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39943.0  39943.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76189.0  76189.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      73383.0  73383.0      4.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       145       9845.0     67.9      0.7  	for variavel in corners2:
    39       144      25935.0    180.1      1.7  		array=np.array([variavel])
    40       144       8865.0     61.6      0.6  		matriz2.append(array)
    41         1       3010.0   3010.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     133249.0 133249.0      9.0  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3057.0   3057.0      0.2  	matches = bf.match(des1,des2)

