Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.762 MiB   48.762 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.570 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.691 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.926 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.211 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.684 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.871 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.871 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.961 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.961 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.988 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.988 MiB    0.000 MiB   	matriz1=[]
    20   51.988 MiB    0.000 MiB   	for variavel in corners1:
    21   51.988 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.988 MiB    0.000 MiB   		matriz1.append(array)
    23   52.086 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.457 MiB    0.371 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.457 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.039 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.359 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.680 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.680 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.680 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.941 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.262 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.262 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.262 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.262 MiB    0.000 MiB   	matriz2=[]
    38   58.266 MiB    0.000 MiB   	for variavel in corners2:
    39   58.266 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.266 MiB    0.000 MiB   		matriz2.append(array)
    41   58.273 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.281 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.578 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.47876 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17060.0  17060.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        241.0    241.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3977.0   3977.0      0.3  	imagem1 = np.float32(img1)
    12         1      75282.0  75282.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12995.0  12995.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12319.0  12319.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6042.0   6042.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11476.0  11476.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20985.0  20985.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       4517.0     96.1      0.3  	for variavel in corners1:
    21        46       7877.0    171.2      0.5  		array=np.array([variavel])
    22        46       3122.0     67.9      0.2  		matriz1.append(array)
    23         1       1305.0   1305.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15967.0  15967.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        176.0    176.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81327.0  81327.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27474.0  27474.0      1.9  	imagem2 = np.float32(img2)
    30         1     576488.0 576488.0     39.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96357.0  96357.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      83253.0  83253.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39209.0  39209.0      2.7  	dst2 = np.uint8(dst2)
    34         1      74971.0  74971.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     105703.0 105703.0      7.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       190      13512.0     71.1      0.9  	for variavel in corners2:
    39       189      30918.0    163.6      2.1  		array=np.array([variavel])
    40       189      11665.0     61.7      0.8  		matriz2.append(array)
    41         1       3878.0   3878.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     136865.0 136865.0      9.3  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3514.0   3514.0      0.2  	matches = bf.match(des1,des2)

