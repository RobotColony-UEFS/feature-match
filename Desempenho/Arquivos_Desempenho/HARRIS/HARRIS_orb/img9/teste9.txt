Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.820 MiB   48.820 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.637 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.699 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.934 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.219 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.645 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.832 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.832 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.930 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.930 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.965 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.965 MiB    0.000 MiB   	matriz1=[]
    20   51.965 MiB    0.000 MiB   	for variavel in corners1:
    21   51.965 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.965 MiB    0.000 MiB   		matriz1.append(array)
    23   52.070 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.312 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.312 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.895 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.215 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.535 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.535 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.535 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.797 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.117 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.117 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.117 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.117 MiB    0.000 MiB   	matriz2=[]
    38   58.121 MiB    0.000 MiB   	for variavel in corners2:
    39   58.121 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.121 MiB    0.000 MiB   		matriz2.append(array)
    41   58.129 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.137 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.422 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.54085 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17113.0  17113.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        340.0    340.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4077.0   4077.0      0.3  	imagem1 = np.float32(img1)
    12         1      77547.0  77547.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13142.0  13142.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12450.0  12450.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5007.0   5007.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12525.0  12525.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         82.0     82.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21059.0  21059.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3109.0     66.1      0.2  	for variavel in corners1:
    21        46       8361.0    181.8      0.5  		array=np.array([variavel])
    22        46       2956.0     64.3      0.2  		matriz1.append(array)
    23         1       1338.0   1338.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15531.0  15531.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        178.0    178.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82066.0  82066.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26697.0  26697.0      1.7  	imagem2 = np.float32(img2)
    30         1     633088.0 633088.0     41.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95770.0  95770.0      6.2  	dst2 = cv2.dilate(dst2,None)
    32         1      86025.0  86025.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38069.0  38069.0      2.5  	dst2 = np.uint8(dst2)
    34         1      76267.0  76267.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         86.0     86.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     107461.0 107461.0      7.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       190      12387.0     65.2      0.8  	for variavel in corners2:
    39       189      31815.0    168.3      2.1  		array=np.array([variavel])
    40       189      11866.0     62.8      0.8  		matriz2.append(array)
    41         1       4141.0   4141.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     136734.0 136734.0      8.9  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3447.0   3447.0      0.2  	matches = bf.match(des1,des2)

