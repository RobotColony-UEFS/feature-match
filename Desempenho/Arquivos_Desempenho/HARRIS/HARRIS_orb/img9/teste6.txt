Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.836 MiB   48.836 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.652 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.715 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.949 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.234 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.660 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.848 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.848 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.945 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.945 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.980 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.980 MiB    0.000 MiB   	matriz1=[]
    20   51.980 MiB    0.000 MiB   	for variavel in corners1:
    21   51.980 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.980 MiB    0.000 MiB   		matriz1.append(array)
    23   52.086 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.328 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.328 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.910 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.230 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.551 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.551 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.551 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.812 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.133 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.133 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.133 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.133 MiB    0.000 MiB   	matriz2=[]
    38   58.137 MiB    0.000 MiB   	for variavel in corners2:
    39   58.137 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.137 MiB    0.000 MiB   		matriz2.append(array)
    41   58.145 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.152 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.438 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.55011 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18442.0  18442.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        245.0    245.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4012.0   4012.0      0.3  	imagem1 = np.float32(img1)
    12         1      71015.0  71015.0      4.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14050.0  14050.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13178.0  13178.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5104.0   5104.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11609.0  11609.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1        149.0    149.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21895.0  21895.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3184.0     67.7      0.2  	for variavel in corners1:
    21        46       7150.0    155.4      0.5  		array=np.array([variavel])
    22        46       2741.0     59.6      0.2  		matriz1.append(array)
    23         1       1421.0   1421.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15366.0  15366.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        297.0    297.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81563.0  81563.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27855.0  27855.0      1.8  	imagem2 = np.float32(img2)
    30         1     647614.0 647614.0     41.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      99077.0  99077.0      6.4  	dst2 = cv2.dilate(dst2,None)
    32         1      84241.0  84241.0      5.4  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38156.0  38156.0      2.5  	dst2 = np.uint8(dst2)
    34         1      76812.0  76812.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         75.0     75.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     104933.0 104933.0      6.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       190      12621.0     66.4      0.8  	for variavel in corners2:
    39       189      31722.0    167.8      2.0  		array=np.array([variavel])
    40       189      11434.0     60.5      0.7  		matriz2.append(array)
    41         1       4767.0   4767.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     135608.0 135608.0      8.7  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3659.0   3659.0      0.2  	matches = bf.match(des1,des2)

