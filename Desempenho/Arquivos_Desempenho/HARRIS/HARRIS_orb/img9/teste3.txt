Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.645 MiB   48.645 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.453 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.574 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.809 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.094 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.570 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.758 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.758 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.848 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.848 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.875 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.875 MiB    0.000 MiB   	matriz1=[]
    20   51.875 MiB    0.000 MiB   	for variavel in corners1:
    21   51.875 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.875 MiB    0.000 MiB   		matriz1.append(array)
    23   51.973 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.344 MiB    0.371 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.344 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.926 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.246 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.566 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.566 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.566 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.828 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.148 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.148 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.148 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.148 MiB    0.000 MiB   	matriz2=[]
    38   58.152 MiB    0.000 MiB   	for variavel in corners2:
    39   58.152 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.152 MiB    0.000 MiB   		matriz2.append(array)
    41   58.160 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.168 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.465 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.53949 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      16991.0  16991.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        333.0    333.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4085.0   4085.0      0.3  	imagem1 = np.float32(img1)
    12         1      76073.0  76073.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13187.0  13187.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12785.0  12785.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5195.0   5195.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11673.0  11673.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20950.0  20950.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3101.0     66.0      0.2  	for variavel in corners1:
    21        46       7525.0    163.6      0.5  		array=np.array([variavel])
    22        46       2954.0     64.2      0.2  		matriz1.append(array)
    23         1       1236.0   1236.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16875.0  16875.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        178.0    178.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81306.0  81306.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28244.0  28244.0      1.8  	imagem2 = np.float32(img2)
    30         1     636888.0 636888.0     41.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97593.0  97593.0      6.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85355.0  85355.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37197.0  37197.0      2.4  	dst2 = np.uint8(dst2)
    34         1      77410.0  77410.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     104845.0 104845.0      6.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       190      12246.0     64.5      0.8  	for variavel in corners2:
    39       189      31191.0    165.0      2.0  		array=np.array([variavel])
    40       189      11558.0     61.2      0.8  		matriz2.append(array)
    41         1       3944.0   3944.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     134755.0 134755.0      8.8  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3540.0   3540.0      0.2  	matches = bf.match(des1,des2)

