Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.957 MiB   48.957 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.844 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.965 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.199 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.547 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.934 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.172 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.172 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.297 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.297 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.297 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.297 MiB    0.000 MiB   	matriz1=[]
    20   52.297 MiB    0.000 MiB   	for variavel in corners1:
    21   52.297 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.297 MiB    0.000 MiB   		matriz1.append(array)
    23   52.363 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.641 MiB    0.277 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.641 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.223 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.543 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.863 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.863 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.863 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.125 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.445 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.445 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.445 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.445 MiB    0.000 MiB   	matriz2=[]
    38   58.449 MiB    0.000 MiB   	for variavel in corners2:
    39   58.449 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.449 MiB    0.000 MiB   		matriz2.append(array)
    41   58.457 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.465 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.738 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.49341 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17225.0  17225.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        329.0    329.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4615.0   4615.0      0.3  	imagem1 = np.float32(img1)
    12         1      75235.0  75235.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13120.0  13120.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13450.0  13450.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6190.0   6190.0      0.4  	dst1 = np.uint8(dst1)
    16         1      12418.0  12418.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21467.0  21467.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3147.0     67.0      0.2  	for variavel in corners1:
    21        46       7448.0    161.9      0.5  		array=np.array([variavel])
    22        46       3033.0     65.9      0.2  		matriz1.append(array)
    23         1       1238.0   1238.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15383.0  15383.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        180.0    180.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82319.0  82319.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26951.0  26951.0      1.8  	imagem2 = np.float32(img2)
    30         1     584370.0 584370.0     39.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97660.0  97660.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85145.0  85145.0      5.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37134.0  37134.0      2.5  	dst2 = np.uint8(dst2)
    34         1      77153.0  77153.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     104640.0 104640.0      7.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       190      13198.0     69.5      0.9  	for variavel in corners2:
    39       189      32610.0    172.5      2.2  		array=np.array([variavel])
    40       189      11918.0     63.1      0.8  		matriz2.append(array)
    41         1       3779.0   3779.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     137646.0 137646.0      9.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4122.0   4122.0      0.3  	matches = bf.match(des1,des2)

