Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.711 MiB   48.711 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.461 MiB    0.750 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.582 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.816 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.102 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.527 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.715 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.715 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.809 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.809 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.840 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.840 MiB    0.000 MiB   	matriz1=[]
    20   51.840 MiB    0.000 MiB   	for variavel in corners1:
    21   51.840 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.840 MiB    0.000 MiB   		matriz1.append(array)
    23   51.941 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.250 MiB    0.309 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.250 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.832 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.152 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.473 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.473 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.473 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.734 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.055 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.055 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.055 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.055 MiB    0.000 MiB   	matriz2=[]
    38   58.059 MiB    0.000 MiB   	for variavel in corners2:
    39   58.059 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.059 MiB    0.000 MiB   		matriz2.append(array)
    41   58.066 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.070 MiB    0.004 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.348 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.4754 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17545.0  17545.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        325.0    325.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4008.0   4008.0      0.3  	imagem1 = np.float32(img1)
    12         1      75520.0  75520.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13243.0  13243.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12856.0  12856.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5095.0   5095.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11432.0  11432.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22307.0  22307.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3137.0     66.7      0.2  	for variavel in corners1:
    21        46       7473.0    162.5      0.5  		array=np.array([variavel])
    22        46       2832.0     61.6      0.2  		matriz1.append(array)
    23         1       1318.0   1318.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      17018.0  17018.0      1.2  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        173.0    173.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76619.0  76619.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28322.0  28322.0      1.9  	imagem2 = np.float32(img2)
    30         1     586580.0 586580.0     39.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96513.0  96513.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85687.0  85687.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38893.0  38893.0      2.6  	dst2 = np.uint8(dst2)
    34         1      75471.0  75471.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      99708.0  99708.0      6.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       165      12238.0     74.2      0.8  	for variavel in corners2:
    39       164      26815.0    163.5      1.8  		array=np.array([variavel])
    40       164      10689.0     65.2      0.7  		matriz2.append(array)
    41         1       3631.0   3631.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     136137.0 136137.0      9.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3536.0   3536.0      0.2  	matches = bf.match(des1,des2)

