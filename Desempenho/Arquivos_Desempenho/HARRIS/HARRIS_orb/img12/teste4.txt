Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.996 MiB   48.996 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.926 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.988 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.223 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.438 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.824 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.000 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.000 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.109 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.109 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.156 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.156 MiB    0.000 MiB   	matriz1=[]
    20   52.156 MiB    0.000 MiB   	for variavel in corners1:
    21   52.156 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.156 MiB    0.000 MiB   		matriz1.append(array)
    23   52.273 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.504 MiB    0.230 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.566 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.148 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.469 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.789 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.789 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.789 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.051 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.371 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.371 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.371 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.371 MiB    0.000 MiB   	matriz2=[]
    38   58.375 MiB    0.000 MiB   	for variavel in corners2:
    39   58.375 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.375 MiB    0.000 MiB   		matriz2.append(array)
    41   58.383 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.387 MiB    0.004 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.676 MiB    0.289 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.4593 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17133.0  17133.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        336.0    336.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4153.0   4153.0      0.3  	imagem1 = np.float32(img1)
    12         1      75198.0  75198.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13208.0  13208.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12317.0  12317.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5089.0   5089.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11529.0  11529.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22700.0  22700.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3069.0     65.3      0.2  	for variavel in corners1:
    21        46       8378.0    182.1      0.6  		array=np.array([variavel])
    22        46       3032.0     65.9      0.2  		matriz1.append(array)
    23         1       1227.0   1227.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15540.0  15540.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        182.0    182.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78114.0  78114.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27591.0  27591.0      1.9  	imagem2 = np.float32(img2)
    30         1     574731.0 574731.0     39.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96502.0  96502.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85050.0  85050.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38186.0  38186.0      2.6  	dst2 = np.uint8(dst2)
    34         1      75985.0  75985.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      99966.0  99966.0      6.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       165      10570.0     64.1      0.7  	for variavel in corners2:
    39       164      26579.0    162.1      1.8  		array=np.array([variavel])
    40       164      10089.0     61.5      0.7  		matriz2.append(array)
    41         1       4124.0   4124.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     135231.0 135231.0      9.3  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3208.0   3208.0      0.2  	matches = bf.match(des1,des2)

