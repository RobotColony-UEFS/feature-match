Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.695 MiB   48.695 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.504 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.625 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.859 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.145 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.617 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.805 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.805 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.895 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.895 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.922 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.922 MiB    0.000 MiB   	matriz1=[]
    20   51.922 MiB    0.000 MiB   	for variavel in corners1:
    21   51.922 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.922 MiB    0.000 MiB   		matriz1.append(array)
    23   52.020 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.391 MiB    0.371 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.391 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.973 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.293 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.613 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.613 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.613 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.875 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.195 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.195 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.195 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.195 MiB    0.000 MiB   	matriz2=[]
    38   58.199 MiB    0.000 MiB   	for variavel in corners2:
    39   58.199 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.199 MiB    0.000 MiB   		matriz2.append(array)
    41   58.207 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.211 MiB    0.004 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.508 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.50933 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18111.0  18111.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        338.0    338.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4136.0   4136.0      0.3  	imagem1 = np.float32(img1)
    12         1      72776.0  72776.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13935.0  13935.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12439.0  12439.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5062.0   5062.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12064.0  12064.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1        202.0    202.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21183.0  21183.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3092.0     65.8      0.2  	for variavel in corners1:
    21        46       8188.0    178.0      0.5  		array=np.array([variavel])
    22        46       3300.0     71.7      0.2  		matriz1.append(array)
    23         1       1270.0   1270.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15751.0  15751.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        183.0    183.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78940.0  78940.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28045.0  28045.0      1.9  	imagem2 = np.float32(img2)
    30         1     616448.0 616448.0     40.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97507.0  97507.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84982.0  84982.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38617.0  38617.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76745.0  76745.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     104515.0 104515.0      6.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       165      10802.0     65.5      0.7  	for variavel in corners2:
    39       164      28393.0    173.1      1.9  		array=np.array([variavel])
    40       164      10354.0     63.1      0.7  		matriz2.append(array)
    41         1       3645.0   3645.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     134693.0 134693.0      8.9  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3421.0   3421.0      0.2  	matches = bf.match(des1,des2)

