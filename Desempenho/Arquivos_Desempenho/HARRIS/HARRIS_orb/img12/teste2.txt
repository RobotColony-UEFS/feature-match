Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.008 MiB   49.008 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.883 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.945 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.180 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.391 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.773 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.953 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.953 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.059 MiB    0.105 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.059 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.102 MiB    0.043 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.102 MiB    0.000 MiB   	matriz1=[]
    20   52.102 MiB    0.000 MiB   	for variavel in corners1:
    21   52.102 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.102 MiB    0.000 MiB   		matriz1.append(array)
    23   52.215 MiB    0.113 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.449 MiB    0.234 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.512 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.094 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.414 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.734 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.734 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.734 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.996 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.316 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.316 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.316 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.316 MiB    0.000 MiB   	matriz2=[]
    38   58.320 MiB    0.000 MiB   	for variavel in corners2:
    39   58.320 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.320 MiB    0.000 MiB   		matriz2.append(array)
    41   58.328 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.332 MiB    0.004 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.617 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.52266 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18178.0  18178.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        340.0    340.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4030.0   4030.0      0.3  	imagem1 = np.float32(img1)
    12         1      72002.0  72002.0      4.7  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13305.0  13305.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13350.0  13350.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4902.0   4902.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11589.0  11589.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22609.0  22609.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3152.0     67.1      0.2  	for variavel in corners1:
    21        46       7596.0    165.1      0.5  		array=np.array([variavel])
    22        46       2873.0     62.5      0.2  		matriz1.append(array)
    23         1       1379.0   1379.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      17122.0  17122.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        188.0    188.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78500.0  78500.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27557.0  27557.0      1.8  	imagem2 = np.float32(img2)
    30         1     625262.0 625262.0     41.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98564.0  98564.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84937.0  84937.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39196.0  39196.0      2.6  	dst2 = np.uint8(dst2)
    34         1      75400.0  75400.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     103911.0 103911.0      6.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       165      11730.0     71.1      0.8  	for variavel in corners2:
    39       164      27571.0    168.1      1.8  		array=np.array([variavel])
    40       164      10521.0     64.2      0.7  		matriz2.append(array)
    41         1       3397.0   3397.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     139510.0 139510.0      9.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3703.0   3703.0      0.2  	matches = bf.match(des1,des2)

