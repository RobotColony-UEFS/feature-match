Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.156 MiB   49.156 MiB   @profile
     7                             def HARRIS_orb(img):
     8   50.078 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.141 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.375 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.586 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.973 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.156 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.156 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.316 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.316 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.367 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.367 MiB    0.000 MiB   	matriz1=[]
    20   52.367 MiB    0.000 MiB   	for variavel in corners1:
    21   52.367 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.367 MiB    0.000 MiB   		matriz1.append(array)
    23   52.488 MiB    0.121 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.730 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.730 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.312 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.633 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.953 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.953 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.953 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.215 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.535 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.535 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.535 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.535 MiB    0.000 MiB   	matriz2=[]
    38   58.539 MiB    0.000 MiB   	for variavel in corners2:
    39   58.539 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.539 MiB    0.000 MiB   		matriz2.append(array)
    41   58.547 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.551 MiB    0.004 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.844 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.49377 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      16987.0  16987.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        325.0    325.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3961.0   3961.0      0.3  	imagem1 = np.float32(img1)
    12         1      76207.0  76207.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13189.0  13189.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12521.0  12521.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5090.0   5090.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11555.0  11555.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22684.0  22684.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       2994.0     63.7      0.2  	for variavel in corners1:
    21        46       8183.0    177.9      0.5  		array=np.array([variavel])
    22        46       3013.0     65.5      0.2  		matriz1.append(array)
    23         1       1315.0   1315.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15463.0  15463.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        292.0    292.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77661.0  77661.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27725.0  27725.0      1.9  	imagem2 = np.float32(img2)
    30         1     624701.0 624701.0     41.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96971.0  96971.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85677.0  85677.0      5.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37649.0  37649.0      2.5  	dst2 = np.uint8(dst2)
    34         1      76163.0  76163.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      98817.0  98817.0      6.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       165      11099.0     67.3      0.7  	for variavel in corners2:
    39       164      27927.0    170.3      1.9  		array=np.array([variavel])
    40       164      10361.0     63.2      0.7  		matriz2.append(array)
    41         1       3578.0   3578.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     117935.0 117935.0      7.9  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3445.0   3445.0      0.2  	matches = bf.match(des1,des2)

