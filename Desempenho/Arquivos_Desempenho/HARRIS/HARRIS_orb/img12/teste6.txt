Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.004 MiB   49.004 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.918 MiB    0.914 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.980 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.215 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.426 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.809 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.988 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.988 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.094 MiB    0.105 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.094 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.137 MiB    0.043 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.137 MiB    0.000 MiB   	matriz1=[]
    20   52.137 MiB    0.000 MiB   	for variavel in corners1:
    21   52.137 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.137 MiB    0.000 MiB   		matriz1.append(array)
    23   52.250 MiB    0.113 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.484 MiB    0.234 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.547 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.129 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.449 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.770 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.770 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.770 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.031 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.352 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.352 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.352 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.352 MiB    0.000 MiB   	matriz2=[]
    38   58.355 MiB    0.000 MiB   	for variavel in corners2:
    39   58.355 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.355 MiB    0.000 MiB   		matriz2.append(array)
    41   58.363 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.367 MiB    0.004 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.652 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.50366 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17356.0  17356.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        242.0    242.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4160.0   4160.0      0.3  	imagem1 = np.float32(img1)
    12         1      75747.0  75747.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13144.0  13144.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12783.0  12783.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5108.0   5108.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12122.0  12122.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20870.0  20870.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3108.0     66.1      0.2  	for variavel in corners1:
    21        46       8772.0    190.7      0.6  		array=np.array([variavel])
    22        46       2871.0     62.4      0.2  		matriz1.append(array)
    23         1       1349.0   1349.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15406.0  15406.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        300.0    300.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76981.0  76981.0      5.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29233.0  29233.0      1.9  	imagem2 = np.float32(img2)
    30         1     632410.0 632410.0     42.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96326.0  96326.0      6.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85218.0  85218.0      5.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37755.0  37755.0      2.5  	dst2 = np.uint8(dst2)
    34         1      76598.0  76598.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      99920.0  99920.0      6.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       165      10869.0     65.9      0.7  	for variavel in corners2:
    39       164      28787.0    175.5      1.9  		array=np.array([variavel])
    40       164      10165.0     62.0      0.7  		matriz2.append(array)
    41         1       3669.0   3669.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     118664.0 118664.0      7.9  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3438.0   3438.0      0.2  	matches = bf.match(des1,des2)

