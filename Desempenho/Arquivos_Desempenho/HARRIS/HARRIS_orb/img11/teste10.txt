Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.691 MiB   48.691 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.504 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.625 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.859 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.207 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.676 MiB    0.469 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.863 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.863 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.945 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.945 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.965 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.965 MiB    0.000 MiB   	matriz1=[]
    20   51.965 MiB    0.000 MiB   	for variavel in corners1:
    21   51.965 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.965 MiB    0.000 MiB   		matriz1.append(array)
    23   52.059 MiB    0.094 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.367 MiB    0.309 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.426 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.008 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.328 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.648 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.648 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.695 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.957 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.277 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.277 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.277 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.277 MiB    0.000 MiB   	matriz2=[]
    38   58.281 MiB    0.000 MiB   	for variavel in corners2:
    39   58.281 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.281 MiB    0.000 MiB   		matriz2.append(array)
    41   58.285 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.289 MiB    0.004 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.516 MiB    0.227 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.47142 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18739.0  18739.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        243.0    243.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       5034.0   5034.0      0.3  	imagem1 = np.float32(img1)
    12         1      69301.0  69301.0      4.7  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13038.0  13038.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13968.0  13968.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5188.0   5188.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11476.0  11476.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21460.0  21460.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3093.0     65.8      0.2  	for variavel in corners1:
    21        46       7723.0    167.9      0.5  		array=np.array([variavel])
    22        46       2926.0     63.6      0.2  		matriz1.append(array)
    23         1       1415.0   1415.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15439.0  15439.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        302.0    302.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      75159.0  75159.0      5.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26624.0  26624.0      1.8  	imagem2 = np.float32(img2)
    30         1     615608.0 615608.0     41.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97275.0  97275.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85375.0  85375.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39837.0  39837.0      2.7  	dst2 = np.uint8(dst2)
    34         1      73744.0  73744.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         87.0     87.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      88769.0  88769.0      6.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         64.0     64.0      0.0  	matriz2=[]
    38       129       8351.0     64.7      0.6  	for variavel in corners2:
    39       128      23022.0    179.9      1.6  		array=np.array([variavel])
    40       128       8352.0     65.2      0.6  		matriz2.append(array)
    41         1       2732.0   2732.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     134109.0 134109.0      9.1  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       2818.0   2818.0      0.2  	matches = bf.match(des1,des2)

