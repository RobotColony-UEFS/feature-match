Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.016 MiB   49.016 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.941 MiB    0.926 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.004 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.238 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.457 MiB    1.219 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.840 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.016 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.016 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.125 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.125 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.172 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.172 MiB    0.000 MiB   	matriz1=[]
    20   52.172 MiB    0.000 MiB   	for variavel in corners1:
    21   52.172 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.172 MiB    0.000 MiB   		matriz1.append(array)
    23   52.289 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.520 MiB    0.230 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.582 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.164 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.484 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.805 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.805 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.805 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.066 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.387 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.387 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.387 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.387 MiB    0.000 MiB   	matriz2=[]
    38   58.391 MiB    0.000 MiB   	for variavel in corners2:
    39   58.391 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.391 MiB    0.000 MiB   		matriz2.append(array)
    41   58.395 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.398 MiB    0.004 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.688 MiB    0.289 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.4962 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18368.0  18368.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        333.0    333.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3843.0   3843.0      0.3  	imagem1 = np.float32(img1)
    12         1      75158.0  75158.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14257.0  14257.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12412.0  12412.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5140.0   5140.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11437.0  11437.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21273.0  21273.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         52.0     52.0      0.0  	matriz1=[]
    20        47       3049.0     64.9      0.2  	for variavel in corners1:
    21        46       7267.0    158.0      0.5  		array=np.array([variavel])
    22        46       2790.0     60.7      0.2  		matriz1.append(array)
    23         1       1247.0   1247.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      18097.0  18097.0      1.2  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        178.0    178.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      74092.0  74092.0      5.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28566.0  28566.0      1.9  	imagem2 = np.float32(img2)
    30         1     634721.0 634721.0     42.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96812.0  96812.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85944.0  85944.0      5.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37087.0  37087.0      2.5  	dst2 = np.uint8(dst2)
    34         1      77410.0  77410.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      87358.0  87358.0      5.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       129       8420.0     65.3      0.6  	for variavel in corners2:
    39       128      20426.0    159.6      1.4  		array=np.array([variavel])
    40       128       7833.0     61.2      0.5  		matriz2.append(array)
    41         1       2792.0   2792.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     135696.0 135696.0      9.1  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3920.0   3920.0      0.3  	matches = bf.match(des1,des2)

