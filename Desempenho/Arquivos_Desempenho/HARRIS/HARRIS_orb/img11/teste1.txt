Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.926 MiB   48.926 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.812 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.934 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.168 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.516 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.902 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.141 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.141 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.266 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.266 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.266 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.266 MiB    0.000 MiB   	matriz1=[]
    20   52.266 MiB    0.000 MiB   	for variavel in corners1:
    21   52.266 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.266 MiB    0.000 MiB   		matriz1.append(array)
    23   52.332 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.609 MiB    0.277 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.609 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.191 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.512 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.832 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.832 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.832 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.094 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.414 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.414 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.414 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.414 MiB    0.000 MiB   	matriz2=[]
    38   58.418 MiB    0.000 MiB   	for variavel in corners2:
    39   58.418 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.418 MiB    0.000 MiB   		matriz2.append(array)
    41   58.422 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.426 MiB    0.004 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.699 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.49023 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17243.0  17243.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        237.0    237.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3834.0   3834.0      0.3  	imagem1 = np.float32(img1)
    12         1      76033.0  76033.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12936.0  12936.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12421.0  12421.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5045.0   5045.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11483.0  11483.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21966.0  21966.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         61.0     61.0      0.0  	matriz1=[]
    20        47       3137.0     66.7      0.2  	for variavel in corners1:
    21        46       7535.0    163.8      0.5  		array=np.array([variavel])
    22        46       3586.0     78.0      0.2  		matriz1.append(array)
    23         1       1452.0   1452.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16195.0  16195.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        290.0    290.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77169.0  77169.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27794.0  27794.0      1.9  	imagem2 = np.float32(img2)
    30         1     627614.0 627614.0     42.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96645.0  96645.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      86262.0  86262.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38064.0  38064.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76389.0  76389.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         86.0     86.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      87343.0  87343.0      5.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       129       8480.0     65.7      0.6  	for variavel in corners2:
    39       128      21676.0    169.3      1.5  		array=np.array([variavel])
    40       128       8896.0     69.5      0.6  		matriz2.append(array)
    41         1       3167.0   3167.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     134136.0 134136.0      9.0  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       2909.0   2909.0      0.2  	matches = bf.match(des1,des2)

