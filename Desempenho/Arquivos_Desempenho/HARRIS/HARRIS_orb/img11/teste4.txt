Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.121 MiB   49.121 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.938 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.000 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.234 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.516 MiB    1.281 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.891 MiB    0.375 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.074 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.074 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.176 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.176 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.215 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.215 MiB    0.000 MiB   	matriz1=[]
    20   52.215 MiB    0.000 MiB   	for variavel in corners1:
    21   52.215 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.215 MiB    0.000 MiB   		matriz1.append(array)
    23   52.324 MiB    0.109 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.562 MiB    0.238 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.625 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.207 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.527 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.848 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.848 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.848 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.109 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.430 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.430 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.430 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.430 MiB    0.000 MiB   	matriz2=[]
    38   58.434 MiB    0.000 MiB   	for variavel in corners2:
    39   58.434 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.434 MiB    0.000 MiB   		matriz2.append(array)
    41   58.438 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.441 MiB    0.004 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.664 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.48404 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18102.0  18102.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        229.0    229.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4657.0   4657.0      0.3  	imagem1 = np.float32(img1)
    12         1      72201.0  72201.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13116.0  13116.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13331.0  13331.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5069.0   5069.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12369.0  12369.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22315.0  22315.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3001.0     63.9      0.2  	for variavel in corners1:
    21        46       8509.0    185.0      0.6  		array=np.array([variavel])
    22        46       2824.0     61.4      0.2  		matriz1.append(array)
    23         1       1322.0   1322.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15438.0  15438.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        185.0    185.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76512.0  76512.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26781.0  26781.0      1.8  	imagem2 = np.float32(img2)
    30         1     622349.0 622349.0     41.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97702.0  97702.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85361.0  85361.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39228.0  39228.0      2.6  	dst2 = np.uint8(dst2)
    34         1      74626.0  74626.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      88321.0  88321.0      6.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       129       8699.0     67.4      0.6  	for variavel in corners2:
    39       128      22684.0    177.2      1.5  		array=np.array([variavel])
    40       128       8296.0     64.8      0.6  		matriz2.append(array)
    41         1       2883.0   2883.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     134554.0 134554.0      9.1  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3093.0   3093.0      0.2  	matches = bf.match(des1,des2)

