Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.023 MiB   49.023 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.992 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.055 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.289 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.500 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.891 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.066 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.066 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.234 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.234 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.289 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.289 MiB    0.000 MiB   	matriz1=[]
    20   52.289 MiB    0.000 MiB   	for variavel in corners1:
    21   52.289 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.289 MiB    0.000 MiB   		matriz1.append(array)
    23   52.414 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.613 MiB    0.199 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.613 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.195 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.516 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.836 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.836 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.836 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.098 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.418 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.418 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.418 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.418 MiB    0.000 MiB   	matriz2=[]
    38   58.422 MiB    0.000 MiB   	for variavel in corners2:
    39   58.422 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.422 MiB    0.000 MiB   		matriz2.append(array)
    41   58.430 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.438 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.727 MiB    0.289 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.49185 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17174.0  17174.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        332.0    332.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4040.0   4040.0      0.3  	imagem1 = np.float32(img1)
    12         1      75688.0  75688.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13360.0  13360.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12298.0  12298.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5078.0   5078.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11845.0  11845.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1        186.0    186.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22724.0  22724.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3148.0     67.0      0.2  	for variavel in corners1:
    21        46       7411.0    161.1      0.5  		array=np.array([variavel])
    22        46       3347.0     72.8      0.2  		matriz1.append(array)
    23         1       1238.0   1238.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16722.0  16722.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        182.0    182.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78772.0  78772.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27474.0  27474.0      1.8  	imagem2 = np.float32(img2)
    30         1     581884.0 581884.0     39.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97460.0  97460.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      86012.0  86012.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38425.0  38425.0      2.6  	dst2 = np.uint8(dst2)
    34         1      75546.0  75546.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     112485.0 112485.0      7.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       180      12826.0     71.3      0.9  	for variavel in corners2:
    39       179      30932.0    172.8      2.1  		array=np.array([variavel])
    40       179      11187.0     62.5      0.7  		matriz2.append(array)
    41         1       3619.0   3619.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     137006.0 137006.0      9.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3247.0   3247.0      0.2  	matches = bf.match(des1,des2)

