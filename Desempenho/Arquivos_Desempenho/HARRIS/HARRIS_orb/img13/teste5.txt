Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.836 MiB   48.836 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.648 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.711 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.945 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.234 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.660 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.848 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.848 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.945 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.945 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.980 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.980 MiB    0.000 MiB   	matriz1=[]
    20   51.980 MiB    0.000 MiB   	for variavel in corners1:
    21   51.980 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.980 MiB    0.000 MiB   		matriz1.append(array)
    23   52.086 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.328 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.328 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.910 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.230 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.551 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.551 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.551 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.812 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.133 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.133 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.133 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.133 MiB    0.000 MiB   	matriz2=[]
    38   58.137 MiB    0.000 MiB   	for variavel in corners2:
    39   58.137 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.137 MiB    0.000 MiB   		matriz2.append(array)
    41   58.145 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.152 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.438 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.55718 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18262.0  18262.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        242.0    242.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3923.0   3923.0      0.3  	imagem1 = np.float32(img1)
    12         1      71459.0  71459.0      4.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14022.0  14022.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12224.0  12224.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5179.0   5179.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11777.0  11777.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21323.0  21323.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       4780.0    101.7      0.3  	for variavel in corners1:
    21        46       7529.0    163.7      0.5  		array=np.array([variavel])
    22        46       2816.0     61.2      0.2  		matriz1.append(array)
    23         1       1301.0   1301.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15479.0  15479.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        300.0    300.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79431.0  79431.0      5.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26977.0  26977.0      1.7  	imagem2 = np.float32(img2)
    30         1     621219.0 621219.0     39.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97462.0  97462.0      6.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85182.0  85182.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37579.0  37579.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76551.0  76551.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     113629.0 113629.0      7.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       180      12397.0     68.9      0.8  	for variavel in corners2:
    39       179      29599.0    165.4      1.9  		array=np.array([variavel])
    40       179      11325.0     63.3      0.7  		matriz2.append(array)
    41         1       4501.0   4501.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     167065.0 167065.0     10.7  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3363.0   3363.0      0.2  	matches = bf.match(des1,des2)

