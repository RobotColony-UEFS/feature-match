Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.918 MiB   48.918 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.891 MiB    0.973 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.953 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.188 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.508 MiB    1.320 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.840 MiB    0.332 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.020 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.020 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.195 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.195 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.254 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.254 MiB    0.000 MiB   	matriz1=[]
    20   52.254 MiB    0.000 MiB   	for variavel in corners1:
    21   52.254 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.254 MiB    0.000 MiB   		matriz1.append(array)
    23   52.379 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.582 MiB    0.203 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.582 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.164 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.484 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.805 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.805 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.805 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.066 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.387 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.387 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.387 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.387 MiB    0.000 MiB   	matriz2=[]
    38   58.391 MiB    0.000 MiB   	for variavel in corners2:
    39   58.391 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.391 MiB    0.000 MiB   		matriz2.append(array)
    41   58.398 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.406 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.754 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.53815 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18011.0  18011.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        228.0    228.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3772.0   3772.0      0.2  	imagem1 = np.float32(img1)
    12         1      75741.0  75741.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13098.0  13098.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12503.0  12503.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5179.0   5179.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11573.0  11573.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21121.0  21121.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3256.0     69.3      0.2  	for variavel in corners1:
    21        46      10349.0    225.0      0.7  		array=np.array([variavel])
    22        46       2969.0     64.5      0.2  		matriz1.append(array)
    23         1       1331.0   1331.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15352.0  15352.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        181.0    181.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79412.0  79412.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26935.0  26935.0      1.8  	imagem2 = np.float32(img2)
    30         1     627900.0 627900.0     40.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98472.0  98472.0      6.4  	dst2 = cv2.dilate(dst2,None)
    32         1      84826.0  84826.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37109.0  37109.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76604.0  76604.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114546.0 114546.0      7.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       180      14613.0     81.2      1.0  	for variavel in corners2:
    39       179      29651.0    165.6      1.9  		array=np.array([variavel])
    40       179      11292.0     63.1      0.7  		matriz2.append(array)
    41         1       3735.0   3735.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     134745.0 134745.0      8.8  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3353.0   3353.0      0.2  	matches = bf.match(des1,des2)

