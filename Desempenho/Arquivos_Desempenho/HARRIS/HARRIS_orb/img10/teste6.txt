Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.695 MiB   48.695 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.504 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.625 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.859 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.211 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.676 MiB    0.465 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.863 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.863 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.945 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.945 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.965 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.965 MiB    0.000 MiB   	matriz1=[]
    20   51.965 MiB    0.000 MiB   	for variavel in corners1:
    21   51.965 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.965 MiB    0.000 MiB   		matriz1.append(array)
    23   52.059 MiB    0.094 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.367 MiB    0.309 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.426 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.008 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.328 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.648 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.648 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.695 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.957 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.277 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.277 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.277 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.277 MiB    0.000 MiB   	matriz2=[]
    38   58.281 MiB    0.000 MiB   	for variavel in corners2:
    39   58.281 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.281 MiB    0.000 MiB   		matriz2.append(array)
    41   58.285 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.285 MiB    0.000 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.512 MiB    0.227 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.39937 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17250.0  17250.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        221.0    221.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3887.0   3887.0      0.3  	imagem1 = np.float32(img1)
    12         1      76147.0  76147.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12872.0  12872.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12312.0  12312.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5177.0   5177.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11591.0  11591.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21327.0  21327.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       2947.0     62.7      0.2  	for variavel in corners1:
    21        46       8569.0    186.3      0.6  		array=np.array([variavel])
    22        46       2857.0     62.1      0.2  		matriz1.append(array)
    23         1       1458.0   1458.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      17130.0  17130.0      1.2  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        172.0    172.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76009.0  76009.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      30434.0  30434.0      2.2  	imagem2 = np.float32(img2)
    30         1     590189.0 590189.0     42.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95413.0  95413.0      6.8  	dst2 = cv2.dilate(dst2,None)
    32         1      83726.0  83726.0      6.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      41861.0  41861.0      3.0  	dst2 = np.uint8(dst2)
    34         1      74454.0  74454.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      61017.0  61017.0      4.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       105       6671.0     63.5      0.5  	for variavel in corners2:
    39       104      18032.0    173.4      1.3  		array=np.array([variavel])
    40       104       7590.0     73.0      0.5  		matriz2.append(array)
    41         1       2369.0   2369.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     115047.0 115047.0      8.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       2362.0   2362.0      0.2  	matches = bf.match(des1,des2)

