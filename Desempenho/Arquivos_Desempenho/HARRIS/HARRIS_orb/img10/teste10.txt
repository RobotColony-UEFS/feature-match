Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.777 MiB   48.777 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.594 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.656 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.891 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.176 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.605 MiB    0.430 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.793 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.793 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.891 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.891 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.926 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.926 MiB    0.000 MiB   	matriz1=[]
    20   51.926 MiB    0.000 MiB   	for variavel in corners1:
    21   51.926 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.926 MiB    0.000 MiB   		matriz1.append(array)
    23   52.031 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.273 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.273 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.855 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.176 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.496 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.496 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.496 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.758 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.078 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.078 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.078 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.078 MiB    0.000 MiB   	matriz2=[]
    38   58.082 MiB    0.000 MiB   	for variavel in corners2:
    39   58.082 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.082 MiB    0.000 MiB   		matriz2.append(array)
    41   58.086 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.086 MiB    0.000 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.371 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.43972 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17129.0  17129.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        237.0    237.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4032.0   4032.0      0.3  	imagem1 = np.float32(img1)
    12         1      72595.0  72595.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13012.0  13012.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12262.0  12262.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5088.0   5088.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11584.0  11584.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23072.0  23072.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3133.0     66.7      0.2  	for variavel in corners1:
    21        46       8434.0    183.3      0.6  		array=np.array([variavel])
    22        46       2813.0     61.2      0.2  		matriz1.append(array)
    23         1       1316.0   1316.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15649.0  15649.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        300.0    300.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78769.0  78769.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26932.0  26932.0      1.9  	imagem2 = np.float32(img2)
    30         1     616274.0 616274.0     42.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97061.0  97061.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      85377.0  85377.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37052.0  37052.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76786.0  76786.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      62757.0  62757.0      4.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       105       6833.0     65.1      0.5  	for variavel in corners2:
    39       104      16718.0    160.8      1.2  		array=np.array([variavel])
    40       104       6424.0     61.8      0.4  		matriz2.append(array)
    41         1       2258.0   2258.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     132978.0 132978.0      9.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       2564.0   2564.0      0.2  	matches = bf.match(des1,des2)

