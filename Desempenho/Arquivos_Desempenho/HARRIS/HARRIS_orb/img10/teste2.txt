Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.637 MiB   48.637 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.445 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.566 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.801 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.086 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.562 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.750 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.750 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.840 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.840 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.867 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.867 MiB    0.000 MiB   	matriz1=[]
    20   51.867 MiB    0.000 MiB   	for variavel in corners1:
    21   51.867 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.867 MiB    0.000 MiB   		matriz1.append(array)
    23   51.965 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.336 MiB    0.371 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.336 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.918 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.238 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.559 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.559 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.559 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.820 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.141 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.141 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.141 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.141 MiB    0.000 MiB   	matriz2=[]
    38   58.145 MiB    0.000 MiB   	for variavel in corners2:
    39   58.145 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.145 MiB    0.000 MiB   		matriz2.append(array)
    41   58.148 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.148 MiB    0.000 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.445 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.44627 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17613.0  17613.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        336.0    336.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4164.0   4164.0      0.3  	imagem1 = np.float32(img1)
    12         1      73160.0  73160.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13143.0  13143.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12428.0  12428.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6894.0   6894.0      0.5  	dst1 = np.uint8(dst1)
    16         1      11524.0  11524.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20960.0  20960.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3012.0     64.1      0.2  	for variavel in corners1:
    21        46       7321.0    159.2      0.5  		array=np.array([variavel])
    22        46       3010.0     65.4      0.2  		matriz1.append(array)
    23         1       2417.0   2417.0      0.2  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15560.0  15560.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        176.0    176.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78483.0  78483.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27575.0  27575.0      1.9  	imagem2 = np.float32(img2)
    30         1     617330.0 617330.0     42.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97443.0  97443.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      85359.0  85359.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39067.0  39067.0      2.7  	dst2 = np.uint8(dst2)
    34         1      74252.0  74252.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      61176.0  61176.0      4.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       105      10967.0    104.4      0.8  	for variavel in corners2:
    39       104      16939.0    162.9      1.2  		array=np.array([variavel])
    40       104       6929.0     66.6      0.5  		matriz2.append(array)
    41         1       3815.0   3815.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     132487.0 132487.0      9.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       2440.0   2440.0      0.2  	matches = bf.match(des1,des2)

