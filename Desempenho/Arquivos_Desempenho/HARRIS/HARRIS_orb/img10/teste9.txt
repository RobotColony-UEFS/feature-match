Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.594 MiB   48.594 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.465 MiB    0.871 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.586 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.820 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.113 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.570 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.758 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.758 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.898 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.898 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.914 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.914 MiB    0.000 MiB   	matriz1=[]
    20   51.914 MiB    0.000 MiB   	for variavel in corners1:
    21   51.914 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.914 MiB    0.000 MiB   		matriz1.append(array)
    23   52.004 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.371 MiB    0.367 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.371 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.953 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.273 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.594 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.594 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.645 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.906 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.227 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.227 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.227 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.227 MiB    0.000 MiB   	matriz2=[]
    38   58.230 MiB    0.000 MiB   	for variavel in corners2:
    39   58.230 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.230 MiB    0.000 MiB   		matriz2.append(array)
    41   58.234 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.234 MiB    0.000 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.477 MiB    0.242 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.38349 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17200.0  17200.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        338.0    338.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4037.0   4037.0      0.3  	imagem1 = np.float32(img1)
    12         1      75605.0  75605.0      5.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13215.0  13215.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12435.0  12435.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5062.0   5062.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11943.0  11943.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      24038.0  24038.0      1.7  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3058.0     65.1      0.2  	for variavel in corners1:
    21        46       7753.0    168.5      0.6  		array=np.array([variavel])
    22        46       2829.0     61.5      0.2  		matriz1.append(array)
    23         1       1255.0   1255.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15757.0  15757.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        182.0    182.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79572.0  79572.0      5.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26589.0  26589.0      1.9  	imagem2 = np.float32(img2)
    30         1     574435.0 574435.0     41.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97187.0  97187.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      83474.0  83474.0      6.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38454.0  38454.0      2.8  	dst2 = np.uint8(dst2)
    34         1      76497.0  76497.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      59933.0  59933.0      4.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       105       6853.0     65.3      0.5  	for variavel in corners2:
    39       104      19540.0    187.9      1.4  		array=np.array([variavel])
    40       104       6826.0     65.6      0.5  		matriz2.append(array)
    41         1       2259.0   2259.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     114412.0 114412.0      8.3  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       2463.0   2463.0      0.2  	matches = bf.match(des1,des2)

