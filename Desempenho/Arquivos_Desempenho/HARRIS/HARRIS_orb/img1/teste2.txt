Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.148 MiB   49.148 MiB   @profile
     7                             def HARRIS_orb(img):
     8   50.066 MiB    0.918 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.129 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.363 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.578 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.965 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.148 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.148 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.309 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.309 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.359 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.359 MiB    0.000 MiB   	matriz1=[]
    20   52.359 MiB    0.000 MiB   	for variavel in corners1:
    21   52.359 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.359 MiB    0.000 MiB   		matriz1.append(array)
    23   52.480 MiB    0.121 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.723 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.723 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.305 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.625 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.945 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.945 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.945 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.207 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.527 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.527 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.527 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.527 MiB    0.000 MiB   	matriz2=[]
    38   58.535 MiB    0.000 MiB   	for variavel in corners2:
    39   58.535 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.535 MiB    0.000 MiB   		matriz2.append(array)
    41   58.547 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.559 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.852 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.63205 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18281.0  18281.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        341.0    341.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4052.0   4052.0      0.2  	imagem1 = np.float32(img1)
    12         1      73602.0  73602.0      4.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13664.0  13664.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      13806.0  13806.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5095.0   5095.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11674.0  11674.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21445.0  21445.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3075.0     65.4      0.2  	for variavel in corners1:
    21        46       7341.0    159.6      0.4  		array=np.array([variavel])
    22        46       2866.0     62.3      0.2  		matriz1.append(array)
    23         1       1379.0   1379.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15567.0  15567.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        279.0    279.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79721.0  79721.0      4.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27945.0  27945.0      1.7  	imagem2 = np.float32(img2)
    30         1     644821.0 644821.0     39.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97433.0  97433.0      6.0  	dst2 = cv2.dilate(dst2,None)
    32         1      84976.0  84976.0      5.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37104.0  37104.0      2.3  	dst2 = np.uint8(dst2)
    34         1      77541.0  77541.0      4.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     171901.0 171901.0     10.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         54.0     54.0      0.0  	matriz2=[]
    38       287      18192.0     63.4      1.1  	for variavel in corners2:
    39       286      49915.0    174.5      3.1  		array=np.array([variavel])
    40       286      17561.0     61.4      1.1  		matriz2.append(array)
    41         1       5847.0   5847.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     121595.0 121595.0      7.5  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4760.0   4760.0      0.3  	matches = bf.match(des1,des2)

