Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.852 MiB   48.852 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.824 MiB    0.973 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.887 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.121 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.441 MiB    1.320 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.773 MiB    0.332 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.953 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.953 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.129 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.129 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.188 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.188 MiB    0.000 MiB   	matriz1=[]
    20   52.188 MiB    0.000 MiB   	for variavel in corners1:
    21   52.188 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.188 MiB    0.000 MiB   		matriz1.append(array)
    23   52.312 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.516 MiB    0.203 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.516 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.098 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.418 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.738 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.738 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.738 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.000 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.320 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.320 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.320 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.320 MiB    0.000 MiB   	matriz2=[]
    38   58.328 MiB    0.000 MiB   	for variavel in corners2:
    39   58.328 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.328 MiB    0.000 MiB   		matriz2.append(array)
    41   58.340 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.352 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.699 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.5761 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17220.0  17220.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        227.0    227.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       5796.0   5796.0      0.4  	imagem1 = np.float32(img1)
    12         1      73740.0  73740.0      4.7  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13011.0  13011.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      14119.0  14119.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4981.0   4981.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12683.0  12683.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20887.0  20887.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3109.0     66.1      0.2  	for variavel in corners1:
    21        46       7491.0    162.8      0.5  		array=np.array([variavel])
    22        46       2747.0     59.7      0.2  		matriz1.append(array)
    23         1       1353.0   1353.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15283.0  15283.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        176.0    176.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      84885.0  84885.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26557.0  26557.0      1.7  	imagem2 = np.float32(img2)
    30         1     584535.0 584535.0     37.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97885.0  97885.0      6.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85502.0  85502.0      5.4  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37228.0  37228.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76956.0  76956.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     172205.0 172205.0     10.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       287      18278.0     63.7      1.2  	for variavel in corners2:
    39       286      47807.0    167.2      3.0  		array=np.array([variavel])
    40       286      17748.0     62.1      1.1  		matriz2.append(array)
    41         1       5993.0   5993.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     122397.0 122397.0      7.8  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       5025.0   5025.0      0.3  	matches = bf.match(des1,des2)

