Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.895 MiB   48.895 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.824 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.887 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.121 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.398 MiB    1.277 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.785 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.961 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.961 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.070 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.070 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.117 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.117 MiB    0.000 MiB   	matriz1=[]
    20   52.117 MiB    0.000 MiB   	for variavel in corners1:
    21   52.117 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.117 MiB    0.000 MiB   		matriz1.append(array)
    23   52.234 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.465 MiB    0.230 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.527 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.109 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.430 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.750 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.750 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.750 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.012 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.332 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.332 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.332 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.332 MiB    0.000 MiB   	matriz2=[]
    38   58.340 MiB    0.000 MiB   	for variavel in corners2:
    39   58.340 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.340 MiB    0.000 MiB   		matriz2.append(array)
    41   58.352 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.363 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.652 MiB    0.289 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.60224 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17125.0  17125.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        337.0    337.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4042.0   4042.0      0.3  	imagem1 = np.float32(img1)
    12         1      72866.0  72866.0      4.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13282.0  13282.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12492.0  12492.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5093.0   5093.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11610.0  11610.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22082.0  22082.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3116.0     66.3      0.2  	for variavel in corners1:
    21        46       7386.0    160.6      0.5  		array=np.array([variavel])
    22        46       2851.0     62.0      0.2  		matriz1.append(array)
    23         1       1213.0   1213.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15490.0  15490.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        178.0    178.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80297.0  80297.0      5.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26915.0  26915.0      1.7  	imagem2 = np.float32(img2)
    30         1     615976.0 615976.0     38.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96754.0  96754.0      6.0  	dst2 = cv2.dilate(dst2,None)
    32         1      84905.0  84905.0      5.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38239.0  38239.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76807.0  76807.0      4.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     174342.0 174342.0     10.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         53.0     53.0      0.0  	matriz2=[]
    38       287      18764.0     65.4      1.2  	for variavel in corners2:
    39       286      48214.0    168.6      3.0  		array=np.array([variavel])
    40       286      18729.0     65.5      1.2  		matriz2.append(array)
    41         1       5947.0   5947.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     122088.0 122088.0      7.6  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4819.0   4819.0      0.3  	matches = bf.match(des1,des2)

