Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.871 MiB   48.871 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.844 MiB    0.973 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.906 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.141 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.461 MiB    1.320 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.797 MiB    0.336 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.973 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.973 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.148 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.148 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.207 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.207 MiB    0.000 MiB   	matriz1=[]
    20   52.207 MiB    0.000 MiB   	for variavel in corners1:
    21   52.207 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.207 MiB    0.000 MiB   		matriz1.append(array)
    23   52.332 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.535 MiB    0.203 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.535 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.117 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.438 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.758 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.758 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.758 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.020 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.340 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.340 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.340 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.340 MiB    0.000 MiB   	matriz2=[]
    38   58.348 MiB    0.000 MiB   	for variavel in corners2:
    39   58.348 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.348 MiB    0.000 MiB   		matriz2.append(array)
    41   58.359 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.371 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.719 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.6262 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      19391.0  19391.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        230.0    230.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3975.0   3975.0      0.2  	imagem1 = np.float32(img1)
    12         1      73543.0  73543.0      4.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12967.0  12967.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      14109.0  14109.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5910.0   5910.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11816.0  11816.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21242.0  21242.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3267.0     69.5      0.2  	for variavel in corners1:
    21        46       7726.0    168.0      0.5  		array=np.array([variavel])
    22        46       2953.0     64.2      0.2  		matriz1.append(array)
    23         1       1305.0   1305.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15323.0  15323.0      0.9  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        186.0    186.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80911.0  80911.0      5.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26837.0  26837.0      1.7  	imagem2 = np.float32(img2)
    30         1     632090.0 632090.0     38.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97531.0  97531.0      6.0  	dst2 = cv2.dilate(dst2,None)
    32         1      88036.0  88036.0      5.4  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38037.0  38037.0      2.3  	dst2 = np.uint8(dst2)
    34         1      77143.0  77143.0      4.7  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     168743.0 168743.0     10.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       287      18725.0     65.2      1.2  	for variavel in corners2:
    39       286      51073.0    178.6      3.1  		array=np.array([variavel])
    40       286      20761.0     72.6      1.3  		matriz2.append(array)
    41         1       5790.0   5790.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     121262.0 121262.0      7.5  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       5031.0   5031.0      0.3  	matches = bf.match(des1,des2)

