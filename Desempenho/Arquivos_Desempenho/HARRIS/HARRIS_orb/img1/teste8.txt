Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.137 MiB   49.137 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.953 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.016 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.250 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.531 MiB    1.281 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.910 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.094 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.094 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.195 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.195 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.234 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.234 MiB    0.000 MiB   	matriz1=[]
    20   52.234 MiB    0.000 MiB   	for variavel in corners1:
    21   52.234 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.234 MiB    0.000 MiB   		matriz1.append(array)
    23   52.344 MiB    0.109 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.582 MiB    0.238 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.645 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.227 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.547 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.867 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.867 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.867 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.129 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.449 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.449 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.449 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.449 MiB    0.000 MiB   	matriz2=[]
    38   58.457 MiB    0.000 MiB   	for variavel in corners2:
    39   58.457 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.457 MiB    0.000 MiB   		matriz2.append(array)
    41   58.469 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.480 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.703 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.64495 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      19147.0  19147.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        244.0    244.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4358.0   4358.0      0.3  	imagem1 = np.float32(img1)
    12         1      73713.0  73713.0      4.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14884.0  14884.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12287.0  12287.0      0.7  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6070.0   6070.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11998.0  11998.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21671.0  21671.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3117.0     66.3      0.2  	for variavel in corners1:
    21        46       7490.0    162.8      0.5  		array=np.array([variavel])
    22        46       2977.0     64.7      0.2  		matriz1.append(array)
    23         1       1344.0   1344.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15443.0  15443.0      0.9  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        297.0    297.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80989.0  80989.0      4.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28756.0  28756.0      1.7  	imagem2 = np.float32(img2)
    30         1     646574.0 646574.0     39.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98186.0  98186.0      6.0  	dst2 = cv2.dilate(dst2,None)
    32         1      86298.0  86298.0      5.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37212.0  37212.0      2.3  	dst2 = np.uint8(dst2)
    34         1      77935.0  77935.0      4.7  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         76.0     76.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     174932.0 174932.0     10.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       287      18678.0     65.1      1.1  	for variavel in corners2:
    39       286      48724.0    170.4      3.0  		array=np.array([variavel])
    40       286      18896.0     66.1      1.1  		matriz2.append(array)
    41         1       5802.0   5802.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     121834.0 121834.0      7.4  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4814.0   4814.0      0.3  	matches = bf.match(des1,des2)

