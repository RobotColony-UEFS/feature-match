Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.570 MiB   48.570 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.312 MiB    0.742 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.434 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.668 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.008 MiB    1.340 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.484 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.672 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.672 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.758 MiB    0.086 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.758 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.781 MiB    0.023 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.781 MiB    0.000 MiB   	matriz1=[]
    20   51.781 MiB    0.000 MiB   	for variavel in corners1:
    21   51.781 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.781 MiB    0.000 MiB   		matriz1.append(array)
    23   51.879 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.188 MiB    0.309 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.246 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.828 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.148 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.469 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.469 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.516 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.777 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.098 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.098 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.098 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.098 MiB    0.000 MiB   	matriz2=[]
    38   58.105 MiB    0.000 MiB   	for variavel in corners2:
    39   58.105 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.105 MiB    0.000 MiB   		matriz2.append(array)
    41   58.113 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.121 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.355 MiB    0.234 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.50849 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      19196.0  19196.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        228.0    228.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4144.0   4144.0      0.3  	imagem1 = np.float32(img1)
    12         1      73150.0  73150.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14592.0  14592.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12291.0  12291.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4989.0   4989.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12628.0  12628.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21023.0  21023.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3147.0     67.0      0.2  	for variavel in corners1:
    21        46       7829.0    170.2      0.5  		array=np.array([variavel])
    22        46       3037.0     66.0      0.2  		matriz1.append(array)
    23         1       1333.0   1333.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15397.0  15397.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        182.0    182.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80183.0  80183.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26719.0  26719.0      1.8  	imagem2 = np.float32(img2)
    30         1     579042.0 579042.0     38.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96645.0  96645.0      6.4  	dst2 = cv2.dilate(dst2,None)
    32         1      86253.0  86253.0      5.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37227.0  37227.0      2.5  	dst2 = np.uint8(dst2)
    34         1      76871.0  76871.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     113685.0 113685.0      7.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       226      16410.0     72.6      1.1  	for variavel in corners2:
    39       225      38263.0    170.1      2.5  		array=np.array([variavel])
    40       225      14673.0     65.2      1.0  		matriz2.append(array)
    41         1       4751.0   4751.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     139799.0 139799.0      9.3  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4515.0   4515.0      0.3  	matches = bf.match(des1,des2)

