Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.906 MiB   48.906 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.812 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.934 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.168 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.516 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.906 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.207 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.207 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.395 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.395 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.395 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.395 MiB    0.000 MiB   	matriz1=[]
    20   52.395 MiB    0.000 MiB   	for variavel in corners1:
    21   52.395 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.395 MiB    0.000 MiB   		matriz1.append(array)
    23   52.461 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.730 MiB    0.270 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.730 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.312 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.633 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.953 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.953 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.953 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.215 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.535 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.535 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.535 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.535 MiB    0.000 MiB   	matriz2=[]
    38   58.543 MiB    0.000 MiB   	for variavel in corners2:
    39   58.543 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.543 MiB    0.000 MiB   		matriz2.append(array)
    41   58.551 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.559 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.832 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.49764 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17264.0  17264.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        241.0    241.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4029.0   4029.0      0.3  	imagem1 = np.float32(img1)
    12         1      73123.0  73123.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14347.0  14347.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12416.0  12416.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4979.0   4979.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11556.0  11556.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20874.0  20874.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3063.0     65.2      0.2  	for variavel in corners1:
    21        46       7621.0    165.7      0.5  		array=np.array([variavel])
    22        46       3026.0     65.8      0.2  		matriz1.append(array)
    23         1       1379.0   1379.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      17919.0  17919.0      1.2  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        295.0    295.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77279.0  77279.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29345.0  29345.0      2.0  	imagem2 = np.float32(img2)
    30         1     572319.0 572319.0     38.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96710.0  96710.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85473.0  85473.0      5.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37107.0  37107.0      2.5  	dst2 = np.uint8(dst2)
    34         1      76289.0  76289.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     115773.0 115773.0      7.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       226      14423.0     63.8      1.0  	for variavel in corners2:
    39       225      37375.0    166.1      2.5  		array=np.array([variavel])
    40       225      14177.0     63.0      0.9  		matriz2.append(array)
    41         1       4733.0   4733.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     139826.0 139826.0      9.3  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4401.0   4401.0      0.3  	matches = bf.match(des1,des2)

