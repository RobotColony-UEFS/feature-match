Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.074 MiB   49.074 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.949 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.012 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.246 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.457 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.836 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.016 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.016 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.121 MiB    0.105 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.121 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.164 MiB    0.043 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.164 MiB    0.000 MiB   	matriz1=[]
    20   52.164 MiB    0.000 MiB   	for variavel in corners1:
    21   52.164 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.164 MiB    0.000 MiB   		matriz1.append(array)
    23   52.277 MiB    0.113 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.512 MiB    0.234 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.574 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.156 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.477 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.797 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.797 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.797 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.059 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.379 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.379 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.379 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.379 MiB    0.000 MiB   	matriz2=[]
    38   58.387 MiB    0.000 MiB   	for variavel in corners2:
    39   58.387 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.387 MiB    0.000 MiB   		matriz2.append(array)
    41   58.395 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.402 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.688 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.5087 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17289.0  17289.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        225.0    225.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       5191.0   5191.0      0.3  	imagem1 = np.float32(img1)
    12         1      74517.0  74517.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13016.0  13016.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13911.0  13911.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5284.0   5284.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11667.0  11667.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21549.0  21549.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         61.0     61.0      0.0  	matriz1=[]
    20        47       3137.0     66.7      0.2  	for variavel in corners1:
    21        46       8562.0    186.1      0.6  		array=np.array([variavel])
    22        46       2908.0     63.2      0.2  		matriz1.append(array)
    23         1       1460.0   1460.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15301.0  15301.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        179.0    179.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81002.0  81002.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26817.0  26817.0      1.8  	imagem2 = np.float32(img2)
    30         1     577249.0 577249.0     38.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96675.0  96675.0      6.4  	dst2 = cv2.dilate(dst2,None)
    32         1      84926.0  84926.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38241.0  38241.0      2.5  	dst2 = np.uint8(dst2)
    34         1      77496.0  77496.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114934.0 114934.0      7.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       226      15185.0     67.2      1.0  	for variavel in corners2:
    39       225      38716.0    172.1      2.6  		array=np.array([variavel])
    40       225      15029.0     66.8      1.0  		matriz2.append(array)
    41         1       4693.0   4693.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     138841.0 138841.0      9.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4413.0   4413.0      0.3  	matches = bf.match(des1,des2)

