Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.820 MiB   48.820 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.637 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.699 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.934 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.219 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.645 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.832 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.832 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.930 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.930 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.965 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.965 MiB    0.000 MiB   	matriz1=[]
    20   51.965 MiB    0.000 MiB   	for variavel in corners1:
    21   51.965 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.965 MiB    0.000 MiB   		matriz1.append(array)
    23   52.070 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.312 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.312 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.895 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.215 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.535 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.535 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.535 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.797 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.117 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.117 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.117 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.117 MiB    0.000 MiB   	matriz2=[]
    38   58.125 MiB    0.000 MiB   	for variavel in corners2:
    39   58.125 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.125 MiB    0.000 MiB   		matriz2.append(array)
    41   58.133 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.141 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.426 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.58637 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17055.0  17055.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        332.0    332.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3818.0   3818.0      0.2  	imagem1 = np.float32(img1)
    12         1      77035.0  77035.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13113.0  13113.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12509.0  12509.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5087.0   5087.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12420.0  12420.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21368.0  21368.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3499.0     74.4      0.2  	for variavel in corners1:
    21        46       7597.0    165.2      0.5  		array=np.array([variavel])
    22        46       3379.0     73.5      0.2  		matriz1.append(array)
    23         1       1157.0   1157.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15397.0  15397.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        179.0    179.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80769.0  80769.0      5.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26552.0  26552.0      1.7  	imagem2 = np.float32(img2)
    30         1     655720.0 655720.0     41.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97340.0  97340.0      6.1  	dst2 = cv2.dilate(dst2,None)
    32         1      84442.0  84442.0      5.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39977.0  39977.0      2.5  	dst2 = np.uint8(dst2)
    34         1      75578.0  75578.0      4.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     116940.0 116940.0      7.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       226      15782.0     69.8      1.0  	for variavel in corners2:
    39       225      37627.0    167.2      2.4  		array=np.array([variavel])
    40       225      14356.0     63.8      0.9  		matriz2.append(array)
    41         1       4466.0   4466.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     138098.0 138098.0      8.7  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4489.0   4489.0      0.3  	matches = bf.match(des1,des2)

