Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.594 MiB   48.594 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.473 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.594 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.887 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.180 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.590 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.832 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.832 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.957 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.957 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.969 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.969 MiB    0.000 MiB   	matriz1=[]
    20   51.969 MiB    0.000 MiB   	for variavel in corners1:
    21   51.969 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.969 MiB    0.000 MiB   		matriz1.append(array)
    23   52.035 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.316 MiB    0.281 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.316 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.898 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.219 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.539 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.539 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.594 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.855 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.176 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.176 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.176 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.176 MiB    0.000 MiB   	matriz2=[]
    38   58.184 MiB    0.000 MiB   	for variavel in corners2:
    39   58.184 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.184 MiB    0.000 MiB   		matriz2.append(array)
    41   58.191 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.199 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.477 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.49952 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17330.0  17330.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        245.0    245.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4046.0   4046.0      0.3  	imagem1 = np.float32(img1)
    12         1      75552.0  75552.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12945.0  12945.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12570.0  12570.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4909.0   4909.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11630.0  11630.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         82.0     82.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21576.0  21576.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3085.0     65.6      0.2  	for variavel in corners1:
    21        46       8684.0    188.8      0.6  		array=np.array([variavel])
    22        46       3928.0     85.4      0.3  		matriz1.append(array)
    23         1       1357.0   1357.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15717.0  15717.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        295.0    295.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78621.0  78621.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28478.0  28478.0      1.9  	imagem2 = np.float32(img2)
    30         1     574978.0 574978.0     38.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      94734.0  94734.0      6.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85540.0  85540.0      5.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      40029.0  40029.0      2.7  	dst2 = np.uint8(dst2)
    34         1      75186.0  75186.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114935.0 114935.0      7.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       226      14650.0     64.8      1.0  	for variavel in corners2:
    39       225      38147.0    169.5      2.5  		array=np.array([variavel])
    40       225      14012.0     62.3      0.9  		matriz2.append(array)
    41         1       4670.0   4670.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     136979.0 136979.0      9.1  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4415.0   4415.0      0.3  	matches = bf.match(des1,des2)

