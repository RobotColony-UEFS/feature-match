Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.820 MiB   48.820 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.637 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.699 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.934 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.219 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.648 MiB    0.430 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.836 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.836 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.934 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.934 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.969 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.969 MiB    0.000 MiB   	matriz1=[]
    20   51.969 MiB    0.000 MiB   	for variavel in corners1:
    21   51.969 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.969 MiB    0.000 MiB   		matriz1.append(array)
    23   52.074 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.316 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.316 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.898 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.219 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.539 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.539 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.539 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.801 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.121 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.121 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.121 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.121 MiB    0.000 MiB   	matriz2=[]
    38   58.129 MiB    0.000 MiB   	for variavel in corners2:
    39   58.129 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.129 MiB    0.000 MiB   		matriz2.append(array)
    41   58.141 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.148 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.434 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.64066 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17173.0  17173.0      1.0  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        225.0    225.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4038.0   4038.0      0.2  	imagem1 = np.float32(img1)
    12         1      76234.0  76234.0      4.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13237.0  13237.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12554.0  12554.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4987.0   4987.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12954.0  12954.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22204.0  22204.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3101.0     66.0      0.2  	for variavel in corners1:
    21        46       7756.0    168.6      0.5  		array=np.array([variavel])
    22        46       2782.0     60.5      0.2  		matriz1.append(array)
    23         1       1292.0   1292.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15472.0  15472.0      0.9  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        177.0    177.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80852.0  80852.0      4.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27067.0  27067.0      1.6  	imagem2 = np.float32(img2)
    30         1     628409.0 628409.0     38.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96948.0  96948.0      5.9  	dst2 = cv2.dilate(dst2,None)
    32         1      84861.0  84861.0      5.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39569.0  39569.0      2.4  	dst2 = np.uint8(dst2)
    34         1      75226.0  75226.0      4.6  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         74.0     74.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     183318.0 183318.0     11.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         93.0     93.0      0.0  	matriz2=[]
    38       273      17399.0     63.7      1.1  	for variavel in corners2:
    39       272      43812.0    161.1      2.7  		array=np.array([variavel])
    40       272      16792.0     61.7      1.0  		matriz2.append(array)
    41         1       5249.0   5249.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     141744.0 141744.0      8.6  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4915.0   4915.0      0.3  	matches = bf.match(des1,des2)

