Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.898 MiB   48.898 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.785 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.906 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.141 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.488 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.879 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.117 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.117 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.242 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.242 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.242 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.242 MiB    0.000 MiB   	matriz1=[]
    20   52.242 MiB    0.000 MiB   	for variavel in corners1:
    21   52.242 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.242 MiB    0.000 MiB   		matriz1.append(array)
    23   52.309 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.586 MiB    0.277 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.586 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.168 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.488 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.809 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.809 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.809 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.070 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.391 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.391 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.391 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.391 MiB    0.000 MiB   	matriz2=[]
    38   58.398 MiB    0.000 MiB   	for variavel in corners2:
    39   58.398 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.398 MiB    0.000 MiB   		matriz2.append(array)
    41   58.410 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.418 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.691 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.598 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      16896.0  16896.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        331.0    331.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3962.0   3962.0      0.2  	imagem1 = np.float32(img1)
    12         1      76141.0  76141.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13203.0  13203.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12471.0  12471.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5690.0   5690.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11778.0  11778.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22192.0  22192.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3528.0     75.1      0.2  	for variavel in corners1:
    21        46       8852.0    192.4      0.6  		array=np.array([variavel])
    22        46       2861.0     62.2      0.2  		matriz1.append(array)
    23         1       1319.0   1319.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15636.0  15636.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        290.0    290.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80567.0  80567.0      5.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27556.0  27556.0      1.7  	imagem2 = np.float32(img2)
    30         1     580362.0 580362.0     36.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95754.0  95754.0      6.0  	dst2 = cv2.dilate(dst2,None)
    32         1      84931.0  84931.0      5.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38375.0  38375.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76014.0  76014.0      4.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     184761.0 184761.0     11.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       273      18028.0     66.0      1.1  	for variavel in corners2:
    39       272      47428.0    174.4      3.0  		array=np.array([variavel])
    40       272      17687.0     65.0      1.1  		matriz2.append(array)
    41         1       6842.0   6842.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     139090.0 139090.0      8.7  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       5165.0   5165.0      0.3  	matches = bf.match(des1,des2)

