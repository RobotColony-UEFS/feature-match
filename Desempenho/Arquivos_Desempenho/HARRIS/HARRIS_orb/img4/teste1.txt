Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.695 MiB   48.695 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.504 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.625 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.859 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.145 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.617 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.805 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.805 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.895 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.895 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.922 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.922 MiB    0.000 MiB   	matriz1=[]
    20   51.922 MiB    0.000 MiB   	for variavel in corners1:
    21   51.922 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.922 MiB    0.000 MiB   		matriz1.append(array)
    23   52.020 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.391 MiB    0.371 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.391 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.973 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.293 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.613 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.613 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.613 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.875 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.195 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.195 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.195 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.195 MiB    0.000 MiB   	matriz2=[]
    38   58.203 MiB    0.000 MiB   	for variavel in corners2:
    39   58.203 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.203 MiB    0.000 MiB   		matriz2.append(array)
    41   58.215 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.223 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.520 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.59906 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17762.0  17762.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        232.0    232.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3933.0   3933.0      0.2  	imagem1 = np.float32(img1)
    12         1      75441.0  75441.0      4.7  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12942.0  12942.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12397.0  12397.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6317.0   6317.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11478.0  11478.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20985.0  20985.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       4650.0     98.9      0.3  	for variavel in corners1:
    21        46       7596.0    165.1      0.5  		array=np.array([variavel])
    22        46       3105.0     67.5      0.2  		matriz1.append(array)
    23         1       1383.0   1383.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15384.0  15384.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        228.0    228.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80196.0  80196.0      5.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26843.0  26843.0      1.7  	imagem2 = np.float32(img2)
    30         1     583468.0 583468.0     36.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97549.0  97549.0      6.1  	dst2 = cv2.dilate(dst2,None)
    32         1      85385.0  85385.0      5.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36968.0  36968.0      2.3  	dst2 = np.uint8(dst2)
    34         1      77250.0  77250.0      4.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     183507.0 183507.0     11.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       273      20901.0     76.6      1.3  	for variavel in corners2:
    39       272      45622.0    167.7      2.9  		array=np.array([variavel])
    40       272      17305.0     63.6      1.1  		matriz2.append(array)
    41         1       5407.0   5407.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     138728.0 138728.0      8.7  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       5810.0   5810.0      0.4  	matches = bf.match(des1,des2)

