Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.715 MiB   48.715 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.684 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.746 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.980 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.246 MiB    1.266 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.625 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.926 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.926 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.109 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.109 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.172 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.172 MiB    0.000 MiB   	matriz1=[]
    20   52.172 MiB    0.000 MiB   	for variavel in corners1:
    21   52.172 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.172 MiB    0.000 MiB   		matriz1.append(array)
    23   52.297 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.562 MiB    0.266 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.562 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.145 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.465 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.785 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.785 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.785 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.047 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.367 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.367 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.367 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.367 MiB    0.000 MiB   	matriz2=[]
    38   58.375 MiB    0.000 MiB   	for variavel in corners2:
    39   58.375 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.375 MiB    0.000 MiB   		matriz2.append(array)
    41   58.387 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.395 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.664 MiB    0.270 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.5961 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17191.0  17191.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        332.0    332.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4041.0   4041.0      0.3  	imagem1 = np.float32(img1)
    12         1      75543.0  75543.0      4.7  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13154.0  13154.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12581.0  12581.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4991.0   4991.0      0.3  	dst1 = np.uint8(dst1)
    16         1      13232.0  13232.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22426.0  22426.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       2979.0     63.4      0.2  	for variavel in corners1:
    21        46       8385.0    182.3      0.5  		array=np.array([variavel])
    22        46       2884.0     62.7      0.2  		matriz1.append(array)
    23         1       1337.0   1337.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15607.0  15607.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        297.0    297.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78950.0  78950.0      4.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27665.0  27665.0      1.7  	imagem2 = np.float32(img2)
    30         1     576985.0 576985.0     36.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97130.0  97130.0      6.1  	dst2 = cv2.dilate(dst2,None)
    32         1      85659.0  85659.0      5.4  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38149.0  38149.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76098.0  76098.0      4.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     190082.0 190082.0     11.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       273      18217.0     66.7      1.1  	for variavel in corners2:
    39       272      46328.0    170.3      2.9  		array=np.array([variavel])
    40       272      16345.0     60.1      1.0  		matriz2.append(array)
    41         1       7310.0   7310.0      0.5  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     137228.0 137228.0      8.6  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4691.0   4691.0      0.3  	matches = bf.match(des1,des2)

