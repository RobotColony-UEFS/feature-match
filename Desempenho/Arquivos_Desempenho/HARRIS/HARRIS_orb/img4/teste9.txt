Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.723 MiB   48.723 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.473 MiB    0.750 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.594 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.828 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.113 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.539 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.727 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.727 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.820 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.820 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.852 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.852 MiB    0.000 MiB   	matriz1=[]
    20   51.852 MiB    0.000 MiB   	for variavel in corners1:
    21   51.852 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.852 MiB    0.000 MiB   		matriz1.append(array)
    23   51.953 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.262 MiB    0.309 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.262 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.844 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.164 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.484 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.484 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.484 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.746 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.066 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.066 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.066 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.066 MiB    0.000 MiB   	matriz2=[]
    38   58.074 MiB    0.000 MiB   	for variavel in corners2:
    39   58.074 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.074 MiB    0.000 MiB   		matriz2.append(array)
    41   58.086 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.094 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.371 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.58882 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17013.0  17013.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        335.0    335.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4127.0   4127.0      0.3  	imagem1 = np.float32(img1)
    12         1      75059.0  75059.0      4.7  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13174.0  13174.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12582.0  12582.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4944.0   4944.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11556.0  11556.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21167.0  21167.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         53.0     53.0      0.0  	matriz1=[]
    20        47       3054.0     65.0      0.2  	for variavel in corners1:
    21        46       7804.0    169.7      0.5  		array=np.array([variavel])
    22        46       2781.0     60.5      0.2  		matriz1.append(array)
    23         1       1438.0   1438.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      17869.0  17869.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        183.0    183.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78609.0  78609.0      4.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29685.0  29685.0      1.9  	imagem2 = np.float32(img2)
    30         1     573932.0 573932.0     36.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96969.0  96969.0      6.1  	dst2 = cv2.dilate(dst2,None)
    32         1      85790.0  85790.0      5.4  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39778.0  39778.0      2.5  	dst2 = np.uint8(dst2)
    34         1      75030.0  75030.0      4.7  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     184546.0 184546.0     11.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       273      18128.0     66.4      1.1  	for variavel in corners2:
    39       272      45144.0    166.0      2.8  		array=np.array([variavel])
    40       272      17388.0     63.9      1.1  		matriz2.append(array)
    41         1       5851.0   5851.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     139835.0 139835.0      8.8  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4772.0   4772.0      0.3  	matches = bf.match(des1,des2)

