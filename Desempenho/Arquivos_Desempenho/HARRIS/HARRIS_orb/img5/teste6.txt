Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.820 MiB   48.820 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.637 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.699 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.934 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.219 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.645 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.832 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.832 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.930 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.930 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.965 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.965 MiB    0.000 MiB   	matriz1=[]
    20   51.965 MiB    0.000 MiB   	for variavel in corners1:
    21   51.965 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.965 MiB    0.000 MiB   		matriz1.append(array)
    23   52.070 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.312 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.312 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.895 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.215 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.535 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.535 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.535 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.797 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.117 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.117 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.117 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.117 MiB    0.000 MiB   	matriz2=[]
    38   58.121 MiB    0.000 MiB   	for variavel in corners2:
    39   58.121 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.121 MiB    0.000 MiB   		matriz2.append(array)
    41   58.129 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.137 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.422 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.4445 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      16905.0  16905.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        338.0    338.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3975.0   3975.0      0.3  	imagem1 = np.float32(img1)
    12         1      76709.0  76709.0      5.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13396.0  13396.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12266.0  12266.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5079.0   5079.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11540.0  11540.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22452.0  22452.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3065.0     65.2      0.2  	for variavel in corners1:
    21        46       9769.0    212.4      0.7  		array=np.array([variavel])
    22        46       2956.0     64.3      0.2  		matriz1.append(array)
    23         1       1248.0   1248.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15722.0  15722.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        293.0    293.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78114.0  78114.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26577.0  26577.0      1.8  	imagem2 = np.float32(img2)
    30         1     579544.0 579544.0     40.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97230.0  97230.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      83342.0  83342.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38937.0  38937.0      2.7  	dst2 = np.uint8(dst2)
    34         1      77378.0  77378.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      84809.0  84809.0      5.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       189      12763.0     67.5      0.9  	for variavel in corners2:
    39       188      31417.0    167.1      2.2  		array=np.array([variavel])
    40       188      13043.0     69.4      0.9  		matriz2.append(array)
    41         1       3700.0   3700.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     118609.0 118609.0      8.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3045.0   3045.0      0.2  	matches = bf.match(des1,des2)

