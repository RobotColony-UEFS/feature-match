Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.078 MiB   49.078 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.891 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.953 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.188 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.473 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.848 MiB    0.375 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.031 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.031 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.133 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.133 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.172 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.172 MiB    0.000 MiB   	matriz1=[]
    20   52.172 MiB    0.000 MiB   	for variavel in corners1:
    21   52.172 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.172 MiB    0.000 MiB   		matriz1.append(array)
    23   52.281 MiB    0.109 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.520 MiB    0.238 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.582 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.164 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.484 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.805 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.805 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.805 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.066 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.387 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.387 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.387 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.387 MiB    0.000 MiB   	matriz2=[]
    38   58.391 MiB    0.000 MiB   	for variavel in corners2:
    39   58.391 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.391 MiB    0.000 MiB   		matriz2.append(array)
    41   58.398 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.406 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.629 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.52232 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      19337.0  19337.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        223.0    223.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3784.0   3784.0      0.2  	imagem1 = np.float32(img1)
    12         1      73695.0  73695.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      15020.0  15020.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12402.0  12402.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6037.0   6037.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11594.0  11594.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20914.0  20914.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3135.0     66.7      0.2  	for variavel in corners1:
    21        46       7295.0    158.6      0.5  		array=np.array([variavel])
    22        46       2960.0     64.3      0.2  		matriz1.append(array)
    23         1       1335.0   1335.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15629.0  15629.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        179.0    179.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78465.0  78465.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26911.0  26911.0      1.8  	imagem2 = np.float32(img2)
    30         1     640869.0 640869.0     42.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98300.0  98300.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      83875.0  83875.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38033.0  38033.0      2.5  	dst2 = np.uint8(dst2)
    34         1      76507.0  76507.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      86221.0  86221.0      5.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       189      13336.0     70.6      0.9  	for variavel in corners2:
    39       188      30324.0    161.3      2.0  		array=np.array([variavel])
    40       188      11701.0     62.2      0.8  		matriz2.append(array)
    41         1       5277.0   5277.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     135535.0 135535.0      8.9  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3135.0   3135.0      0.2  	matches = bf.match(des1,des2)

