Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.023 MiB   49.023 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.949 MiB    0.926 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.012 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.246 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.465 MiB    1.219 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.848 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.023 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.023 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.133 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.133 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.180 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.180 MiB    0.000 MiB   	matriz1=[]
    20   52.180 MiB    0.000 MiB   	for variavel in corners1:
    21   52.180 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.180 MiB    0.000 MiB   		matriz1.append(array)
    23   52.297 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.527 MiB    0.230 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.590 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.172 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.492 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.812 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.812 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.812 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.074 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.395 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.395 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.395 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.395 MiB    0.000 MiB   	matriz2=[]
    38   58.398 MiB    0.000 MiB   	for variavel in corners2:
    39   58.398 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.398 MiB    0.000 MiB   		matriz2.append(array)
    41   58.406 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.414 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.703 MiB    0.289 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.46228 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      16932.0  16932.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        245.0    245.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4010.0   4010.0      0.3  	imagem1 = np.float32(img1)
    12         1      76147.0  76147.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13002.0  13002.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12329.0  12329.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5134.0   5134.0      0.4  	dst1 = np.uint8(dst1)
    16         1      12704.0  12704.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         80.0     80.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20910.0  20910.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3078.0     65.5      0.2  	for variavel in corners1:
    21        46       8408.0    182.8      0.6  		array=np.array([variavel])
    22        46       3367.0     73.2      0.2  		matriz1.append(array)
    23         1       1477.0   1477.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16323.0  16323.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        299.0    299.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78493.0  78493.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28246.0  28246.0      1.9  	imagem2 = np.float32(img2)
    30         1     582783.0 582783.0     39.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97482.0  97482.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      85558.0  85558.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38888.0  38888.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76276.0  76276.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100807.0 100807.0      6.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       179      11254.0     62.9      0.8  	for variavel in corners2:
    39       178      29880.0    167.9      2.0  		array=np.array([variavel])
    40       178      10955.0     61.5      0.7  		matriz2.append(array)
    41         1       3704.0   3704.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     119777.0 119777.0      8.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3546.0   3546.0      0.2  	matches = bf.match(des1,des2)

