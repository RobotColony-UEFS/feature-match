Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.977 MiB   48.977 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.883 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.004 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.238 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.586 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.977 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.277 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.277 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.465 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.465 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.465 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.465 MiB    0.000 MiB   	matriz1=[]
    20   52.465 MiB    0.000 MiB   	for variavel in corners1:
    21   52.465 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.465 MiB    0.000 MiB   		matriz1.append(array)
    23   52.531 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.801 MiB    0.270 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.801 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.383 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.703 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.023 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.023 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.023 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.285 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.605 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.605 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.605 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.605 MiB    0.000 MiB   	matriz2=[]
    38   58.609 MiB    0.000 MiB   	for variavel in corners2:
    39   58.609 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.609 MiB    0.000 MiB   		matriz2.append(array)
    41   58.617 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.625 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.898 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.52774 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18505.0  18505.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        231.0    231.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3992.0   3992.0      0.3  	imagem1 = np.float32(img1)
    12         1      74235.0  74235.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14475.0  14475.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12354.0  12354.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5949.0   5949.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11599.0  11599.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20922.0  20922.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3043.0     64.7      0.2  	for variavel in corners1:
    21        46       8026.0    174.5      0.5  		array=np.array([variavel])
    22        46       2845.0     61.8      0.2  		matriz1.append(array)
    23         1       1417.0   1417.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16378.0  16378.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        180.0    180.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80528.0  80528.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29156.0  29156.0      1.9  	imagem2 = np.float32(img2)
    30         1     633748.0 633748.0     41.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96900.0  96900.0      6.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84245.0  84245.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38172.0  38172.0      2.5  	dst2 = np.uint8(dst2)
    34         1      76667.0  76667.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      91527.0  91527.0      6.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       184      12085.0     65.7      0.8  	for variavel in corners2:
    39       183      32440.0    177.3      2.1  		array=np.array([variavel])
    40       183      12275.0     67.1      0.8  		matriz2.append(array)
    41         1       3671.0   3671.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     138041.0 138041.0      9.0  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3854.0   3854.0      0.3  	matches = bf.match(des1,des2)

