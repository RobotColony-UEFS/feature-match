Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.906 MiB   48.906 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.793 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.914 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.148 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.496 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.887 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.125 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.125 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.250 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.250 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.250 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.250 MiB    0.000 MiB   	matriz1=[]
    20   52.250 MiB    0.000 MiB   	for variavel in corners1:
    21   52.250 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.250 MiB    0.000 MiB   		matriz1.append(array)
    23   52.316 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.594 MiB    0.277 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.594 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.176 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.496 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.816 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.816 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.816 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.078 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.398 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.398 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.398 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.398 MiB    0.000 MiB   	matriz2=[]
    38   58.402 MiB    0.000 MiB   	for variavel in corners2:
    39   58.402 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.402 MiB    0.000 MiB   		matriz2.append(array)
    41   58.410 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.418 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.691 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.46963 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17270.0  17270.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        336.0    336.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4611.0   4611.0      0.3  	imagem1 = np.float32(img1)
    12         1      76140.0  76140.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13114.0  13114.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12526.0  12526.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4993.0   4993.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12023.0  12023.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22872.0  22872.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3017.0     64.2      0.2  	for variavel in corners1:
    21        46       7430.0    161.5      0.5  		array=np.array([variavel])
    22        46       2765.0     60.1      0.2  		matriz1.append(array)
    23         1       1292.0   1292.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16348.0  16348.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        180.0    180.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79823.0  79823.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27724.0  27724.0      1.9  	imagem2 = np.float32(img2)
    30         1     577333.0 577333.0     39.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97365.0  97365.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85283.0  85283.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38174.0  38174.0      2.6  	dst2 = np.uint8(dst2)
    34         1      75886.0  75886.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      93884.0  93884.0      6.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       184      13016.0     70.7      0.9  	for variavel in corners2:
    39       183      29477.0    161.1      2.0  		array=np.array([variavel])
    40       183      11300.0     61.7      0.8  		matriz2.append(array)
    41         1       4092.0   4092.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     137248.0 137248.0      9.3  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3831.0   3831.0      0.3  	matches = bf.match(des1,des2)

