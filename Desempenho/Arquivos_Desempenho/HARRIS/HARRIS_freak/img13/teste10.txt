Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.699 MiB   48.699 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.504 MiB    0.805 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.625 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.859 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.148 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.621 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.809 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.809 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.898 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.898 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.926 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.926 MiB    0.000 MiB   	matriz1=[]
    20   51.926 MiB    0.000 MiB   	for variavel in corners1:
    21   51.926 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.926 MiB    0.000 MiB   		matriz1.append(array)
    23   51.965 MiB    0.039 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.520 MiB    8.555 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.578 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.160 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.480 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.801 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.801 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.801 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.062 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.383 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.383 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.383 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.383 MiB    0.000 MiB   	matriz2=[]
    38   66.387 MiB    0.000 MiB   	for variavel in corners2:
    39   66.387 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.387 MiB    0.000 MiB   		matriz2.append(array)
    41   66.395 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.402 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.699 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.236 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18863.0  18863.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        364.0    364.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4349.0   4349.0      0.2  	imagem1 = np.float32(img1)
    12         1      74151.0  74151.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13084.0  13084.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      14894.0  14894.0      0.7  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4989.0   4989.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11921.0  11921.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22060.0  22060.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3059.0     65.1      0.1  	for variavel in corners1:
    21        46       7497.0    163.0      0.3  		array=np.array([variavel])
    22        46       2825.0     61.4      0.1  		matriz1.append(array)
    23         1       1078.0   1078.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847986.0 847986.0     37.9  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        271.0    271.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77704.0  77704.0      3.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29146.0  29146.0      1.3  	imagem2 = np.float32(img2)
    30         1     574083.0 574083.0     25.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97379.0  97379.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85255.0  85255.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38643.0  38643.0      1.7  	dst2 = np.uint8(dst2)
    34         1      75886.0  75886.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     112798.0 112798.0      5.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       180      11412.0     63.4      0.5  	for variavel in corners2:
    39       179      29766.0    166.3      1.3  		array=np.array([variavel])
    40       179      11030.0     61.6      0.5  		matriz2.append(array)
    41         1       3939.0   3939.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      55163.0  55163.0      2.5  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       6113.0   6113.0      0.3  	matches = bf.match(des1,des2)

