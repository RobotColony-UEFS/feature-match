Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.711 MiB   48.711 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.523 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.648 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.883 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.230 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.699 MiB    0.469 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.887 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.887 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.969 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.969 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.988 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.988 MiB    0.000 MiB   	matriz1=[]
    20   51.988 MiB    0.000 MiB   	for variavel in corners1:
    21   51.988 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.988 MiB    0.000 MiB   		matriz1.append(array)
    23   52.020 MiB    0.031 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.520 MiB    8.500 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.578 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.160 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.480 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.801 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.801 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.848 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.109 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.430 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.430 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.430 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.430 MiB    0.000 MiB   	matriz2=[]
    38   66.434 MiB    0.000 MiB   	for variavel in corners2:
    39   66.434 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.434 MiB    0.000 MiB   		matriz2.append(array)
    41   66.441 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.449 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.676 MiB    0.227 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.29453 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17260.0  17260.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        344.0    344.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3846.0   3846.0      0.2  	imagem1 = np.float32(img1)
    12         1      76492.0  76492.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13255.0  13255.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12339.0  12339.0      0.5  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5118.0   5118.0      0.2  	dst1 = np.uint8(dst1)
    16         1      13369.0  13369.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22212.0  22212.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3227.0     68.7      0.1  	for variavel in corners1:
    21        46       7817.0    169.9      0.3  		array=np.array([variavel])
    22        46       2970.0     64.6      0.1  		matriz1.append(array)
    23         1       1378.0   1378.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     844648.0 844648.0     36.8  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        280.0    280.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80750.0  80750.0      3.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26838.0  26838.0      1.2  	imagem2 = np.float32(img2)
    30         1     629735.0 629735.0     27.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96856.0  96856.0      4.2  	dst2 = cv2.dilate(dst2,None)
    32         1      83947.0  83947.0      3.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38082.0  38082.0      1.7  	dst2 = np.uint8(dst2)
    34         1      75611.0  75611.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         86.0     86.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     116788.0 116788.0      5.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       180      12304.0     68.4      0.5  	for variavel in corners2:
    39       179      31766.0    177.5      1.4  		array=np.array([variavel])
    40       179      12220.0     68.3      0.5  		matriz2.append(array)
    41         1       3994.0   3994.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      54674.0  54674.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       6124.0   6124.0      0.3  	matches = bf.match(des1,des2)

