Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.023 MiB   49.023 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.926 MiB    0.902 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.047 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.281 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.633 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.020 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.320 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.320 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.508 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.508 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.508 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.508 MiB    0.000 MiB   	matriz1=[]
    20   52.508 MiB    0.000 MiB   	for variavel in corners1:
    21   52.508 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.508 MiB    0.000 MiB   		matriz1.append(array)
    23   52.512 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   61.000 MiB    8.488 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   61.059 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.641 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.961 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.281 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.281 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.281 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.543 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.863 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.863 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.863 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.863 MiB    0.000 MiB   	matriz2=[]
    38   66.867 MiB    0.000 MiB   	for variavel in corners2:
    39   66.867 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.867 MiB    0.000 MiB   		matriz2.append(array)
    41   66.875 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.879 MiB    0.004 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.215 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.21184 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17086.0  17086.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        353.0    353.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3982.0   3982.0      0.2  	imagem1 = np.float32(img1)
    12         1      74862.0  74862.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12251.0  12251.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12547.0  12547.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5208.0   5208.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12685.0  12685.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         81.0     81.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22551.0  22551.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3010.0     64.0      0.1  	for variavel in corners1:
    21        46       7518.0    163.4      0.3  		array=np.array([variavel])
    22        46       2984.0     64.9      0.1  		matriz1.append(array)
    23         1       1181.0   1181.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     846631.0 846631.0     38.3  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        377.0    377.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78778.0  78778.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27029.0  27029.0      1.2  	imagem2 = np.float32(img2)
    30         1     575560.0 575560.0     26.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97908.0  97908.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85599.0  85599.0      3.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36981.0  36981.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76397.0  76397.0      3.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      99569.0  99569.0      4.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       165      10743.0     65.1      0.5  	for variavel in corners2:
    39       164      28704.0    175.0      1.3  		array=np.array([variavel])
    40       164      10182.0     62.1      0.5  		matriz2.append(array)
    41         1       3261.0   3261.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      52029.0  52029.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5593.0   5593.0      0.3  	matches = bf.match(des1,des2)

