Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.699 MiB   48.699 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.664 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.785 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.020 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.289 MiB    1.270 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.668 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.969 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.969 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.152 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.152 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.215 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.215 MiB    0.000 MiB   	matriz1=[]
    20   52.215 MiB    0.000 MiB   	for variavel in corners1:
    21   52.215 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.215 MiB    0.000 MiB   		matriz1.append(array)
    23   52.277 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.824 MiB    8.547 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.883 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.465 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.785 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.105 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.105 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.105 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.367 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.688 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.688 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.688 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.688 MiB    0.000 MiB   	matriz2=[]
    38   66.695 MiB    0.000 MiB   	for variavel in corners2:
    39   66.695 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.695 MiB    0.000 MiB   		matriz2.append(array)
    41   66.707 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.715 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.047 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.35383 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18184.0  18184.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        364.0    364.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3952.0   3952.0      0.2  	imagem1 = np.float32(img1)
    12         1      72233.0  72233.0      3.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      15152.0  15152.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12720.0  12720.0      0.5  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5139.0   5139.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11638.0  11638.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21056.0  21056.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         53.0     53.0      0.0  	matriz1=[]
    20        47       3042.0     64.7      0.1  	for variavel in corners1:
    21        46       7638.0    166.0      0.3  		array=np.array([variavel])
    22        46       2876.0     62.5      0.1  		matriz1.append(array)
    23         1       1183.0   1183.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     853248.0 853248.0     36.2  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        389.0    389.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79519.0  79519.0      3.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27659.0  27659.0      1.2  	imagem2 = np.float32(img2)
    30         1     575290.0 575290.0     24.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97170.0  97170.0      4.1  	dst2 = cv2.dilate(dst2,None)
    32         1      85242.0  85242.0      3.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39419.0  39419.0      1.7  	dst2 = np.uint8(dst2)
    34         1      75950.0  75950.0      3.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     183331.0 183331.0      7.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       273      18277.0     66.9      0.8  	for variavel in corners2:
    39       272      47737.0    175.5      2.0  		array=np.array([variavel])
    40       272      17272.0     63.5      0.7  		matriz2.append(array)
    41         1       5621.0   5621.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      63879.0  63879.0      2.7  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       8374.0   8374.0      0.4  	matches = bf.match(des1,des2)

