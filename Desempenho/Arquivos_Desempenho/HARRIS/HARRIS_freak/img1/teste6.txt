Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.988 MiB   48.988 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.848 MiB    0.859 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.012 MiB    0.164 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.246 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.527 MiB    1.281 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.906 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.090 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.090 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.191 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.191 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.230 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.230 MiB    0.000 MiB   	matriz1=[]
    20   52.230 MiB    0.000 MiB   	for variavel in corners1:
    21   52.230 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.230 MiB    0.000 MiB   		matriz1.append(array)
    23   52.234 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.594 MiB    8.359 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.715 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.297 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.617 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.938 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.938 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.938 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.199 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.520 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.520 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.520 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.520 MiB    0.000 MiB   	matriz2=[]
    38   66.527 MiB    0.000 MiB   	for variavel in corners2:
    39   66.527 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.527 MiB    0.000 MiB   		matriz2.append(array)
    41   66.539 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.551 MiB    0.012 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.836 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.39629 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      16907.0  16907.0      0.7  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        363.0    363.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       5685.0   5685.0      0.2  	imagem1 = np.float32(img1)
    12         1      74044.0  74044.0      3.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13138.0  13138.0      0.5  	dst1 = cv2.dilate(dst1,None)
    14         1      14202.0  14202.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5877.0   5877.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11706.0  11706.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21195.0  21195.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3111.0     66.2      0.1  	for variavel in corners1:
    21        46       7649.0    166.3      0.3  		array=np.array([variavel])
    22        46       2906.0     63.2      0.1  		matriz1.append(array)
    23         1       1370.0   1370.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847930.0 847930.0     35.4  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        286.0    286.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78459.0  78459.0      3.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29617.0  29617.0      1.2  	imagem2 = np.float32(img2)
    30         1     624799.0 624799.0     26.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97055.0  97055.0      4.1  	dst2 = cv2.dilate(dst2,None)
    32         1      84881.0  84881.0      3.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37765.0  37765.0      1.6  	dst2 = np.uint8(dst2)
    34         1      76962.0  76962.0      3.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     174018.0 174018.0      7.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       287      19124.0     66.6      0.8  	for variavel in corners2:
    39       286      48552.0    169.8      2.0  		array=np.array([variavel])
    40       286      17979.0     62.9      0.8  		matriz2.append(array)
    41         1       6031.0   6031.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      65676.0  65676.0      2.7  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       8716.0   8716.0      0.4  	matches = bf.match(des1,des2)

