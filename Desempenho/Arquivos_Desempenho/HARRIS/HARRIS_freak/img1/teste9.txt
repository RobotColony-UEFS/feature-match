Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.938 MiB   48.938 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.859 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.980 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.215 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.562 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.953 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.254 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.254 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.441 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.441 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.441 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.441 MiB    0.000 MiB   	matriz1=[]
    20   52.441 MiB    0.000 MiB   	for variavel in corners1:
    21   52.441 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.441 MiB    0.000 MiB   		matriz1.append(array)
    23   52.445 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.934 MiB    8.488 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.992 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.574 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.895 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.215 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.215 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.215 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.477 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.797 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.797 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.797 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.797 MiB    0.000 MiB   	matriz2=[]
    38   66.805 MiB    0.000 MiB   	for variavel in corners2:
    39   66.805 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.805 MiB    0.000 MiB   		matriz2.append(array)
    41   66.816 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.828 MiB    0.012 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.164 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.34947 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17072.0  17072.0      0.7  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        364.0    364.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4942.0   4942.0      0.2  	imagem1 = np.float32(img1)
    12         1      75313.0  75313.0      3.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13119.0  13119.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      13392.0  13392.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5057.0   5057.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12324.0  12324.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22430.0  22430.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3048.0     64.9      0.1  	for variavel in corners1:
    21        46       7466.0    162.3      0.3  		array=np.array([variavel])
    22        46       2823.0     61.4      0.1  		matriz1.append(array)
    23         1       1110.0   1110.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     849331.0 849331.0     36.1  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        280.0    280.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80212.0  80212.0      3.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28286.0  28286.0      1.2  	imagem2 = np.float32(img2)
    30         1     575950.0 575950.0     24.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96574.0  96574.0      4.1  	dst2 = cv2.dilate(dst2,None)
    32         1      85670.0  85670.0      3.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38563.0  38563.0      1.6  	dst2 = np.uint8(dst2)
    34         1      76115.0  76115.0      3.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     173306.0 173306.0      7.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       287      18576.0     64.7      0.8  	for variavel in corners2:
    39       286      48690.0    170.2      2.1  		array=np.array([variavel])
    40       286      17571.0     61.4      0.7  		matriz2.append(array)
    41         1       5764.0   5764.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      66968.0  66968.0      2.9  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       8869.0   8869.0      0.4  	matches = bf.match(des1,des2)

