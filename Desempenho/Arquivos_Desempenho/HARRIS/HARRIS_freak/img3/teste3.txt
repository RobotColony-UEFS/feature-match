Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.723 MiB   48.723 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.473 MiB    0.750 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.594 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.828 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.113 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.539 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.727 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.727 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.820 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.820 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.852 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.852 MiB    0.000 MiB   	matriz1=[]
    20   51.852 MiB    0.000 MiB   	for variavel in corners1:
    21   51.852 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.852 MiB    0.000 MiB   		matriz1.append(array)
    23   51.895 MiB    0.043 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.391 MiB    8.496 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.449 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.031 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.352 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.672 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.672 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.672 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   63.934 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.254 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.254 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.254 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.254 MiB    0.000 MiB   	matriz2=[]
    38   66.258 MiB    0.000 MiB   	for variavel in corners2:
    39   66.258 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.258 MiB    0.000 MiB   		matriz2.append(array)
    41   66.266 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.273 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.551 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.2725 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17841.0  17841.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        434.0    434.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3941.0   3941.0      0.2  	imagem1 = np.float32(img1)
    12         1      75090.0  75090.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13878.0  13878.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12548.0  12548.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4988.0   4988.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12207.0  12207.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22316.0  22316.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3127.0     66.5      0.1  	for variavel in corners1:
    21        46       7220.0    157.0      0.3  		array=np.array([variavel])
    22        46       2802.0     60.9      0.1  		matriz1.append(array)
    23         1       1133.0   1133.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847268.0 847268.0     37.3  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        377.0    377.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81465.0  81465.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27756.0  27756.0      1.2  	imagem2 = np.float32(img2)
    30         1     628233.0 628233.0     27.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96840.0  96840.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84822.0  84822.0      3.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38103.0  38103.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76629.0  76629.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         75.0     75.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      91046.0  91046.0      4.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       184      11848.0     64.4      0.5  	for variavel in corners2:
    39       183      30403.0    166.1      1.3  		array=np.array([variavel])
    40       183      12808.0     70.0      0.6  		matriz2.append(array)
    41         1       4525.0   4525.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      56141.0  56141.0      2.5  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       6437.0   6437.0      0.3  	matches = bf.match(des1,des2)

