Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.887 MiB   48.887 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.793 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.914 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.148 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.496 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.887 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.188 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.188 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.375 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.375 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.375 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.375 MiB    0.000 MiB   	matriz1=[]
    20   52.375 MiB    0.000 MiB   	for variavel in corners1:
    21   52.375 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.375 MiB    0.000 MiB   		matriz1.append(array)
    23   52.379 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.867 MiB    8.488 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.926 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.508 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.828 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.148 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.148 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.148 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.410 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.730 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.730 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.730 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.730 MiB    0.000 MiB   	matriz2=[]
    38   66.738 MiB    0.000 MiB   	for variavel in corners2:
    39   66.738 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.738 MiB    0.000 MiB   		matriz2.append(array)
    41   66.746 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.754 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.090 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.25999 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      16720.0  16720.0      0.7  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        365.0    365.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4335.0   4335.0      0.2  	imagem1 = np.float32(img1)
    12         1      75123.0  75123.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12532.0  12532.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12879.0  12879.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5000.0   5000.0      0.2  	dst1 = np.uint8(dst1)
    16         1      13587.0  13587.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21779.0  21779.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3004.0     63.9      0.1  	for variavel in corners1:
    21        46       7918.0    172.1      0.4  		array=np.array([variavel])
    22        46       2825.0     61.4      0.1  		matriz1.append(array)
    23         1       1171.0   1171.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     844783.0 844783.0     37.4  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        285.0    285.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80582.0  80582.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28639.0  28639.0      1.3  	imagem2 = np.float32(img2)
    30         1     573691.0 573691.0     25.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97252.0  97252.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85424.0  85424.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37329.0  37329.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76706.0  76706.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1        157.0    157.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     115795.0 115795.0      5.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       226      14745.0     65.2      0.7  	for variavel in corners2:
    39       225      38740.0    172.2      1.7  		array=np.array([variavel])
    40       225      13965.0     62.1      0.6  		matriz2.append(array)
    41         1       4848.0   4848.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      62105.0  62105.0      2.7  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       7504.0   7504.0      0.3  	matches = bf.match(des1,des2)

