Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.641 MiB   48.641 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.629 MiB    0.988 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.750 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.984 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.250 MiB    1.266 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.633 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.934 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.934 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.117 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.117 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.180 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.180 MiB    0.000 MiB   	matriz1=[]
    20   52.180 MiB    0.000 MiB   	for variavel in corners1:
    21   52.180 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.180 MiB    0.000 MiB   		matriz1.append(array)
    23   52.242 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.789 MiB    8.547 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.848 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.430 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.750 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.070 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.070 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.070 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.332 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.652 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.652 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.652 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.652 MiB    0.000 MiB   	matriz2=[]
    38   66.660 MiB    0.000 MiB   	for variavel in corners2:
    39   66.660 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.660 MiB    0.000 MiB   		matriz2.append(array)
    41   66.668 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.676 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.008 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.261 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      16987.0  16987.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        357.0    357.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3923.0   3923.0      0.2  	imagem1 = np.float32(img1)
    12         1      75896.0  75896.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13212.0  13212.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12666.0  12666.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6189.0   6189.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11551.0  11551.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22854.0  22854.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3114.0     66.3      0.1  	for variavel in corners1:
    21        46       7405.0    161.0      0.3  		array=np.array([variavel])
    22        46       2898.0     63.0      0.1  		matriz1.append(array)
    23         1       1155.0   1155.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     845489.0 845489.0     37.4  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        283.0    283.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80276.0  80276.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28316.0  28316.0      1.3  	imagem2 = np.float32(img2)
    30         1     574979.0 574979.0     25.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98108.0  98108.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84901.0  84901.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37174.0  37174.0      1.6  	dst2 = np.uint8(dst2)
    34         1      76805.0  76805.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     112956.0 112956.0      5.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       226      15482.0     68.5      0.7  	for variavel in corners2:
    39       225      38399.0    170.7      1.7  		array=np.array([variavel])
    40       225      13988.0     62.2      0.6  		matriz2.append(array)
    41         1       4722.0   4722.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      63143.0  63143.0      2.8  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       7490.0   7490.0      0.3  	matches = bf.match(des1,des2)

