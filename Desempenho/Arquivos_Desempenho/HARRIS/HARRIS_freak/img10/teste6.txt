Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.703 MiB   48.703 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.512 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.633 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.867 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.152 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.629 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.816 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.816 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.906 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.906 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.934 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.934 MiB    0.000 MiB   	matriz1=[]
    20   51.934 MiB    0.000 MiB   	for variavel in corners1:
    21   51.934 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.934 MiB    0.000 MiB   		matriz1.append(array)
    23   51.973 MiB    0.039 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.527 MiB    8.555 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.586 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.168 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.488 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.809 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.809 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.809 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.070 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.391 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.391 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.391 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.391 MiB    0.000 MiB   	matriz2=[]
    38   66.395 MiB    0.000 MiB   	for variavel in corners2:
    39   66.395 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.395 MiB    0.000 MiB   		matriz2.append(array)
    41   66.398 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.402 MiB    0.004 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.699 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.22219 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18880.0  18880.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        350.0    350.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4179.0   4179.0      0.2  	imagem1 = np.float32(img1)
    12         1      73719.0  73719.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      15067.0  15067.0      0.7  	dst1 = cv2.dilate(dst1,None)
    14         1      12358.0  12358.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5091.0   5091.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12438.0  12438.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21355.0  21355.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3003.0     63.9      0.1  	for variavel in corners1:
    21        46       7680.0    167.0      0.3  		array=np.array([variavel])
    22        46       2912.0     63.3      0.1  		matriz1.append(array)
    23         1       1284.0   1284.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847247.0 847247.0     38.1  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81827.0  81827.0      3.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26559.0  26559.0      1.2  	imagem2 = np.float32(img2)
    30         1     643322.0 643322.0     28.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98477.0  98477.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      86432.0  86432.0      3.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37933.0  37933.0      1.7  	dst2 = np.uint8(dst2)
    34         1      75916.0  75916.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      62569.0  62569.0      2.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       105       6741.0     64.2      0.3  	for variavel in corners2:
    39       104      17111.0    164.5      0.8  		array=np.array([variavel])
    40       104       6508.0     62.6      0.3  		matriz2.append(array)
    41         1       2406.0   2406.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      46169.0  46169.0      2.1  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       4100.0   4100.0      0.2  	matches = bf.match(des1,des2)

