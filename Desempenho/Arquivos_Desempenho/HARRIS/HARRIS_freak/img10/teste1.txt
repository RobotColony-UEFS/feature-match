Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.906 MiB   48.906 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.812 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.934 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.168 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.516 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.906 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.207 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.207 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.395 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.395 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.395 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.395 MiB    0.000 MiB   	matriz1=[]
    20   52.395 MiB    0.000 MiB   	for variavel in corners1:
    21   52.395 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.395 MiB    0.000 MiB   		matriz1.append(array)
    23   52.398 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.887 MiB    8.488 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.945 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.527 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.848 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.168 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.168 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.168 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.430 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.750 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.750 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.750 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.750 MiB    0.000 MiB   	matriz2=[]
    38   66.754 MiB    0.000 MiB   	for variavel in corners2:
    39   66.754 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.754 MiB    0.000 MiB   		matriz2.append(array)
    41   66.758 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.762 MiB    0.004 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.098 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.23542 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17432.0  17432.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        339.0    339.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3779.0   3779.0      0.2  	imagem1 = np.float32(img1)
    12         1      75871.0  75871.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12822.0  12822.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12267.0  12267.0      0.5  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5213.0   5213.0      0.2  	dst1 = np.uint8(dst1)
    16         1      13313.0  13313.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22383.0  22383.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3236.0     68.9      0.1  	for variavel in corners1:
    21        46       7386.0    160.6      0.3  		array=np.array([variavel])
    22        46       2860.0     62.2      0.1  		matriz1.append(array)
    23         1       1198.0   1198.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     844240.0 844240.0     37.8  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        275.0    275.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80221.0  80221.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28433.0  28433.0      1.3  	imagem2 = np.float32(img2)
    30         1     662556.0 662556.0     29.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96966.0  96966.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85548.0  85548.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37021.0  37021.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76330.0  76330.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      61999.0  61999.0      2.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       105       6854.0     65.3      0.3  	for variavel in corners2:
    39       104      17754.0    170.7      0.8  		array=np.array([variavel])
    40       104       6449.0     62.0      0.3  		matriz2.append(array)
    41         1       2082.0   2082.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      46094.0  46094.0      2.1  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       4218.0   4218.0      0.2  	matches = bf.match(des1,des2)

