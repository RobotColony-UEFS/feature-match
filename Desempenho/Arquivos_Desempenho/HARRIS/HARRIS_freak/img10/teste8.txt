Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.617 MiB   48.617 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.582 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.703 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.938 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.207 MiB    1.270 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.586 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.887 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.887 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.070 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.070 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.133 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.133 MiB    0.000 MiB   	matriz1=[]
    20   52.133 MiB    0.000 MiB   	for variavel in corners1:
    21   52.133 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.133 MiB    0.000 MiB   		matriz1.append(array)
    23   52.195 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.742 MiB    8.547 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.801 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.383 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.703 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.023 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.023 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.023 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.285 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.605 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.605 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.605 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.605 MiB    0.000 MiB   	matriz2=[]
    38   66.609 MiB    0.000 MiB   	for variavel in corners2:
    39   66.609 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.609 MiB    0.000 MiB   		matriz2.append(array)
    41   66.613 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.617 MiB    0.004 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.949 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.20397 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17298.0  17298.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        351.0    351.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4009.0   4009.0      0.2  	imagem1 = np.float32(img1)
    12         1      76011.0  76011.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13083.0  13083.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12338.0  12338.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4920.0   4920.0      0.2  	dst1 = np.uint8(dst1)
    16         1      14289.0  14289.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         82.0     82.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21213.0  21213.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         53.0     53.0      0.0  	matriz1=[]
    20        47       2974.0     63.3      0.1  	for variavel in corners1:
    21        46       7577.0    164.7      0.3  		array=np.array([variavel])
    22        46       2766.0     60.1      0.1  		matriz1.append(array)
    23         1       1240.0   1240.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     844241.0 844241.0     38.3  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        388.0    388.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79038.0  79038.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26647.0  26647.0      1.2  	imagem2 = np.float32(img2)
    30         1     638043.0 638043.0     28.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97517.0  97517.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85623.0  85623.0      3.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37153.0  37153.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76192.0  76192.0      3.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      58804.0  58804.0      2.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         96.0     96.0      0.0  	matriz2=[]
    38       105       6520.0     62.1      0.3  	for variavel in corners2:
    39       104      17692.0    170.1      0.8  		array=np.array([variavel])
    40       104       7676.0     73.8      0.3  		matriz2.append(array)
    41         1       2234.0   2234.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      43894.0  43894.0      2.0  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       3928.0   3928.0      0.2  	matches = bf.match(des1,des2)

