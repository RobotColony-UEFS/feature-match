Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.598 MiB   48.598 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.473 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.598 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.832 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.121 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.582 MiB    0.461 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.770 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.770 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.910 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.910 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.926 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.926 MiB    0.000 MiB   	matriz1=[]
    20   51.926 MiB    0.000 MiB   	for variavel in corners1:
    21   51.926 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.926 MiB    0.000 MiB   		matriz1.append(array)
    23   51.953 MiB    0.027 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.457 MiB    8.504 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.516 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.098 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.418 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.738 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.738 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.789 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.051 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.371 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.371 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.371 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.371 MiB    0.000 MiB   	matriz2=[]
    38   66.375 MiB    0.000 MiB   	for variavel in corners2:
    39   66.375 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.375 MiB    0.000 MiB   		matriz2.append(array)
    41   66.379 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.383 MiB    0.004 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.605 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.20405 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18359.0  18359.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        346.0    346.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4074.0   4074.0      0.2  	imagem1 = np.float32(img1)
    12         1      74924.0  74924.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12966.0  12966.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      13251.0  13251.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5051.0   5051.0      0.2  	dst1 = np.uint8(dst1)
    16         1      13693.0  13693.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21547.0  21547.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3232.0     68.8      0.1  	for variavel in corners1:
    21        46       7438.0    161.7      0.3  		array=np.array([variavel])
    22        46       2785.0     60.5      0.1  		matriz1.append(array)
    23         1       1256.0   1256.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     846659.0 846659.0     38.4  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        281.0    281.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78880.0  78880.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27889.0  27889.0      1.3  	imagem2 = np.float32(img2)
    30         1     631338.0 631338.0     28.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96869.0  96869.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85124.0  85124.0      3.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37090.0  37090.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76037.0  76037.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      61149.0  61149.0      2.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       105       7070.0     67.3      0.3  	for variavel in corners2:
    39       104      18436.0    177.3      0.8  		array=np.array([variavel])
    40       104       7519.0     72.3      0.3  		matriz2.append(array)
    41         1       2261.0   2261.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      43856.0  43856.0      2.0  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       4389.0   4389.0      0.2  	matches = bf.match(des1,des2)

