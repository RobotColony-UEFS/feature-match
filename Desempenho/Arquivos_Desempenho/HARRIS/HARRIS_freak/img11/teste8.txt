Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.070 MiB   49.070 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.996 MiB    0.926 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.109 MiB    0.113 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.344 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.562 MiB    1.219 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.945 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.121 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.121 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.230 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.230 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.277 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.277 MiB    0.000 MiB   	matriz1=[]
    20   52.277 MiB    0.000 MiB   	for variavel in corners1:
    21   52.277 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.277 MiB    0.000 MiB   		matriz1.append(array)
    23   52.340 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.699 MiB    8.359 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.824 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.406 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.727 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.047 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.047 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.047 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.309 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.629 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.629 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.629 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.629 MiB    0.000 MiB   	matriz2=[]
    38   66.633 MiB    0.000 MiB   	for variavel in corners2:
    39   66.633 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.633 MiB    0.000 MiB   		matriz2.append(array)
    41   66.637 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.641 MiB    0.004 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.035 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.18294 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      16952.0  16952.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        492.0    492.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4843.0   4843.0      0.2  	imagem1 = np.float32(img1)
    12         1      75414.0  75414.0      3.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12971.0  12971.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      14606.0  14606.0      0.7  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5093.0   5093.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11560.0  11560.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21900.0  21900.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         62.0     62.0      0.0  	matriz1=[]
    20        47       3151.0     67.0      0.1  	for variavel in corners1:
    21        46       7567.0    164.5      0.3  		array=np.array([variavel])
    22        46       2884.0     62.7      0.1  		matriz1.append(array)
    23         1       1223.0   1223.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847065.0 847065.0     38.8  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        377.0    377.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      74441.0  74441.0      3.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28997.0  28997.0      1.3  	imagem2 = np.float32(img2)
    30         1     575516.0 575516.0     26.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97739.0  97739.0      4.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85119.0  85119.0      3.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38847.0  38847.0      1.8  	dst2 = np.uint8(dst2)
    34         1      74582.0  74582.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      85359.0  85359.0      3.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       129       8825.0     68.4      0.4  	for variavel in corners2:
    39       128      22686.0    177.2      1.0  		array=np.array([variavel])
    40       128       8943.0     69.9      0.4  		matriz2.append(array)
    41         1       2836.0   2836.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      47942.0  47942.0      2.2  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       4720.0   4720.0      0.2  	matches = bf.match(des1,des2)

