Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.141 MiB   49.141 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   50.059 MiB    0.918 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.176 MiB    0.117 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.410 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.625 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.012 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.195 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.195 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.355 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.355 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.406 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.406 MiB    0.000 MiB   	matriz1=[]
    20   52.406 MiB    0.000 MiB   	for variavel in corners1:
    21   52.406 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.406 MiB    0.000 MiB   		matriz1.append(array)
    23   52.469 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.887 MiB    8.418 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.945 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.527 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.848 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.168 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.168 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.168 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.430 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.750 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.750 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.750 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.750 MiB    0.000 MiB   	matriz2=[]
    38   66.754 MiB    0.000 MiB   	for variavel in corners2:
    39   66.754 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.754 MiB    0.000 MiB   		matriz2.append(array)
    41   66.758 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.762 MiB    0.004 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.117 MiB    0.355 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.18018 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18102.0  18102.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        369.0    369.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3862.0   3862.0      0.2  	imagem1 = np.float32(img1)
    12         1      75170.0  75170.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14073.0  14073.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12328.0  12328.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5271.0   5271.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11554.0  11554.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20944.0  20944.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3093.0     65.8      0.1  	for variavel in corners1:
    21        46       7715.0    167.7      0.4  		array=np.array([variavel])
    22        46       2859.0     62.2      0.1  		matriz1.append(array)
    23         1       1286.0   1286.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     848969.0 848969.0     38.9  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        282.0    282.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      75787.0  75787.0      3.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26860.0  26860.0      1.2  	imagem2 = np.float32(img2)
    30         1     574735.0 574735.0     26.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96292.0  96292.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85195.0  85195.0      3.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38518.0  38518.0      1.8  	dst2 = np.uint8(dst2)
    34         1      75392.0  75392.0      3.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1        150.0    150.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      86252.0  86252.0      4.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         54.0     54.0      0.0  	matriz2=[]
    38       129       8177.0     63.4      0.4  	for variavel in corners2:
    39       128      22144.0    173.0      1.0  		array=np.array([variavel])
    40       128       8347.0     65.2      0.4  		matriz2.append(array)
    41         1       2706.0   2706.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      49049.0  49049.0      2.2  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       4503.0   4503.0      0.2  	matches = bf.match(des1,des2)

