Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.898 MiB   48.898 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.863 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.977 MiB    0.113 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.211 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.426 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.812 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.988 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.988 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.098 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.098 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.145 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.145 MiB    0.000 MiB   	matriz1=[]
    20   52.145 MiB    0.000 MiB   	for variavel in corners1:
    21   52.145 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.145 MiB    0.000 MiB   		matriz1.append(array)
    23   52.207 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.566 MiB    8.359 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.691 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.273 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.594 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.914 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.914 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.914 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.176 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.496 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.496 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.496 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.496 MiB    0.000 MiB   	matriz2=[]
    38   66.500 MiB    0.000 MiB   	for variavel in corners2:
    39   66.500 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.500 MiB    0.000 MiB   		matriz2.append(array)
    41   66.508 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.516 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.910 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.23946 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17529.0  17529.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        348.0    348.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3909.0   3909.0      0.2  	imagem1 = np.float32(img1)
    12         1      73557.0  73557.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13650.0  13650.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12553.0  12553.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5188.0   5188.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11870.0  11870.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22546.0  22546.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3255.0     69.3      0.1  	for variavel in corners1:
    21        46       7650.0    166.3      0.3  		array=np.array([variavel])
    22        46       2905.0     63.2      0.1  		matriz1.append(array)
    23         1       1377.0   1377.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847665.0 847665.0     37.9  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        282.0    282.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82682.0  82682.0      3.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26785.0  26785.0      1.2  	imagem2 = np.float32(img2)
    30         1     575776.0 575776.0     25.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97228.0  97228.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84384.0  84384.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39233.0  39233.0      1.8  	dst2 = np.uint8(dst2)
    34         1      76469.0  76469.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     107124.0 107124.0      4.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       190      12370.0     65.1      0.6  	for variavel in corners2:
    39       189      32769.0    173.4      1.5  		array=np.array([variavel])
    40       189      12224.0     64.7      0.5  		matriz2.append(array)
    41         1       4126.0   4126.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      57825.0  57825.0      2.6  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5892.0   5892.0      0.3  	matches = bf.match(des1,des2)

