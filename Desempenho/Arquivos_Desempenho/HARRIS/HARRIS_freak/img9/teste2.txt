Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.000 MiB   49.000 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.906 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.027 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.262 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.609 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.000 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.301 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.301 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.488 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.488 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.488 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.488 MiB    0.000 MiB   	matriz1=[]
    20   52.488 MiB    0.000 MiB   	for variavel in corners1:
    21   52.488 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.488 MiB    0.000 MiB   		matriz1.append(array)
    23   52.492 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.980 MiB    8.488 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   61.039 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.621 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.941 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.262 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.262 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.262 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.523 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.844 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.844 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.844 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.844 MiB    0.000 MiB   	matriz2=[]
    38   66.848 MiB    0.000 MiB   	for variavel in corners2:
    39   66.848 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.848 MiB    0.000 MiB   		matriz2.append(array)
    41   66.855 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.863 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.199 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.24186 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17152.0  17152.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        344.0    344.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4096.0   4096.0      0.2  	imagem1 = np.float32(img1)
    12         1      76043.0  76043.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13168.0  13168.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12391.0  12391.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4975.0   4975.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12604.0  12604.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21114.0  21114.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         92.0     92.0      0.0  	matriz1=[]
    20        47       4568.0     97.2      0.2  	for variavel in corners1:
    21        46       7932.0    172.4      0.4  		array=np.array([variavel])
    22        46       2891.0     62.8      0.1  		matriz1.append(array)
    23         1       1203.0   1203.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     845627.0 845627.0     37.7  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        271.0    271.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82038.0  82038.0      3.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26763.0  26763.0      1.2  	imagem2 = np.float32(img2)
    30         1     582349.0 582349.0     26.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97480.0  97480.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85458.0  85458.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37205.0  37205.0      1.7  	dst2 = np.uint8(dst2)
    34         1      77325.0  77325.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     107213.0 107213.0      4.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       190      12595.0     66.3      0.6  	for variavel in corners2:
    39       189      31880.0    168.7      1.4  		array=np.array([variavel])
    40       189      12855.0     68.0      0.6  		matriz2.append(array)
    41         1       3865.0   3865.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      54163.0  54163.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5965.0   5965.0      0.3  	matches = bf.match(des1,des2)

