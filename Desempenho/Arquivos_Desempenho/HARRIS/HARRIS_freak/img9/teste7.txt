Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.141 MiB   49.141 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   50.062 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.180 MiB    0.117 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.414 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.625 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.016 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.199 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.199 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.359 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.359 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.410 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.410 MiB    0.000 MiB   	matriz1=[]
    20   52.410 MiB    0.000 MiB   	for variavel in corners1:
    21   52.410 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.410 MiB    0.000 MiB   		matriz1.append(array)
    23   52.473 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.891 MiB    8.418 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.949 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.531 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.852 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.172 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.172 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.172 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.434 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.754 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.754 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.754 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.754 MiB    0.000 MiB   	matriz2=[]
    38   66.758 MiB    0.000 MiB   	for variavel in corners2:
    39   66.758 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.758 MiB    0.000 MiB   		matriz2.append(array)
    41   66.766 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.773 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.129 MiB    0.355 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.23513 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17087.0  17087.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        363.0    363.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3838.0   3838.0      0.2  	imagem1 = np.float32(img1)
    12         1      76238.0  76238.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13164.0  13164.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12841.0  12841.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5136.0   5136.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11479.0  11479.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21026.0  21026.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3094.0     65.8      0.1  	for variavel in corners1:
    21        46       7502.0    163.1      0.3  		array=np.array([variavel])
    22        46       3048.0     66.3      0.1  		matriz1.append(array)
    23         1       1166.0   1166.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     846570.0 846570.0     37.9  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        280.0    280.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81839.0  81839.0      3.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26804.0  26804.0      1.2  	imagem2 = np.float32(img2)
    30         1     580430.0 580430.0     26.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96769.0  96769.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85026.0  85026.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38322.0  38322.0      1.7  	dst2 = np.uint8(dst2)
    34         1      77413.0  77413.0      3.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     106174.0 106174.0      4.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       190      12296.0     64.7      0.6  	for variavel in corners2:
    39       189      31778.0    168.1      1.4  		array=np.array([variavel])
    40       189      12447.0     65.9      0.6  		matriz2.append(array)
    41         1       4018.0   4018.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      52818.0  52818.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5875.0   5875.0      0.3  	matches = bf.match(des1,des2)

