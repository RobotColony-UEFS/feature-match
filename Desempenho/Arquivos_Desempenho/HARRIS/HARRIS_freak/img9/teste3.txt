Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.703 MiB   48.703 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.508 MiB    0.805 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.629 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.863 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.152 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.625 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.812 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.812 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.902 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.902 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.930 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.930 MiB    0.000 MiB   	matriz1=[]
    20   51.930 MiB    0.000 MiB   	for variavel in corners1:
    21   51.930 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.930 MiB    0.000 MiB   		matriz1.append(array)
    23   51.969 MiB    0.039 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.523 MiB    8.555 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.582 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.164 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.484 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.805 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.805 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.805 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.066 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.387 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.387 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.387 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.387 MiB    0.000 MiB   	matriz2=[]
    38   66.391 MiB    0.000 MiB   	for variavel in corners2:
    39   66.391 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.391 MiB    0.000 MiB   		matriz2.append(array)
    41   66.398 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.406 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.703 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.30084 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17270.0  17270.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        369.0    369.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3963.0   3963.0      0.2  	imagem1 = np.float32(img1)
    12         1      75414.0  75414.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13072.0  13072.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12489.0  12489.0      0.5  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5153.0   5153.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11846.0  11846.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21176.0  21176.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3152.0     67.1      0.1  	for variavel in corners1:
    21        46       9067.0    197.1      0.4  		array=np.array([variavel])
    22        46       2947.0     64.1      0.1  		matriz1.append(array)
    23         1       1220.0   1220.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     844710.0 844710.0     36.7  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        273.0    273.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81552.0  81552.0      3.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26735.0  26735.0      1.2  	imagem2 = np.float32(img2)
    30         1     647947.0 647947.0     28.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96679.0  96679.0      4.2  	dst2 = cv2.dilate(dst2,None)
    32         1      82284.0  82284.0      3.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      40326.0  40326.0      1.8  	dst2 = np.uint8(dst2)
    34         1      75684.0  75684.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     107448.0 107448.0      4.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       190      12574.0     66.2      0.5  	for variavel in corners2:
    39       189      29927.0    158.3      1.3  		array=np.array([variavel])
    40       189      11527.0     61.0      0.5  		matriz2.append(array)
    41         1       4863.0   4863.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      54945.0  54945.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5947.0   5947.0      0.3  	matches = bf.match(des1,des2)

