Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.570 MiB   48.570 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.312 MiB    0.742 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.438 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.672 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.012 MiB    1.340 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.488 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.676 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.676 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.762 MiB    0.086 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.762 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.785 MiB    0.023 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.785 MiB    0.000 MiB   	matriz1=[]
    20   51.785 MiB    0.000 MiB   	for variavel in corners1:
    21   51.785 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.785 MiB    0.000 MiB   		matriz1.append(array)
    23   51.820 MiB    0.035 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.379 MiB    8.559 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.438 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.020 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.340 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.660 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.660 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.707 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   63.969 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.289 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.289 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.289 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.289 MiB    0.000 MiB   	matriz2=[]
    38   66.293 MiB    0.000 MiB   	for variavel in corners2:
    39   66.293 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.293 MiB    0.000 MiB   		matriz2.append(array)
    41   66.297 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.305 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.539 MiB    0.234 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.23586 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17259.0  17259.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        340.0    340.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3898.0   3898.0      0.2  	imagem1 = np.float32(img1)
    12         1      75982.0  75982.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12948.0  12948.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12419.0  12419.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4985.0   4985.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11685.0  11685.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21549.0  21549.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3047.0     64.8      0.1  	for variavel in corners1:
    21        46       8088.0    175.8      0.4  		array=np.array([variavel])
    22        46       3723.0     80.9      0.2  		matriz1.append(array)
    23         1       2331.0   2331.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     845335.0 845335.0     37.8  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        276.0    276.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80350.0  80350.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26642.0  26642.0      1.2  	imagem2 = np.float32(img2)
    30         1     632156.0 632156.0     28.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96186.0  96186.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84046.0  84046.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39092.0  39092.0      1.7  	dst2 = np.uint8(dst2)
    34         1      75183.0  75183.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      75291.0  75291.0      3.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       145      10503.0     72.4      0.5  	for variavel in corners2:
    39       144      25053.0    174.0      1.1  		array=np.array([variavel])
    40       144       9200.0     63.9      0.4  		matriz2.append(array)
    41         1       3035.0   3035.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      49075.0  49075.0      2.2  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5896.0   5896.0      0.3  	matches = bf.match(des1,des2)

