Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.898 MiB   48.898 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.781 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.906 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.141 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.492 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.879 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.117 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.117 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.242 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.242 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.242 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.242 MiB    0.000 MiB   	matriz1=[]
    20   52.242 MiB    0.000 MiB   	for variavel in corners1:
    21   52.242 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.242 MiB    0.000 MiB   		matriz1.append(array)
    23   52.246 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.730 MiB    8.484 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.789 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.371 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.691 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.012 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.012 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.012 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.273 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.594 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.594 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.594 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.594 MiB    0.000 MiB   	matriz2=[]
    38   66.598 MiB    0.000 MiB   	for variavel in corners2:
    39   66.598 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.598 MiB    0.000 MiB   		matriz2.append(array)
    41   66.602 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.609 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.945 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.23469 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17265.0  17265.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        346.0    346.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3927.0   3927.0      0.2  	imagem1 = np.float32(img1)
    12         1      76350.0  76350.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13102.0  13102.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12232.0  12232.0      0.5  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5088.0   5088.0      0.2  	dst1 = np.uint8(dst1)
    16         1      13513.0  13513.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21356.0  21356.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3593.0     76.4      0.2  	for variavel in corners1:
    21        46       8673.0    188.5      0.4  		array=np.array([variavel])
    22        46       2891.0     62.8      0.1  		matriz1.append(array)
    23         1       1219.0   1219.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     845407.0 845407.0     37.8  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        275.0    275.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80804.0  80804.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27146.0  27146.0      1.2  	imagem2 = np.float32(img2)
    30         1     625797.0 625797.0     28.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97071.0  97071.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85076.0  85076.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38306.0  38306.0      1.7  	dst2 = np.uint8(dst2)
    34         1      75904.0  75904.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      74586.0  74586.0      3.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       145       9780.0     67.4      0.4  	for variavel in corners2:
    39       144      25216.0    175.1      1.1  		array=np.array([variavel])
    40       144      10569.0     73.4      0.5  		matriz2.append(array)
    41         1       3041.0   3041.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      50582.0  50582.0      2.3  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5291.0   5291.0      0.2  	matches = bf.match(des1,des2)

