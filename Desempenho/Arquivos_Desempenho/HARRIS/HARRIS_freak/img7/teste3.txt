Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.699 MiB   48.699 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.504 MiB    0.805 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.625 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.859 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.148 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.621 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.809 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.809 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.898 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.898 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.926 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.926 MiB    0.000 MiB   	matriz1=[]
    20   51.926 MiB    0.000 MiB   	for variavel in corners1:
    21   51.926 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.926 MiB    0.000 MiB   		matriz1.append(array)
    23   51.965 MiB    0.039 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.520 MiB    8.555 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.578 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.160 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.480 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.801 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.801 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.801 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.062 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.383 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.383 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.383 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.383 MiB    0.000 MiB   	matriz2=[]
    38   66.387 MiB    0.000 MiB   	for variavel in corners2:
    39   66.387 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.387 MiB    0.000 MiB   		matriz2.append(array)
    41   66.391 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.398 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.695 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.25072 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17677.0  17677.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        367.0    367.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3961.0   3961.0      0.2  	imagem1 = np.float32(img1)
    12         1      73382.0  73382.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      15267.0  15267.0      0.7  	dst1 = cv2.dilate(dst1,None)
    14         1      12552.0  12552.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5207.0   5207.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12473.0  12473.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21165.0  21165.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3310.0     70.4      0.1  	for variavel in corners1:
    21        46       7584.0    164.9      0.3  		array=np.array([variavel])
    22        46       3232.0     70.3      0.1  		matriz1.append(array)
    23         1       1202.0   1202.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     846831.0 846831.0     37.6  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        285.0    285.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80260.0  80260.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28118.0  28118.0      1.2  	imagem2 = np.float32(img2)
    30         1     641250.0 641250.0     28.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98091.0  98091.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      84908.0  84908.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37558.0  37558.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76489.0  76489.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      75883.0  75883.0      3.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       145       9678.0     66.7      0.4  	for variavel in corners2:
    39       144      24119.0    167.5      1.1  		array=np.array([variavel])
    40       144       9310.0     64.7      0.4  		matriz2.append(array)
    41         1       4505.0   4505.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      50585.0  50585.0      2.2  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5190.0   5190.0      0.2  	matches = bf.match(des1,des2)

