Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.988 MiB   48.988 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.914 MiB    0.926 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.027 MiB    0.113 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.262 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.480 MiB    1.219 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.863 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.039 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.039 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.148 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.148 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.195 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.195 MiB    0.000 MiB   	matriz1=[]
    20   52.195 MiB    0.000 MiB   	for variavel in corners1:
    21   52.195 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.195 MiB    0.000 MiB   		matriz1.append(array)
    23   52.258 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.617 MiB    8.359 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.742 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.324 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.645 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.965 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.965 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.965 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.227 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.547 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.547 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.547 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.547 MiB    0.000 MiB   	matriz2=[]
    38   66.551 MiB    0.000 MiB   	for variavel in corners2:
    39   66.551 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.551 MiB    0.000 MiB   		matriz2.append(array)
    41   66.559 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.566 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.961 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.2269 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17214.0  17214.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        365.0    365.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3962.0   3962.0      0.2  	imagem1 = np.float32(img1)
    12         1      75790.0  75790.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12345.0  12345.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12671.0  12671.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5058.0   5058.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12570.0  12570.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20910.0  20910.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3325.0     70.7      0.1  	for variavel in corners1:
    21        46       7398.0    160.8      0.3  		array=np.array([variavel])
    22        46       2820.0     61.3      0.1  		matriz1.append(array)
    23         1       1241.0   1241.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847864.0 847864.0     38.1  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79939.0  79939.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26658.0  26658.0      1.2  	imagem2 = np.float32(img2)
    30         1     579552.0 579552.0     26.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97538.0  97538.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85354.0  85354.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37471.0  37471.0      1.7  	dst2 = np.uint8(dst2)
    34         1      77295.0  77295.0      3.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      99917.0  99917.0      4.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       179      11656.0     65.1      0.5  	for variavel in corners2:
    39       178      29976.0    168.4      1.3  		array=np.array([variavel])
    40       178      11130.0     62.5      0.5  		matriz2.append(array)
    41         1       3885.0   3885.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      55068.0  55068.0      2.5  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       7373.0   7373.0      0.3  	matches = bf.match(des1,des2)

