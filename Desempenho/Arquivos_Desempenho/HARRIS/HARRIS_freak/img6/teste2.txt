Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.828 MiB   48.828 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.645 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.809 MiB    0.164 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.043 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.328 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.758 MiB    0.430 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.945 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.945 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.043 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.043 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.078 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.078 MiB    0.000 MiB   	matriz1=[]
    20   52.078 MiB    0.000 MiB   	for variavel in corners1:
    21   52.078 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.078 MiB    0.000 MiB   		matriz1.append(array)
    23   52.082 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.445 MiB    8.363 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.504 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.086 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.406 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.727 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.727 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.727 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   63.988 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.309 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.309 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.309 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.309 MiB    0.000 MiB   	matriz2=[]
    38   66.312 MiB    0.000 MiB   	for variavel in corners2:
    39   66.312 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.312 MiB    0.000 MiB   		matriz2.append(array)
    41   66.320 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.328 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.676 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.2238 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17215.0  17215.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        344.0    344.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3771.0   3771.0      0.2  	imagem1 = np.float32(img1)
    12         1      77316.0  77316.0      3.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13067.0  13067.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12434.0  12434.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5100.0   5100.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11477.0  11477.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         94.0     94.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23529.0  23529.0      1.1  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         61.0     61.0      0.0  	matriz1=[]
    20        47       3208.0     68.3      0.1  	for variavel in corners1:
    21        46       7725.0    167.9      0.3  		array=np.array([variavel])
    22        46       2944.0     64.0      0.1  		matriz1.append(array)
    23         1       1173.0   1173.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     843939.0 843939.0     38.0  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        396.0    396.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80391.0  80391.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26712.0  26712.0      1.2  	imagem2 = np.float32(img2)
    30         1     576953.0 576953.0     25.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97239.0  97239.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      84921.0  84921.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37893.0  37893.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76338.0  76338.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     101484.0 101484.0      4.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       179      13147.0     73.4      0.6  	for variavel in corners2:
    39       178      29023.0    163.1      1.3  		array=np.array([variavel])
    40       178      12030.0     67.6      0.5  		matriz2.append(array)
    41         1       3851.0   3851.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      53512.0  53512.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       6369.0   6369.0      0.3  	matches = bf.match(des1,des2)

