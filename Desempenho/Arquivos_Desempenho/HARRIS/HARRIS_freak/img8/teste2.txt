Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.113 MiB   49.113 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   50.078 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.199 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.434 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.648 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.039 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.215 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.215 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.383 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.383 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.438 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.438 MiB    0.000 MiB   	matriz1=[]
    20   52.438 MiB    0.000 MiB   	for variavel in corners1:
    21   52.438 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.438 MiB    0.000 MiB   		matriz1.append(array)
    23   52.500 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.922 MiB    8.422 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.980 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.562 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.883 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.203 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.203 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.203 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.465 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.785 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.785 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.785 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.785 MiB    0.000 MiB   	matriz2=[]
    38   66.793 MiB    0.000 MiB   	for variavel in corners2:
    39   66.793 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.793 MiB    0.000 MiB   		matriz2.append(array)
    41   66.805 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.816 MiB    0.012 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.168 MiB    0.352 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.41488 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18327.0  18327.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        337.0    337.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3933.0   3933.0      0.2  	imagem1 = np.float32(img1)
    12         1      74819.0  74819.0      3.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13984.0  13984.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12346.0  12346.0      0.5  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4992.0   4992.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11704.0  11704.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21842.0  21842.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3162.0     67.3      0.1  	for variavel in corners1:
    21        46       7615.0    165.5      0.3  		array=np.array([variavel])
    22        46       4296.0     93.4      0.2  		matriz1.append(array)
    23         1       1228.0   1228.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847993.0 847993.0     35.1  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        338.0    338.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81113.0  81113.0      3.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26664.0  26664.0      1.1  	imagem2 = np.float32(img2)
    30         1     629395.0 629395.0     26.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97194.0  97194.0      4.0  	dst2 = cv2.dilate(dst2,None)
    32         1      84998.0  84998.0      3.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37039.0  37039.0      1.5  	dst2 = np.uint8(dst2)
    34         1      77141.0  77141.0      3.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     188785.0 188785.0      7.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       285      18578.0     65.2      0.8  	for variavel in corners2:
    39       284      47375.0    166.8      2.0  		array=np.array([variavel])
    40       284      17739.0     62.5      0.7  		matriz2.append(array)
    41         1       5789.0   5789.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      66798.0  66798.0      2.8  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       9071.0   9071.0      0.4  	matches = bf.match(des1,des2)

