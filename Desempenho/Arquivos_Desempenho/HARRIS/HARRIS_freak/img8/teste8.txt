Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.133 MiB   49.133 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   50.102 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.223 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.457 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.668 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.062 MiB    0.395 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.238 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.238 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.406 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.406 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.461 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.461 MiB    0.000 MiB   	matriz1=[]
    20   52.461 MiB    0.000 MiB   	for variavel in corners1:
    21   52.461 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.461 MiB    0.000 MiB   		matriz1.append(array)
    23   52.523 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.945 MiB    8.422 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   61.004 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.586 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.906 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.227 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.227 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.227 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.488 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.809 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.809 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.809 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.809 MiB    0.000 MiB   	matriz2=[]
    38   66.816 MiB    0.000 MiB   	for variavel in corners2:
    39   66.816 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.816 MiB    0.000 MiB   		matriz2.append(array)
    41   66.828 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.840 MiB    0.012 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.191 MiB    0.352 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.37525 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17229.0  17229.0      0.7  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        479.0    479.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3946.0   3946.0      0.2  	imagem1 = np.float32(img1)
    12         1      76447.0  76447.0      3.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13017.0  13017.0      0.5  	dst1 = cv2.dilate(dst1,None)
    14         1      12481.0  12481.0      0.5  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4966.0   4966.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11594.0  11594.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22645.0  22645.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       4244.0     90.3      0.2  	for variavel in corners1:
    21        46       7915.0    172.1      0.3  		array=np.array([variavel])
    22        46       3041.0     66.1      0.1  		matriz1.append(array)
    23         1       1228.0   1228.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     846570.0 846570.0     35.6  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        346.0    346.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81858.0  81858.0      3.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26684.0  26684.0      1.1  	imagem2 = np.float32(img2)
    30         1     584379.0 584379.0     24.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96777.0  96777.0      4.1  	dst2 = cv2.dilate(dst2,None)
    32         1      84431.0  84431.0      3.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38065.0  38065.0      1.6  	dst2 = np.uint8(dst2)
    34         1      77281.0  77281.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         87.0     87.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     189270.0 189270.0      8.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       285      20360.0     71.4      0.9  	for variavel in corners2:
    39       284      48772.0    171.7      2.1  		array=np.array([variavel])
    40       284      18033.0     63.5      0.8  		matriz2.append(array)
    41         1       5956.0   5956.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      67009.0  67009.0      2.8  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       9935.0   9935.0      0.4  	matches = bf.match(des1,des2)

