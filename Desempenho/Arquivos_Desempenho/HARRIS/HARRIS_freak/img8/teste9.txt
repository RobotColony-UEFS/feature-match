Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.055 MiB   49.055 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.867 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.031 MiB    0.164 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.266 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.551 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.926 MiB    0.375 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.109 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.109 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.211 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.211 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.250 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.250 MiB    0.000 MiB   	matriz1=[]
    20   52.250 MiB    0.000 MiB   	for variavel in corners1:
    21   52.250 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.250 MiB    0.000 MiB   		matriz1.append(array)
    23   52.254 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.613 MiB    8.359 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.734 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.316 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.637 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.957 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.957 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.957 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.219 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.539 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.539 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.539 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.539 MiB    0.000 MiB   	matriz2=[]
    38   66.547 MiB    0.000 MiB   	for variavel in corners2:
    39   66.547 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.547 MiB    0.000 MiB   		matriz2.append(array)
    41   66.559 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.570 MiB    0.012 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.855 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.35859 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18339.0  18339.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        347.0    347.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3966.0   3966.0      0.2  	imagem1 = np.float32(img1)
    12         1      73345.0  73345.0      3.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13250.0  13250.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      13868.0  13868.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4906.0   4906.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11702.0  11702.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21666.0  21666.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1        147.0    147.0      0.0  	matriz1=[]
    20        47       3091.0     65.8      0.1  	for variavel in corners1:
    21        46       7341.0    159.6      0.3  		array=np.array([variavel])
    22        46       2791.0     60.7      0.1  		matriz1.append(array)
    23         1       1388.0   1388.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     848377.0 848377.0     36.0  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        390.0    390.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80172.0  80172.0      3.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28030.0  28030.0      1.2  	imagem2 = np.float32(img2)
    30         1     577452.0 577452.0     24.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96439.0  96439.0      4.1  	dst2 = cv2.dilate(dst2,None)
    32         1      85135.0  85135.0      3.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39818.0  39818.0      1.7  	dst2 = np.uint8(dst2)
    34         1      75109.0  75109.0      3.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     185359.0 185359.0      7.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       285      18191.0     63.8      0.8  	for variavel in corners2:
    39       284      47492.0    167.2      2.0  		array=np.array([variavel])
    40       284      17615.0     62.0      0.7  		matriz2.append(array)
    41         1       7952.0   7952.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      65855.0  65855.0      2.8  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       8832.0   8832.0      0.4  	matches = bf.match(des1,des2)

