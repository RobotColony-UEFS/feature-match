Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.113 MiB   49.113 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   50.082 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.203 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.438 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.648 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.043 MiB    0.395 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.219 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.219 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.387 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.387 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.441 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.441 MiB    0.000 MiB   	matriz1=[]
    20   52.441 MiB    0.000 MiB   	for variavel in corners1:
    21   52.441 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.441 MiB    0.000 MiB   		matriz1.append(array)
    23   52.504 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.926 MiB    8.422 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.984 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.566 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.887 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.207 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.207 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.207 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.469 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.789 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.789 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.789 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.789 MiB    0.000 MiB   	matriz2=[]
    38   66.797 MiB    0.000 MiB   	for variavel in corners2:
    39   66.797 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.797 MiB    0.000 MiB   		matriz2.append(array)
    41   66.809 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.820 MiB    0.012 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.172 MiB    0.352 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.3696 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18321.0  18321.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        352.0    352.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3984.0   3984.0      0.2  	imagem1 = np.float32(img1)
    12         1      74069.0  74069.0      3.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14401.0  14401.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12366.0  12366.0      0.5  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4926.0   4926.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11628.0  11628.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         93.0     93.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21459.0  21459.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3115.0     66.3      0.1  	for variavel in corners1:
    21        46       7343.0    159.6      0.3  		array=np.array([variavel])
    22        46       2933.0     63.8      0.1  		matriz1.append(array)
    23         1       1705.0   1705.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     851249.0 851249.0     35.9  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        392.0    392.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81360.0  81360.0      3.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26837.0  26837.0      1.1  	imagem2 = np.float32(img2)
    30         1     581599.0 581599.0     24.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97229.0  97229.0      4.1  	dst2 = cv2.dilate(dst2,None)
    32         1      84662.0  84662.0      3.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38094.0  38094.0      1.6  	dst2 = np.uint8(dst2)
    34         1      77758.0  77758.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     186806.0 186806.0      7.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       285      18293.0     64.2      0.8  	for variavel in corners2:
    39       284      46778.0    164.7      2.0  		array=np.array([variavel])
    40       284      17773.0     62.6      0.8  		matriz2.append(array)
    41         1       6402.0   6402.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      67504.0  67504.0      2.8  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       9974.0   9974.0      0.4  	matches = bf.match(des1,des2)

