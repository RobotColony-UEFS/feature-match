Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.098 MiB   49.098 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   50.062 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.184 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.418 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.633 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.023 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.199 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.199 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.367 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.367 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.422 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.422 MiB    0.000 MiB   	matriz1=[]
    20   52.422 MiB    0.000 MiB   	for variavel in corners1:
    21   52.422 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.422 MiB    0.000 MiB   		matriz1.append(array)
    23   52.484 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.906 MiB    8.422 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.965 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.547 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.867 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.188 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.188 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.188 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.449 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.770 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.770 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.770 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.770 MiB    0.000 MiB   	matriz2=[]
    38   66.777 MiB    0.000 MiB   	for variavel in corners2:
    39   66.777 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.777 MiB    0.000 MiB   		matriz2.append(array)
    41   66.789 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.801 MiB    0.012 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.152 MiB    0.352 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.35902 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17174.0  17174.0      0.7  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        351.0    351.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3811.0   3811.0      0.2  	imagem1 = np.float32(img1)
    12         1      75790.0  75790.0      3.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12872.0  12872.0      0.5  	dst1 = cv2.dilate(dst1,None)
    14         1      12326.0  12326.0      0.5  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5186.0   5186.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11480.0  11480.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21683.0  21683.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3100.0     66.0      0.1  	for variavel in corners1:
    21        46       7803.0    169.6      0.3  		array=np.array([variavel])
    22        46       3151.0     68.5      0.1  		matriz1.append(array)
    23         1       1398.0   1398.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     846582.0 846582.0     35.9  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        393.0    393.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81201.0  81201.0      3.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26707.0  26707.0      1.1  	imagem2 = np.float32(img2)
    30         1     580212.0 580212.0     24.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96907.0  96907.0      4.1  	dst2 = cv2.dilate(dst2,None)
    32         1      84908.0  84908.0      3.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37299.0  37299.0      1.6  	dst2 = np.uint8(dst2)
    34         1      76847.0  76847.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     184415.0 184415.0      7.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       285      19782.0     69.4      0.8  	for variavel in corners2:
    39       284      47296.0    166.5      2.0  		array=np.array([variavel])
    40       284      17754.0     62.5      0.8  		matriz2.append(array)
    41         1       6017.0   6017.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      65881.0  65881.0      2.8  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1      10410.0  10410.0      0.4  	matches = bf.match(des1,des2)

