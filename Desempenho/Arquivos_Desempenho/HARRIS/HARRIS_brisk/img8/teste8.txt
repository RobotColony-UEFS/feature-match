Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.887 MiB   48.887 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.793 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.094 MiB   45.301 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.367 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.719 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.105 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.406 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.406 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.594 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.594 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.594 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.594 MiB    0.000 MiB   	matriz1=[]
    20   97.594 MiB    0.000 MiB   	for variavel in corners1:
    21   97.594 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.594 MiB    0.000 MiB   		matriz1.append(array)
    23   97.598 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.961 MiB    0.363 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   98.020 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.602 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.922 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.242 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.242 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.242 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.504 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.824 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.824 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.824 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.824 MiB    0.000 MiB   	matriz2=[]
    38  103.832 MiB    0.000 MiB   	for variavel in corners2:
    39  103.832 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.832 MiB    0.000 MiB   		matriz2.append(array)
    41  103.844 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.855 MiB    0.012 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.133 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.95765 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17576.0  17576.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6356008.0 6356008.0     79.9  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4007.0   4007.0      0.1  	imagem1 = np.float32(img1)
    12         1      75061.0  75061.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13549.0  13549.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12588.0  12588.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6310.0   6310.0      0.1  	dst1 = np.uint8(dst1)
    16         1      13030.0  13030.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21639.0  21639.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         99.0     99.0      0.0  	matriz1=[]
    20        47       3035.0     64.6      0.0  	for variavel in corners1:
    21        46       7784.0    169.2      0.1  		array=np.array([variavel])
    22        46       2873.0     62.5      0.0  		matriz1.append(array)
    23         1       1213.0   1213.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13277.0  13277.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        289.0    289.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80562.0  80562.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26552.0  26552.0      0.3  	imagem2 = np.float32(img2)
    30         1     625509.0 625509.0      7.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96548.0  96548.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84877.0  84877.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39767.0  39767.0      0.5  	dst2 = np.uint8(dst2)
    34         1      75286.0  75286.0      0.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     184733.0 184733.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       285      18104.0     63.5      0.2  	for variavel in corners2:
    39       284      48386.0    170.4      0.6  		array=np.array([variavel])
    40       284      17835.0     62.8      0.2  		matriz2.append(array)
    41         1       8222.0   8222.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      90546.0  90546.0      1.1  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1      12156.0  12156.0      0.2  	matches = bf.match(des1,des2)

