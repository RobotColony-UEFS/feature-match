Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.855 MiB   48.855 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.742 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.988 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.262 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.609 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.000 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.238 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.238 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.363 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.363 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.363 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.363 MiB    0.000 MiB   	matriz1=[]
    20   97.363 MiB    0.000 MiB   	for variavel in corners1:
    21   97.363 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.363 MiB    0.000 MiB   		matriz1.append(array)
    23   97.367 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.676 MiB    0.309 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.734 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.316 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.637 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.957 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.957 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.957 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.219 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.539 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.539 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.539 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.539 MiB    0.000 MiB   	matriz2=[]
    38  103.547 MiB    0.000 MiB   	for variavel in corners2:
    39  103.547 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.547 MiB    0.000 MiB   		matriz2.append(array)
    41  103.559 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.570 MiB    0.012 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.848 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.98607 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17512.0  17512.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6381526.0 6381526.0     79.9  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3988.0   3988.0      0.0  	imagem1 = np.float32(img1)
    12         1      76504.0  76504.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13008.0  13008.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12570.0  12570.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4991.0   4991.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11700.0  11700.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         93.0     93.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22401.0  22401.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3197.0     68.0      0.0  	for variavel in corners1:
    21        46       7529.0    163.7      0.1  		array=np.array([variavel])
    22        46       2882.0     62.7      0.0  		matriz1.append(array)
    23         1       1263.0   1263.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13891.0  13891.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        279.0    279.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81213.0  81213.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27891.0  27891.0      0.3  	imagem2 = np.float32(img2)
    30         1     628051.0 628051.0      7.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97418.0  97418.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85040.0  85040.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37993.0  37993.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76895.0  76895.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     185750.0 185750.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       285      18676.0     65.5      0.2  	for variavel in corners2:
    39       284      46439.0    163.5      0.6  		array=np.array([variavel])
    40       284      18058.0     63.6      0.2  		matriz2.append(array)
    41         1       5770.0   5770.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      93605.0  93605.0      1.2  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       9740.0   9740.0      0.1  	matches = bf.match(des1,des2)

