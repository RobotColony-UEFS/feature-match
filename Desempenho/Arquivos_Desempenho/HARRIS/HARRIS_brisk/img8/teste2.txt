Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.121 MiB   49.121 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.938 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.215 MiB   45.277 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.488 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.770 MiB    1.281 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.148 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.332 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.332 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.434 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.434 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.473 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.473 MiB    0.000 MiB   	matriz1=[]
    20   97.473 MiB    0.000 MiB   	for variavel in corners1:
    21   97.473 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.473 MiB    0.000 MiB   		matriz1.append(array)
    23   97.477 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.805 MiB    0.328 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.926 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.508 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.828 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.148 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.148 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.148 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.410 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.730 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.730 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.730 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.730 MiB    0.000 MiB   	matriz2=[]
    38  103.738 MiB    0.000 MiB   	for variavel in corners2:
    39  103.738 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.738 MiB    0.000 MiB   		matriz2.append(array)
    41  103.750 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.762 MiB    0.012 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.000 MiB    0.238 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.97318 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17233.0  17233.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6364411.0 6364411.0     79.8  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3952.0   3952.0      0.0  	imagem1 = np.float32(img1)
    12         1      76293.0  76293.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12965.0  12965.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12517.0  12517.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4990.0   4990.0      0.1  	dst1 = np.uint8(dst1)
    16         1      13522.0  13522.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22184.0  22184.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3211.0     68.3      0.0  	for variavel in corners1:
    21        46       7563.0    164.4      0.1  		array=np.array([variavel])
    22        46       2799.0     60.8      0.0  		matriz1.append(array)
    23         1       1090.0   1090.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13534.0  13534.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        270.0    270.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      86445.0  86445.0      1.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26630.0  26630.0      0.3  	imagem2 = np.float32(img2)
    30         1     628081.0 628081.0      7.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96200.0  96200.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84850.0  84850.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39179.0  39179.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76515.0  76515.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     184594.0 184594.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         62.0     62.0      0.0  	matriz2=[]
    38       285      18978.0     66.6      0.2  	for variavel in corners2:
    39       284      47608.0    167.6      0.6  		array=np.array([variavel])
    40       284      18740.0     66.0      0.2  		matriz2.append(array)
    41         1       5698.0   5698.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      92867.0  92867.0      1.2  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       9984.0   9984.0      0.1  	matches = bf.match(des1,des2)

