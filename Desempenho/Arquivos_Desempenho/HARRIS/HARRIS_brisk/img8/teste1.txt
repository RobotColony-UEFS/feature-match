Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.496 MiB   48.496 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.379 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.621 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   94.953 MiB    0.332 MiB   	imagem1 = np.float32(img1)
    12   96.246 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.656 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.898 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.898 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.023 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.023 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.035 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.035 MiB    0.000 MiB   	matriz1=[]
    20   97.035 MiB    0.000 MiB   	for variavel in corners1:
    21   97.035 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.035 MiB    0.000 MiB   		matriz1.append(array)
    23   97.039 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.352 MiB    0.312 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.410 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   97.992 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.312 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.633 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.633 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.688 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  100.949 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.270 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.270 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.270 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.270 MiB    0.000 MiB   	matriz2=[]
    38  103.277 MiB    0.000 MiB   	for variavel in corners2:
    39  103.277 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.277 MiB    0.000 MiB   		matriz2.append(array)
    41  103.289 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.301 MiB    0.012 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.582 MiB    0.281 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.98282 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17494.0  17494.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6381864.0 6381864.0     79.9  	brisk = cv2.BRISK_create()
    10                                           
    11         1       5677.0   5677.0      0.1  	imagem1 = np.float32(img1)
    12         1      74417.0  74417.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13040.0  13040.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      14380.0  14380.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4986.0   4986.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12550.0  12550.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20948.0  20948.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3151.0     67.0      0.0  	for variavel in corners1:
    21        46       7496.0    163.0      0.1  		array=np.array([variavel])
    22        46       2801.0     60.9      0.0  		matriz1.append(array)
    23         1       1234.0   1234.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13039.0  13039.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        279.0    279.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81246.0  81246.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26690.0  26690.0      0.3  	imagem2 = np.float32(img2)
    30         1     628103.0 628103.0      7.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96314.0  96314.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      83784.0  83784.0      1.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      40048.0  40048.0      0.5  	dst2 = np.uint8(dst2)
    34         1      75979.0  75979.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     182296.0 182296.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       285      20164.0     70.8      0.3  	for variavel in corners2:
    39       284      46733.0    164.6      0.6  		array=np.array([variavel])
    40       284      18210.0     64.1      0.2  		matriz2.append(array)
    41         1       5726.0   5726.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      93981.0  93981.0      1.2  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       9903.0   9903.0      0.1  	matches = bf.match(des1,des2)

