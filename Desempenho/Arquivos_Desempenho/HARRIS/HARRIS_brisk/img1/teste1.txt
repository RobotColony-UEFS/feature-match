Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.613 MiB   48.613 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.582 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.828 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.102 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.367 MiB    1.266 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.750 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.051 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.051 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.234 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.234 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.297 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.297 MiB    0.000 MiB   	matriz1=[]
    20   97.297 MiB    0.000 MiB   	for variavel in corners1:
    21   97.297 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.297 MiB    0.000 MiB   		matriz1.append(array)
    23   97.359 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.785 MiB    0.426 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.844 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.426 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.746 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.066 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.066 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.066 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.328 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.648 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.648 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.648 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.648 MiB    0.000 MiB   	matriz2=[]
    38  103.656 MiB    0.000 MiB   	for variavel in corners2:
    39  103.656 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.656 MiB    0.000 MiB   		matriz2.append(array)
    41  103.668 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.680 MiB    0.012 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.953 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.96197 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      16991.0  16991.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6363278.0 6363278.0     79.9  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4047.0   4047.0      0.1  	imagem1 = np.float32(img1)
    12         1      75260.0  75260.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13047.0  13047.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12547.0  12547.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5815.0   5815.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11600.0  11600.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         93.0     93.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21346.0  21346.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3255.0     69.3      0.0  	for variavel in corners1:
    21        46       8065.0    175.3      0.1  		array=np.array([variavel])
    22        46       3032.0     65.9      0.0  		matriz1.append(array)
    23         1       1111.0   1111.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      14143.0  14143.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        398.0    398.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79040.0  79040.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29119.0  29119.0      0.4  	imagem2 = np.float32(img2)
    30         1     626520.0 626520.0      7.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96199.0  96199.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85378.0  85378.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38019.0  38019.0      0.5  	dst2 = np.uint8(dst2)
    34         1      75946.0  75946.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     174578.0 174578.0      2.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       287      19354.0     67.4      0.2  	for variavel in corners2:
    39       286      48003.0    167.8      0.6  		array=np.array([variavel])
    40       286      23438.0     82.0      0.3  		matriz2.append(array)
    41         1       6750.0   6750.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      94302.0  94302.0      1.2  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1      11097.0  11097.0      0.1  	matches = bf.match(des1,des2)

