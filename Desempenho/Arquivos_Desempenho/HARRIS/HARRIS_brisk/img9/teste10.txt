Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.770 MiB   48.770 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.582 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.824 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.098 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.445 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.914 MiB    0.469 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.102 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.102 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.184 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.184 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.203 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.203 MiB    0.000 MiB   	matriz1=[]
    20   97.203 MiB    0.000 MiB   	for variavel in corners1:
    21   97.203 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.203 MiB    0.000 MiB   		matriz1.append(array)
    23   97.234 MiB    0.031 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.570 MiB    0.336 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.629 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.211 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.531 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.852 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.852 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.898 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.160 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.480 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.480 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.480 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.480 MiB    0.000 MiB   	matriz2=[]
    38  103.488 MiB    0.000 MiB   	for variavel in corners2:
    39  103.488 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.488 MiB    0.000 MiB   		matriz2.append(array)
    41  103.492 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.500 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.668 MiB    0.168 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.76966 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17697.0  17697.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6350062.0 6350062.0     81.7  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3966.0   3966.0      0.1  	imagem1 = np.float32(img1)
    12         1      75068.0  75068.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12308.0  12308.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12927.0  12927.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4960.0   4960.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11793.0  11793.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21099.0  21099.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3127.0     66.5      0.0  	for variavel in corners1:
    21        46       7645.0    166.2      0.1  		array=np.array([variavel])
    22        46       3848.0     83.7      0.0  		matriz1.append(array)
    23         1       1124.0   1124.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      14214.0  14214.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        391.0    391.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81769.0  81769.0      1.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27510.0  27510.0      0.4  	imagem2 = np.float32(img2)
    30         1     577812.0 577812.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96961.0  96961.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      83627.0  83627.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39350.0  39350.0      0.5  	dst2 = np.uint8(dst2)
    34         1      75996.0  75996.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     105425.0 105425.0      1.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       190      12234.0     64.4      0.2  	for variavel in corners2:
    39       189      30928.0    163.6      0.4  		array=np.array([variavel])
    40       189      13352.0     70.6      0.2  		matriz2.append(array)
    41         1       5409.0   5409.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      71773.0  71773.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6997.0   6997.0      0.1  	matches = bf.match(des1,des2)

