Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.559 MiB   48.559 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.301 MiB    0.742 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.547 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   94.820 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.164 MiB    1.344 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.637 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.824 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.824 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   96.910 MiB    0.086 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   96.910 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   96.934 MiB    0.023 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   96.934 MiB    0.000 MiB   	matriz1=[]
    20   96.934 MiB    0.000 MiB   	for variavel in corners1:
    21   96.934 MiB    0.000 MiB   		array=np.array([variavel])
    22   96.934 MiB    0.000 MiB   		matriz1.append(array)
    23   96.969 MiB    0.035 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.367 MiB    0.398 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.426 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.008 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.328 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.648 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.648 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.695 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  100.957 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.277 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.277 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.277 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.277 MiB    0.000 MiB   	matriz2=[]
    38  103.285 MiB    0.000 MiB   	for variavel in corners2:
    39  103.285 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.285 MiB    0.000 MiB   		matriz2.append(array)
    41  103.289 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.297 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.469 MiB    0.172 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.83254 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17009.0  17009.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6365233.0 6365233.0     81.3  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4051.0   4051.0      0.1  	imagem1 = np.float32(img1)
    12         1      75289.0  75289.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13312.0  13312.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12670.0  12670.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5095.0   5095.0      0.1  	dst1 = np.uint8(dst1)
    16         1      14150.0  14150.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21059.0  21059.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3243.0     69.0      0.0  	for variavel in corners1:
    21        46       7441.0    161.8      0.1  		array=np.array([variavel])
    22        46       2849.0     61.9      0.0  		matriz1.append(array)
    23         1       1198.0   1198.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13521.0  13521.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        286.0    286.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82428.0  82428.0      1.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26636.0  26636.0      0.3  	imagem2 = np.float32(img2)
    30         1     624565.0 624565.0      8.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97956.0  97956.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85754.0  85754.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39729.0  39729.0      0.5  	dst2 = np.uint8(dst2)
    34         1      74537.0  74537.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     104348.0 104348.0      1.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       190      12304.0     64.8      0.2  	for variavel in corners2:
    39       189      31750.0    168.0      0.4  		array=np.array([variavel])
    40       189      11552.0     61.1      0.1  		matriz2.append(array)
    41         1       4180.0   4180.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      73405.0  73405.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6719.0   6719.0      0.1  	matches = bf.match(des1,des2)

