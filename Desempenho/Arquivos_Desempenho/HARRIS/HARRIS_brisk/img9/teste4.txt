Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.988 MiB   48.988 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.918 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.215 MiB   45.297 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.488 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.707 MiB    1.219 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.090 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.266 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.266 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.375 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.375 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.422 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.422 MiB    0.000 MiB   	matriz1=[]
    20   97.422 MiB    0.000 MiB   	for variavel in corners1:
    21   97.422 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.422 MiB    0.000 MiB   		matriz1.append(array)
    23   97.426 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.699 MiB    0.273 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.824 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.406 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.727 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.047 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.047 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.047 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.309 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.629 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.629 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.629 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.629 MiB    0.000 MiB   	matriz2=[]
    38  103.637 MiB    0.000 MiB   	for variavel in corners2:
    39  103.637 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.637 MiB    0.000 MiB   		matriz2.append(array)
    41  103.641 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.648 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.988 MiB    0.340 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.77816 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      18158.0  18158.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6355797.0 6355797.0     81.7  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4079.0   4079.0      0.1  	imagem1 = np.float32(img1)
    12         1      72574.0  72574.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14078.0  14078.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      13760.0  13760.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5049.0   5049.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11992.0  11992.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21545.0  21545.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         53.0     53.0      0.0  	matriz1=[]
    20        47       3153.0     67.1      0.0  	for variavel in corners1:
    21        46       8204.0    178.3      0.1  		array=np.array([variavel])
    22        46       2831.0     61.5      0.0  		matriz1.append(array)
    23         1       1150.0   1150.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13411.0  13411.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        275.0    275.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81695.0  81695.0      1.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27524.0  27524.0      0.4  	imagem2 = np.float32(img2)
    30         1     577809.0 577809.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96820.0  96820.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85352.0  85352.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37161.0  37161.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76723.0  76723.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     106734.0 106734.0      1.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       190      12907.0     67.9      0.2  	for variavel in corners2:
    39       189      32221.0    170.5      0.4  		array=np.array([variavel])
    40       189      11598.0     61.4      0.1  		matriz2.append(array)
    41         1       4163.0   4163.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      74206.0  74206.0      1.0  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6909.0   6909.0      0.1  	matches = bf.match(des1,des2)

