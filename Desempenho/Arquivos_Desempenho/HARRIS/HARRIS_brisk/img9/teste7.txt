Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.703 MiB   48.703 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.672 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.918 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.191 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.457 MiB    1.266 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.840 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.141 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.141 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.324 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.324 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.387 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.387 MiB    0.000 MiB   	matriz1=[]
    20   97.387 MiB    0.000 MiB   	for variavel in corners1:
    21   97.387 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.387 MiB    0.000 MiB   		matriz1.append(array)
    23   97.449 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.871 MiB    0.422 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.930 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.512 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.832 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.152 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.152 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.152 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.414 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.734 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.734 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.734 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.734 MiB    0.000 MiB   	matriz2=[]
    38  103.742 MiB    0.000 MiB   	for variavel in corners2:
    39  103.742 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.742 MiB    0.000 MiB   		matriz2.append(array)
    41  103.746 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.754 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.027 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.76141 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      18257.0  18257.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6343475.0 6343475.0     81.7  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3907.0   3907.0      0.1  	imagem1 = np.float32(img1)
    12         1      74168.0  74168.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13086.0  13086.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12636.0  12636.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5227.0   5227.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11779.0  11779.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21173.0  21173.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3025.0     64.4      0.0  	for variavel in corners1:
    21        46       7494.0    162.9      0.1  		array=np.array([variavel])
    22        46       2867.0     62.3      0.0  		matriz1.append(array)
    23         1       1084.0   1084.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15449.0  15449.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        272.0    272.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80132.0  80132.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29297.0  29297.0      0.4  	imagem2 = np.float32(img2)
    30         1     574103.0 574103.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97500.0  97500.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84920.0  84920.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39486.0  39486.0      0.5  	dst2 = np.uint8(dst2)
    34         1      74957.0  74957.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     107042.0 107042.0      1.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       190      12404.0     65.3      0.2  	for variavel in corners2:
    39       189      30425.0    161.0      0.4  		array=np.array([variavel])
    40       189      11736.0     62.1      0.2  		matriz2.append(array)
    41         1       4017.0   4017.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      74046.0  74046.0      1.0  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       7163.0   7163.0      0.1  	matches = bf.match(des1,des2)

