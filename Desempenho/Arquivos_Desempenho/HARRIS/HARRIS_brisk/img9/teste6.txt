Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.875 MiB   48.875 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.844 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.090 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.367 MiB    0.277 MiB   	imagem1 = np.float32(img1)
    12   96.688 MiB    1.320 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.020 MiB    0.332 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.199 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.199 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.375 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.375 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.434 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.434 MiB    0.000 MiB   	matriz1=[]
    20   97.434 MiB    0.000 MiB   	for variavel in corners1:
    21   97.434 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.434 MiB    0.000 MiB   		matriz1.append(array)
    23   97.438 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.793 MiB    0.355 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.852 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.434 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.754 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.074 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.074 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.074 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.336 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.656 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.656 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.656 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.656 MiB    0.000 MiB   	matriz2=[]
    38  103.664 MiB    0.000 MiB   	for variavel in corners2:
    39  103.664 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.664 MiB    0.000 MiB   		matriz2.append(array)
    41  103.668 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.676 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.027 MiB    0.352 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.75791 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      16890.0  16890.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6341450.0 6341450.0     81.7  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4008.0   4008.0      0.1  	imagem1 = np.float32(img1)
    12         1      76503.0  76503.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13014.0  13014.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12547.0  12547.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5113.0   5113.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11482.0  11482.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21059.0  21059.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3345.0     71.2      0.0  	for variavel in corners1:
    21        46       9943.0    216.2      0.1  		array=np.array([variavel])
    22        46       3108.0     67.6      0.0  		matriz1.append(array)
    23         1       1191.0   1191.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12936.0  12936.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        285.0    285.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80642.0  80642.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27638.0  27638.0      0.4  	imagem2 = np.float32(img2)
    30         1     574830.0 574830.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97474.0  97474.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      83338.0  83338.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      40515.0  40515.0      0.5  	dst2 = np.uint8(dst2)
    34         1      75580.0  75580.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     103930.0 103930.0      1.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       190      12189.0     64.2      0.2  	for variavel in corners2:
    39       189      30704.0    162.5      0.4  		array=np.array([variavel])
    40       189      12759.0     67.5      0.2  		matriz2.append(array)
    41         1       3827.0   3827.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      74561.0  74561.0      1.0  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6761.0   6761.0      0.1  	matches = bf.match(des1,des2)

