Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.684 MiB   48.684 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.492 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.734 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.012 MiB    0.277 MiB   	imagem1 = np.float32(img1)
    12   96.359 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.824 MiB    0.465 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.012 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.012 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.094 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.094 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.113 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.113 MiB    0.000 MiB   	matriz1=[]
    20   97.113 MiB    0.000 MiB   	for variavel in corners1:
    21   97.113 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.113 MiB    0.000 MiB   		matriz1.append(array)
    23   97.145 MiB    0.031 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.480 MiB    0.336 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.539 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.121 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.441 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.762 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.762 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.809 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.070 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.391 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.391 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.391 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.391 MiB    0.000 MiB   	matriz2=[]
    38  103.395 MiB    0.000 MiB   	for variavel in corners2:
    39  103.395 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.395 MiB    0.000 MiB   		matriz2.append(array)
    41  103.398 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.402 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.570 MiB    0.168 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.66256 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17975.0  17975.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6334384.0 6334384.0     82.7  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3869.0   3869.0      0.1  	imagem1 = np.float32(img1)
    12         1      73463.0  73463.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13850.0  13850.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      13592.0  13592.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5202.0   5202.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11511.0  11511.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21020.0  21020.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       2960.0     63.0      0.0  	for variavel in corners1:
    21        46       7466.0    162.3      0.1  		array=np.array([variavel])
    22        46       2776.0     60.3      0.0  		matriz1.append(array)
    23         1       1206.0   1206.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13668.0  13668.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        283.0    283.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79588.0  79588.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28804.0  28804.0      0.4  	imagem2 = np.float32(img2)
    30         1     578739.0 578739.0      7.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97679.0  97679.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85015.0  85015.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39303.0  39303.0      0.5  	dst2 = np.uint8(dst2)
    34         1      74527.0  74527.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      62190.0  62190.0      0.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       105       6760.0     64.4      0.1  	for variavel in corners2:
    39       104      17286.0    166.2      0.2  		array=np.array([variavel])
    40       104       6269.0     60.3      0.1  		matriz2.append(array)
    41         1       2463.0   2463.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      56165.0  56165.0      0.7  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       4274.0   4274.0      0.1  	matches = bf.match(des1,des2)

