Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.137 MiB   49.137 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   50.105 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.352 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.625 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.836 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.230 MiB    0.395 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.406 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.406 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.574 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.574 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.629 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.629 MiB    0.000 MiB   	matriz1=[]
    20   97.629 MiB    0.000 MiB   	for variavel in corners1:
    21   97.629 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.629 MiB    0.000 MiB   		matriz1.append(array)
    23   97.633 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   98.047 MiB    0.414 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   98.105 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.688 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  101.008 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.328 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.328 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.328 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.590 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.910 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.910 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.910 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.910 MiB    0.000 MiB   	matriz2=[]
    38  103.914 MiB    0.000 MiB   	for variavel in corners2:
    39  103.914 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.914 MiB    0.000 MiB   		matriz2.append(array)
    41  103.918 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.922 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.215 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.73224 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17084.0  17084.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6354245.0 6354245.0     82.2  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4203.0   4203.0      0.1  	imagem1 = np.float32(img1)
    12         1      75428.0  75428.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13142.0  13142.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12557.0  12557.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4985.0   4985.0      0.1  	dst1 = np.uint8(dst1)
    16         1      13408.0  13408.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22021.0  22021.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3055.0     65.0      0.0  	for variavel in corners1:
    21        46       7477.0    162.5      0.1  		array=np.array([variavel])
    22        46       2853.0     62.0      0.0  		matriz1.append(array)
    23         1       1096.0   1096.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12797.0  12797.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        282.0    282.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79822.0  79822.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26692.0  26692.0      0.3  	imagem2 = np.float32(img2)
    30         1     625163.0 625163.0      8.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97464.0  97464.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      88479.0  88479.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39740.0  39740.0      0.5  	dst2 = np.uint8(dst2)
    34         1      74377.0  74377.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      62429.0  62429.0      0.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       105       6859.0     65.3      0.1  	for variavel in corners2:
    39       104      16924.0    162.7      0.2  		array=np.array([variavel])
    40       104       6514.0     62.6      0.1  		matriz2.append(array)
    41         1       3839.0   3839.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      54824.0  54824.0      0.7  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       4196.0   4196.0      0.1  	matches = bf.match(des1,des2)

