Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.090 MiB   49.090 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.961 MiB    0.871 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.250 MiB   45.289 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.527 MiB    0.277 MiB   	imagem1 = np.float32(img1)
    12   96.738 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.117 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.297 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.297 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.402 MiB    0.105 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.402 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.445 MiB    0.043 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.445 MiB    0.000 MiB   	matriz1=[]
    20   97.445 MiB    0.000 MiB   	for variavel in corners1:
    21   97.445 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.445 MiB    0.000 MiB   		matriz1.append(array)
    23   97.449 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.723 MiB    0.273 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.848 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.430 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.750 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.070 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.070 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.070 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.332 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.652 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.652 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.652 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.652 MiB    0.000 MiB   	matriz2=[]
    38  103.656 MiB    0.000 MiB   	for variavel in corners2:
    39  103.656 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.656 MiB    0.000 MiB   		matriz2.append(array)
    41  103.660 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.664 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.008 MiB    0.344 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.67202 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17227.0  17227.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6346479.0 6346479.0     82.7  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3905.0   3905.0      0.1  	imagem1 = np.float32(img1)
    12         1      74908.0  74908.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12396.0  12396.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12638.0  12638.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5099.0   5099.0      0.1  	dst1 = np.uint8(dst1)
    16         1      13559.0  13559.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22472.0  22472.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       2945.0     62.7      0.0  	for variavel in corners1:
    21        46       7389.0    160.6      0.1  		array=np.array([variavel])
    22        46       2806.0     61.0      0.0  		matriz1.append(array)
    23         1       1188.0   1188.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13306.0  13306.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        392.0    392.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79634.0  79634.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26799.0  26799.0      0.3  	imagem2 = np.float32(img2)
    30         1     578990.0 578990.0      7.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97132.0  97132.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85469.0  85469.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37268.0  37268.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76663.0  76663.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      61293.0  61293.0      0.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       105       6742.0     64.2      0.1  	for variavel in corners2:
    39       104      16871.0    162.2      0.2  		array=np.array([variavel])
    40       104       6442.0     61.9      0.1  		matriz2.append(array)
    41         1       2394.0   2394.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      55349.0  55349.0      0.7  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       3983.0   3983.0      0.1  	matches = bf.match(des1,des2)

