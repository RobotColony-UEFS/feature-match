Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.059 MiB   49.059 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   50.027 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.273 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.547 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.758 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.152 MiB    0.395 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.328 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.328 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.496 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.496 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.551 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.551 MiB    0.000 MiB   	matriz1=[]
    20   97.551 MiB    0.000 MiB   	for variavel in corners1:
    21   97.551 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.551 MiB    0.000 MiB   		matriz1.append(array)
    23   97.555 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.969 MiB    0.414 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   98.027 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.609 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.930 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.250 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.250 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.250 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.512 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.832 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.832 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.832 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.832 MiB    0.000 MiB   	matriz2=[]
    38  103.836 MiB    0.000 MiB   	for variavel in corners2:
    39  103.836 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.836 MiB    0.000 MiB   		matriz2.append(array)
    41  103.840 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.844 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.137 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.73058 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17658.0  17658.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6354116.0 6354116.0     82.2  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4621.0   4621.0      0.1  	imagem1 = np.float32(img1)
    12         1      74683.0  74683.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13044.0  13044.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      13061.0  13061.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6690.0   6690.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11621.0  11621.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21991.0  21991.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       2981.0     63.4      0.0  	for variavel in corners1:
    21        46       7546.0    164.0      0.1  		array=np.array([variavel])
    22        46       2775.0     60.3      0.0  		matriz1.append(array)
    23         1       1101.0   1101.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13037.0  13037.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        270.0    270.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80254.0  80254.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27348.0  27348.0      0.4  	imagem2 = np.float32(img2)
    30         1     626971.0 626971.0      8.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95452.0  95452.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85838.0  85838.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39543.0  39543.0      0.5  	dst2 = np.uint8(dst2)
    34         1      74901.0  74901.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      61993.0  61993.0      0.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       105       6905.0     65.8      0.1  	for variavel in corners2:
    39       104      18628.0    179.1      0.2  		array=np.array([variavel])
    40       104       6455.0     62.1      0.1  		matriz2.append(array)
    41         1       2116.0   2116.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      54404.0  54404.0      0.7  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       4297.0   4297.0      0.1  	matches = bf.match(des1,des2)

