Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.113 MiB   49.113 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.930 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.207 MiB   45.277 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.480 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.766 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.141 MiB    0.375 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.324 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.324 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.426 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.426 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.465 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.465 MiB    0.000 MiB   	matriz1=[]
    20   97.465 MiB    0.000 MiB   	for variavel in corners1:
    21   97.465 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.465 MiB    0.000 MiB   		matriz1.append(array)
    23   97.469 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.797 MiB    0.328 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.918 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.500 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.820 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.141 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.141 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.141 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.402 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.723 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.723 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.723 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.723 MiB    0.000 MiB   	matriz2=[]
    38  103.727 MiB    0.000 MiB   	for variavel in corners2:
    39  103.727 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.727 MiB    0.000 MiB   		matriz2.append(array)
    41  103.730 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.734 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.973 MiB    0.238 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.68 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      16954.0  16954.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6356390.0 6356390.0     82.8  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4200.0   4200.0      0.1  	imagem1 = np.float32(img1)
    12         1      75362.0  75362.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13079.0  13079.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12556.0  12556.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4980.0   4980.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12162.0  12162.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      24219.0  24219.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3086.0     65.7      0.0  	for variavel in corners1:
    21        46       7455.0    162.1      0.1  		array=np.array([variavel])
    22        46       2856.0     62.1      0.0  		matriz1.append(array)
    23         1       1130.0   1130.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12807.0  12807.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        278.0    278.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79904.0  79904.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26638.0  26638.0      0.3  	imagem2 = np.float32(img2)
    30         1     576959.0 576959.0      7.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96643.0  96643.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84094.0  84094.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38653.0  38653.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76607.0  76607.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      60678.0  60678.0      0.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       105       6749.0     64.3      0.1  	for variavel in corners2:
    39       104      18173.0    174.7      0.2  		array=np.array([variavel])
    40       104       6651.0     64.0      0.1  		matriz2.append(array)
    41         1       2245.0   2245.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      53873.0  53873.0      0.7  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       4338.0   4338.0      0.1  	matches = bf.match(des1,des2)

