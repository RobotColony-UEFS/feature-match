Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.711 MiB   48.711 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.523 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.766 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.039 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.391 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.855 MiB    0.465 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.043 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.043 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.125 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.125 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.145 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.145 MiB    0.000 MiB   	matriz1=[]
    20   97.145 MiB    0.000 MiB   	for variavel in corners1:
    21   97.145 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.145 MiB    0.000 MiB   		matriz1.append(array)
    23   97.176 MiB    0.031 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.512 MiB    0.336 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.570 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.152 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.473 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.793 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.793 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.840 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.102 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.422 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.422 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.422 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.422 MiB    0.000 MiB   	matriz2=[]
    38  103.426 MiB    0.000 MiB   	for variavel in corners2:
    39  103.426 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.426 MiB    0.000 MiB   		matriz2.append(array)
    41  103.434 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.438 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.605 MiB    0.168 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.70925 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      19071.0  19071.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6348394.0 6348394.0     82.3  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4018.0   4018.0      0.1  	imagem1 = np.float32(img1)
    12         1      71721.0  71721.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      15168.0  15168.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12769.0  12769.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5120.0   5120.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11835.0  11835.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         83.0     83.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21060.0  21060.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3076.0     65.4      0.0  	for variavel in corners1:
    21        46       7917.0    172.1      0.1  		array=np.array([variavel])
    22        46       2984.0     64.9      0.0  		matriz1.append(array)
    23         1       1110.0   1110.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13262.0  13262.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        284.0    284.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80630.0  80630.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28494.0  28494.0      0.4  	imagem2 = np.float32(img2)
    30         1     575651.0 575651.0      7.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96559.0  96559.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85763.0  85763.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37733.0  37733.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76336.0  76336.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      75644.0  75644.0      1.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       145       9316.0     64.2      0.1  	for variavel in corners2:
    39       144      24377.0    169.3      0.3  		array=np.array([variavel])
    40       144       8707.0     60.5      0.1  		matriz2.append(array)
    41         1       4238.0   4238.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      62303.0  62303.0      0.8  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       5429.0   5429.0      0.1  	matches = bf.match(des1,des2)

