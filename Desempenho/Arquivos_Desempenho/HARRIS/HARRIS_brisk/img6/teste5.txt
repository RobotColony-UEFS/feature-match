Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.730 MiB   48.730 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.477 MiB    0.746 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.699 MiB   45.223 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   94.977 MiB    0.277 MiB   	imagem1 = np.float32(img1)
    12   96.262 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.684 MiB    0.422 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.871 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.871 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   96.965 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   96.965 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   96.996 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   96.996 MiB    0.000 MiB   	matriz1=[]
    20   96.996 MiB    0.000 MiB   	for variavel in corners1:
    21   96.996 MiB    0.000 MiB   		array=np.array([variavel])
    22   96.996 MiB    0.000 MiB   		matriz1.append(array)
    23   97.039 MiB    0.043 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.438 MiB    0.398 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.496 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.078 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.398 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.719 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.719 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.719 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  100.980 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.301 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.301 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.301 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.301 MiB    0.000 MiB   	matriz2=[]
    38  103.305 MiB    0.000 MiB   	for variavel in corners2:
    39  103.305 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.305 MiB    0.000 MiB   		matriz2.append(array)
    41  103.312 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.320 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.559 MiB    0.238 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.91678 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17227.0  17227.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6459664.0 6459664.0     81.6  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3890.0   3890.0      0.0  	imagem1 = np.float32(img1)
    12         1      75745.0  75745.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13166.0  13166.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12624.0  12624.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4995.0   4995.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11692.0  11692.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23666.0  23666.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3130.0     66.6      0.0  	for variavel in corners1:
    21        46       7419.0    161.3      0.1  		array=np.array([variavel])
    22        46       2810.0     61.1      0.0  		matriz1.append(array)
    23         1       1100.0   1100.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12901.0  12901.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79366.0  79366.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26692.0  26692.0      0.3  	imagem2 = np.float32(img2)
    30         1     620562.0 620562.0      7.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96308.0  96308.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      88758.0  88758.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37139.0  37139.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76794.0  76794.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100202.0 100202.0      1.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       179      12094.0     67.6      0.2  	for variavel in corners2:
    39       178      31406.0    176.4      0.4  		array=np.array([variavel])
    40       178      11181.0     62.8      0.1  		matriz2.append(array)
    41         1       3836.0   3836.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      74896.0  74896.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6955.0   6955.0      0.1  	matches = bf.match(des1,des2)

