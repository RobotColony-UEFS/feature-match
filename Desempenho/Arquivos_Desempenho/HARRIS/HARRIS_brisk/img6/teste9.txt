Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.988 MiB   48.988 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.848 MiB    0.859 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.125 MiB   45.277 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.398 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.684 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.059 MiB    0.375 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.242 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.242 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.344 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.344 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.383 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.383 MiB    0.000 MiB   	matriz1=[]
    20   97.383 MiB    0.000 MiB   	for variavel in corners1:
    21   97.383 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.383 MiB    0.000 MiB   		matriz1.append(array)
    23   97.387 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.715 MiB    0.328 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.836 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.418 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.738 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.059 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.059 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.059 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.320 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.641 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.641 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.641 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.641 MiB    0.000 MiB   	matriz2=[]
    38  103.645 MiB    0.000 MiB   	for variavel in corners2:
    39  103.645 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.645 MiB    0.000 MiB   		matriz2.append(array)
    41  103.652 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.660 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.898 MiB    0.238 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.81471 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17085.0  17085.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6356906.0 6356906.0     81.3  	brisk = cv2.BRISK_create()
    10                                           
    11         1       5522.0   5522.0      0.1  	imagem1 = np.float32(img1)
    12         1      78171.0  78171.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13663.0  13663.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      14102.0  14102.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5070.0   5070.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11619.0  11619.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20801.0  20801.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3096.0     65.9      0.0  	for variavel in corners1:
    21        46       7474.0    162.5      0.1  		array=np.array([variavel])
    22        46       3126.0     68.0      0.0  		matriz1.append(array)
    23         1       1090.0   1090.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12845.0  12845.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78928.0  78928.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27654.0  27654.0      0.4  	imagem2 = np.float32(img2)
    30         1     625232.0 625232.0      8.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96442.0  96442.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      83759.0  83759.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39010.0  39010.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76488.0  76488.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100568.0 100568.0      1.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       179      11760.0     65.7      0.2  	for variavel in corners2:
    39       178      29436.0    165.4      0.4  		array=np.array([variavel])
    40       178      11347.0     63.7      0.1  		matriz2.append(array)
    41         1       3465.0   3465.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      72483.0  72483.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       7011.0   7011.0      0.1  	matches = bf.match(des1,des2)

