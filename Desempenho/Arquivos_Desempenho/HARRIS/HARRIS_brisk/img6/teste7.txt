Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.598 MiB   48.598 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.473 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.715 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   94.988 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.277 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.738 MiB    0.461 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.926 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.926 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.066 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.066 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.082 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.082 MiB    0.000 MiB   	matriz1=[]
    20   97.082 MiB    0.000 MiB   	for variavel in corners1:
    21   97.082 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.082 MiB    0.000 MiB   		matriz1.append(array)
    23   97.109 MiB    0.027 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.445 MiB    0.336 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.504 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.086 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.406 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.727 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.727 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.777 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.039 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.359 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.359 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.359 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.359 MiB    0.000 MiB   	matriz2=[]
    38  103.363 MiB    0.000 MiB   	for variavel in corners2:
    39  103.363 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.363 MiB    0.000 MiB   		matriz2.append(array)
    41  103.371 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.379 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.543 MiB    0.164 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.822 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17254.0  17254.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6363068.0 6363068.0     81.3  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4042.0   4042.0      0.1  	imagem1 = np.float32(img1)
    12         1      74643.0  74643.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13619.0  13619.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12626.0  12626.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       7403.0   7403.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11836.0  11836.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20991.0  20991.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3027.0     64.4      0.0  	for variavel in corners1:
    21        46       7701.0    167.4      0.1  		array=np.array([variavel])
    22        46       2832.0     61.6      0.0  		matriz1.append(array)
    23         1       1332.0   1332.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13080.0  13080.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        268.0    268.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80156.0  80156.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26665.0  26665.0      0.3  	imagem2 = np.float32(img2)
    30         1     628111.0 628111.0      8.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95091.0  95091.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85850.0  85850.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39909.0  39909.0      0.5  	dst2 = np.uint8(dst2)
    34         1      74339.0  74339.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      99099.0  99099.0      1.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       179      11551.0     64.5      0.1  	for variavel in corners2:
    39       178      30335.0    170.4      0.4  		array=np.array([variavel])
    40       178      12137.0     68.2      0.2  		matriz2.append(array)
    41         1       3689.0   3689.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      74070.0  74070.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6996.0   6996.0      0.1  	matches = bf.match(des1,des2)

