Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.090 MiB   49.090 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.965 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.254 MiB   45.289 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.527 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.738 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.121 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.301 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.301 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.406 MiB    0.105 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.406 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.449 MiB    0.043 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.449 MiB    0.000 MiB   	matriz1=[]
    20   97.449 MiB    0.000 MiB   	for variavel in corners1:
    21   97.449 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.449 MiB    0.000 MiB   		matriz1.append(array)
    23   97.453 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.727 MiB    0.273 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.852 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.434 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.754 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.074 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.074 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.074 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.336 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.656 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.656 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.656 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.656 MiB    0.000 MiB   	matriz2=[]
    38  103.660 MiB    0.000 MiB   	for variavel in corners2:
    39  103.660 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.660 MiB    0.000 MiB   		matriz2.append(array)
    41  103.668 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.676 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.020 MiB    0.344 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.84131 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17484.0  17484.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6388947.0 6388947.0     81.5  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4133.0   4133.0      0.1  	imagem1 = np.float32(img1)
    12         1      72297.0  72297.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      16087.0  16087.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12755.0  12755.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4977.0   4977.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11571.0  11571.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21098.0  21098.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       2982.0     63.4      0.0  	for variavel in corners1:
    21        46       7497.0    163.0      0.1  		array=np.array([variavel])
    22        46       2865.0     62.3      0.0  		matriz1.append(array)
    23         1       1231.0   1231.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12935.0  12935.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        271.0    271.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79309.0  79309.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27275.0  27275.0      0.3  	imagem2 = np.float32(img2)
    30         1     624170.0 624170.0      8.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96411.0  96411.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      83392.0  83392.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38929.0  38929.0      0.5  	dst2 = np.uint8(dst2)
    34         1      77269.0  77269.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     101408.0 101408.0      1.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       179      11699.0     65.4      0.1  	for variavel in corners2:
    39       178      28880.0    162.2      0.4  		array=np.array([variavel])
    40       178      11086.0     62.3      0.1  		matriz2.append(array)
    41         1       3993.0   3993.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      73162.0  73162.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6920.0   6920.0      0.1  	matches = bf.match(des1,des2)

