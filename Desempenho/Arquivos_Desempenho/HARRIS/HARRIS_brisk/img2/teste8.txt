Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.547 MiB   48.547 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.426 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.668 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.004 MiB    0.336 MiB   	imagem1 = np.float32(img1)
    12   96.293 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.703 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.945 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.945 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.070 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.070 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.082 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.082 MiB    0.000 MiB   	matriz1=[]
    20   97.082 MiB    0.000 MiB   	for variavel in corners1:
    21   97.082 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.082 MiB    0.000 MiB   		matriz1.append(array)
    23   97.086 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.398 MiB    0.312 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.457 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.039 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.359 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.680 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.680 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.734 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  100.996 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.316 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.316 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.316 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.316 MiB    0.000 MiB   	matriz2=[]
    38  103.324 MiB    0.000 MiB   	for variavel in corners2:
    39  103.324 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.324 MiB    0.000 MiB   		matriz2.append(array)
    41  103.332 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.340 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.621 MiB    0.281 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.87372 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17816.0  17816.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6370234.0 6370234.0     80.9  	brisk = cv2.BRISK_create()
    10                                           
    11         1       5109.0   5109.0      0.1  	imagem1 = np.float32(img1)
    12         1      73092.0  73092.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13790.0  13790.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      13882.0  13882.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4945.0   4945.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11722.0  11722.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         99.0     99.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21516.0  21516.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         63.0     63.0      0.0  	matriz1=[]
    20        47       4236.0     90.1      0.1  	for variavel in corners1:
    21        46       7701.0    167.4      0.1  		array=np.array([variavel])
    22        46       3030.0     65.9      0.0  		matriz1.append(array)
    23         1       1138.0   1138.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12875.0  12875.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        280.0    280.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81352.0  81352.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27466.0  27466.0      0.3  	imagem2 = np.float32(img2)
    30         1     625461.0 625461.0      7.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96334.0  96334.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84209.0  84209.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38889.0  38889.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76646.0  76646.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114352.0 114352.0      1.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         62.0     62.0      0.0  	matriz2=[]
    38       226      15309.0     67.7      0.2  	for variavel in corners2:
    39       225      40183.0    178.6      0.5  		array=np.array([variavel])
    40       225      15287.0     67.9      0.2  		matriz2.append(array)
    41         1       4814.0   4814.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      83355.0  83355.0      1.1  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       8385.0   8385.0      0.1  	matches = bf.match(des1,des2)

