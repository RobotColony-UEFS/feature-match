Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.043 MiB   49.043 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.973 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.270 MiB   45.297 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.543 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.758 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.145 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.320 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.320 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.430 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.430 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.477 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.477 MiB    0.000 MiB   	matriz1=[]
    20   97.477 MiB    0.000 MiB   	for variavel in corners1:
    21   97.477 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.477 MiB    0.000 MiB   		matriz1.append(array)
    23   97.480 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.754 MiB    0.273 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.879 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.461 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.781 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.102 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.102 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.102 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.363 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.684 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.684 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.684 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.684 MiB    0.000 MiB   	matriz2=[]
    38  103.691 MiB    0.000 MiB   	for variavel in corners2:
    39  103.691 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.691 MiB    0.000 MiB   		matriz2.append(array)
    41  103.699 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.707 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.047 MiB    0.340 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.87689 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17336.0  17336.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6370655.0 6370655.0     80.9  	brisk = cv2.BRISK_create()
    10                                           
    11         1       5159.0   5159.0      0.1  	imagem1 = np.float32(img1)
    12         1      74191.0  74191.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13081.0  13081.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      14469.0  14469.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5939.0   5939.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11669.0  11669.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21023.0  21023.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3063.0     65.2      0.0  	for variavel in corners1:
    21        46       7223.0    157.0      0.1  		array=np.array([variavel])
    22        46       2861.0     62.2      0.0  		matriz1.append(array)
    23         1       1213.0   1213.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13072.0  13072.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        330.0    330.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80873.0  80873.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26709.0  26709.0      0.3  	imagem2 = np.float32(img2)
    30         1     634954.0 634954.0      8.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95649.0  95649.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84140.0  84140.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39517.0  39517.0      0.5  	dst2 = np.uint8(dst2)
    34         1      75960.0  75960.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114695.0 114695.0      1.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       226      14396.0     63.7      0.2  	for variavel in corners2:
    39       225      38026.0    169.0      0.5  		array=np.array([variavel])
    40       225      13859.0     61.6      0.2  		matriz2.append(array)
    41         1       4694.0   4694.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      82622.0  82622.0      1.0  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       9223.0   9223.0      0.1  	matches = bf.match(des1,des2)

