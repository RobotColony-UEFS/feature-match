Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.902 MiB   48.902 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.785 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.031 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.309 MiB    0.277 MiB   	imagem1 = np.float32(img1)
    12   96.656 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.043 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.281 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.281 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.406 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.406 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.406 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.406 MiB    0.000 MiB   	matriz1=[]
    20   97.406 MiB    0.000 MiB   	for variavel in corners1:
    21   97.406 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.406 MiB    0.000 MiB   		matriz1.append(array)
    23   97.410 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.719 MiB    0.309 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.777 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.359 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.680 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.000 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.000 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.000 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.262 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.582 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.582 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.582 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.582 MiB    0.000 MiB   	matriz2=[]
    38  103.590 MiB    0.000 MiB   	for variavel in corners2:
    39  103.590 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.590 MiB    0.000 MiB   		matriz2.append(array)
    41  103.602 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.613 MiB    0.012 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.891 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.96736 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17913.0  17913.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6370091.0 6370091.0     80.0  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3860.0   3860.0      0.0  	imagem1 = np.float32(img1)
    12         1      75955.0  75955.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12962.0  12962.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12313.0  12313.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5193.0   5193.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11812.0  11812.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22767.0  22767.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3059.0     65.1      0.0  	for variavel in corners1:
    21        46       8911.0    193.7      0.1  		array=np.array([variavel])
    22        46       2838.0     61.7      0.0  		matriz1.append(array)
    23         1       1129.0   1129.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13146.0  13146.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80751.0  80751.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26600.0  26600.0      0.3  	imagem2 = np.float32(img2)
    30         1     630902.0 630902.0      7.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97386.0  97386.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85394.0  85394.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38928.0  38928.0      0.5  	dst2 = np.uint8(dst2)
    34         1      75759.0  75759.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     182518.0 182518.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       273      18069.0     66.2      0.2  	for variavel in corners2:
    39       272      46259.0    170.1      0.6  		array=np.array([variavel])
    40       272      17122.0     62.9      0.2  		matriz2.append(array)
    41         1       5503.0   5503.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      90228.0  90228.0      1.1  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       9429.0   9429.0      0.1  	matches = bf.match(des1,des2)

