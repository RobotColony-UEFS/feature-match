Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.797 MiB   48.797 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.613 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.883 MiB   45.270 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.156 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.445 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.871 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.059 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.059 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.156 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.156 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.191 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.191 MiB    0.000 MiB   	matriz1=[]
    20   97.191 MiB    0.000 MiB   	for variavel in corners1:
    21   97.191 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.191 MiB    0.000 MiB   		matriz1.append(array)
    23   97.195 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.465 MiB    0.270 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.523 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.105 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.426 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.746 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.746 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.746 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.008 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.328 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.328 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.328 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.328 MiB    0.000 MiB   	matriz2=[]
    38  103.332 MiB    0.000 MiB   	for variavel in corners2:
    39  103.332 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.332 MiB    0.000 MiB   		matriz2.append(array)
    41  103.340 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.348 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.652 MiB    0.305 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.84118 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      19239.0  19239.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6376932.0 6376932.0     81.3  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4001.0   4001.0      0.1  	imagem1 = np.float32(img1)
    12         1      75717.0  75717.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13737.0  13737.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      15812.0  15812.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5052.0   5052.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11717.0  11717.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22597.0  22597.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3110.0     66.2      0.0  	for variavel in corners1:
    21        46       7538.0    163.9      0.1  		array=np.array([variavel])
    22        46       2827.0     61.5      0.0  		matriz1.append(array)
    23         1       1090.0   1090.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13045.0  13045.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        283.0    283.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82052.0  82052.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26812.0  26812.0      0.3  	imagem2 = np.float32(img2)
    30         1     629044.0 629044.0      8.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97377.0  97377.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84353.0  84353.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      40202.0  40202.0      0.5  	dst2 = np.uint8(dst2)
    34         1      74420.0  74420.0      0.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      90412.0  90412.0      1.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       184      12399.0     67.4      0.2  	for variavel in corners2:
    39       183      32997.0    180.3      0.4  		array=np.array([variavel])
    40       183      11483.0     62.7      0.1  		matriz2.append(array)
    41         1       3804.0   3804.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      75835.0  75835.0      1.0  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       7006.0   7006.0      0.1  	matches = bf.match(des1,des2)

