Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.586 MiB   48.586 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.465 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.707 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.043 MiB    0.336 MiB   	imagem1 = np.float32(img1)
    12   96.332 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.742 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.984 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.984 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.109 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.109 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.121 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.121 MiB    0.000 MiB   	matriz1=[]
    20   97.121 MiB    0.000 MiB   	for variavel in corners1:
    21   97.121 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.121 MiB    0.000 MiB   		matriz1.append(array)
    23   97.125 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.438 MiB    0.312 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.496 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.078 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.398 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.719 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.719 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.773 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.035 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.355 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.355 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.355 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.355 MiB    0.000 MiB   	matriz2=[]
    38  103.359 MiB    0.000 MiB   	for variavel in corners2:
    39  103.359 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.359 MiB    0.000 MiB   		matriz2.append(array)
    41  103.367 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.375 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.656 MiB    0.281 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.9158 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      18885.0  18885.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6455190.0 6455190.0     81.5  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3908.0   3908.0      0.0  	imagem1 = np.float32(img1)
    12         1      78157.0  78157.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13255.0  13255.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12695.0  12695.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5088.0   5088.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11406.0  11406.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21649.0  21649.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3050.0     64.9      0.0  	for variavel in corners1:
    21        46       8765.0    190.5      0.1  		array=np.array([variavel])
    22        46       3261.0     70.9      0.0  		matriz1.append(array)
    23         1       1346.0   1346.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13852.0  13852.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        278.0    278.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81180.0  81180.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27637.0  27637.0      0.3  	imagem2 = np.float32(img2)
    30         1     626604.0 626604.0      7.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96851.0  96851.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      86527.0  86527.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37085.0  37085.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76698.0  76698.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      91889.0  91889.0      1.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       184      12590.0     68.4      0.2  	for variavel in corners2:
    39       183      31068.0    169.8      0.4  		array=np.array([variavel])
    40       183      11743.0     64.2      0.1  		matriz2.append(array)
    41         1       4046.0   4046.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      73959.0  73959.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6851.0   6851.0      0.1  	matches = bf.match(des1,des2)

