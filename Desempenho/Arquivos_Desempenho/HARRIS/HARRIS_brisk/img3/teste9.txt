Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.773 MiB   48.773 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.586 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.828 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.102 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.453 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.918 MiB    0.465 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.105 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.105 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.188 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.188 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.207 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.207 MiB    0.000 MiB   	matriz1=[]
    20   97.207 MiB    0.000 MiB   	for variavel in corners1:
    21   97.207 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.207 MiB    0.000 MiB   		matriz1.append(array)
    23   97.238 MiB    0.031 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.574 MiB    0.336 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.633 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.215 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.535 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.855 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.855 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.902 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.164 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.484 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.484 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.484 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.484 MiB    0.000 MiB   	matriz2=[]
    38  103.488 MiB    0.000 MiB   	for variavel in corners2:
    39  103.488 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.488 MiB    0.000 MiB   		matriz2.append(array)
    41  103.496 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.504 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.672 MiB    0.168 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.92179 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17107.0  17107.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6469508.0 6469508.0     81.7  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4042.0   4042.0      0.1  	imagem1 = np.float32(img1)
    12         1      75418.0  75418.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13110.0  13110.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12433.0  12433.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5477.0   5477.0      0.1  	dst1 = np.uint8(dst1)
    16         1      13148.0  13148.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21943.0  21943.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1        100.0    100.0      0.0  	matriz1=[]
    20        47       3195.0     68.0      0.0  	for variavel in corners1:
    21        46       7491.0    162.8      0.1  		array=np.array([variavel])
    22        46       3009.0     65.4      0.0  		matriz1.append(array)
    23         1       1131.0   1131.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12967.0  12967.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        383.0    383.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      83830.0  83830.0      1.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27733.0  27733.0      0.4  	imagem2 = np.float32(img2)
    30         1     621641.0 621641.0      7.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96119.0  96119.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84725.0  84725.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39053.0  39053.0      0.5  	dst2 = np.uint8(dst2)
    34         1      75175.0  75175.0      0.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1        131.0    131.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      90926.0  90926.0      1.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       184      12468.0     67.8      0.2  	for variavel in corners2:
    39       183      32106.0    175.4      0.4  		array=np.array([variavel])
    40       183      11871.0     64.9      0.1  		matriz2.append(array)
    41         1       4098.0   4098.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      74305.0  74305.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6992.0   6992.0      0.1  	matches = bf.match(des1,des2)

