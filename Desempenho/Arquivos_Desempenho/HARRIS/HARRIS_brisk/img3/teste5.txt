Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.523 MiB   48.523 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.406 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.648 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   94.980 MiB    0.332 MiB   	imagem1 = np.float32(img1)
    12   96.273 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.684 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.926 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.926 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.051 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.051 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.062 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.062 MiB    0.000 MiB   	matriz1=[]
    20   97.062 MiB    0.000 MiB   	for variavel in corners1:
    21   97.062 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.062 MiB    0.000 MiB   		matriz1.append(array)
    23   97.066 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.379 MiB    0.312 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.438 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.020 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.340 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.660 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.660 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.715 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  100.977 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.297 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.297 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.297 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.297 MiB    0.000 MiB   	matriz2=[]
    38  103.301 MiB    0.000 MiB   	for variavel in corners2:
    39  103.301 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.301 MiB    0.000 MiB   		matriz2.append(array)
    41  103.309 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.316 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.598 MiB    0.281 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.91801 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      18519.0  18519.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6454798.0 6454798.0     81.5  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3884.0   3884.0      0.0  	imagem1 = np.float32(img1)
    12         1      73713.0  73713.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14982.0  14982.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      13518.0  13518.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4982.0   4982.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11696.0  11696.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21876.0  21876.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3037.0     64.6      0.0  	for variavel in corners1:
    21        46       7454.0    162.0      0.1  		array=np.array([variavel])
    22        46       2991.0     65.0      0.0  		matriz1.append(array)
    23         1       1056.0   1056.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12906.0  12906.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        281.0    281.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      87017.0  87017.0      1.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28537.0  28537.0      0.4  	imagem2 = np.float32(img2)
    30         1     627454.0 627454.0      7.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97037.0  97037.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84458.0  84458.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37971.0  37971.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76437.0  76437.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      94386.0  94386.0      1.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       184      12195.0     66.3      0.2  	for variavel in corners2:
    39       183      29556.0    161.5      0.4  		array=np.array([variavel])
    40       183      11518.0     62.9      0.1  		matriz2.append(array)
    41         1       4843.0   4843.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      73339.0  73339.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       7276.0   7276.0      0.1  	matches = bf.match(des1,des2)

