Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.172 MiB   49.172 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   50.094 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.398 MiB   45.305 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.672 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.883 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.273 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.457 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.457 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.617 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.617 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.668 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.668 MiB    0.000 MiB   	matriz1=[]
    20   97.668 MiB    0.000 MiB   	for variavel in corners1:
    21   97.668 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.668 MiB    0.000 MiB   		matriz1.append(array)
    23   97.672 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   98.023 MiB    0.352 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   98.082 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.664 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.984 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.305 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.305 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.305 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.566 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.887 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.887 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.887 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.887 MiB    0.000 MiB   	matriz2=[]
    38  103.891 MiB    0.000 MiB   	for variavel in corners2:
    39  103.891 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.891 MiB    0.000 MiB   		matriz2.append(array)
    41  103.895 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.898 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.195 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.86084 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17250.0  17250.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6454201.0 6454201.0     82.1  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4118.0   4118.0      0.1  	imagem1 = np.float32(img1)
    12         1      76057.0  76057.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13034.0  13034.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12484.0  12484.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4901.0   4901.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11718.0  11718.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23851.0  23851.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3023.0     64.3      0.0  	for variavel in corners1:
    21        46       7298.0    158.7      0.1  		array=np.array([variavel])
    22        46       2818.0     61.3      0.0  		matriz1.append(array)
    23         1       1093.0   1093.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12930.0  12930.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        276.0    276.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76156.0  76156.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26978.0  26978.0      0.3  	imagem2 = np.float32(img2)
    30         1     622173.0 622173.0      7.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95968.0  95968.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85528.0  85528.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37065.0  37065.0      0.5  	dst2 = np.uint8(dst2)
    34         1      77389.0  77389.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      87642.0  87642.0      1.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       129       8129.0     63.0      0.1  	for variavel in corners2:
    39       128      20397.0    159.4      0.3  		array=np.array([variavel])
    40       128       7702.0     60.2      0.1  		matriz2.append(array)
    41         1       4493.0   4493.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      60795.0  60795.0      0.8  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       5094.0   5094.0      0.1  	matches = bf.match(des1,des2)

