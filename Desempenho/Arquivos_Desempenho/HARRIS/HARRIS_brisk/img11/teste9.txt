Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.617 MiB   48.617 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.586 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.832 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.105 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.375 MiB    1.270 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.754 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.055 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.055 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.238 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.238 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.301 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.301 MiB    0.000 MiB   	matriz1=[]
    20   97.301 MiB    0.000 MiB   	for variavel in corners1:
    21   97.301 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.301 MiB    0.000 MiB   		matriz1.append(array)
    23   97.363 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.785 MiB    0.422 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.844 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.426 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.746 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.066 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.066 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.066 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.328 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.648 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.648 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.648 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.648 MiB    0.000 MiB   	matriz2=[]
    38  103.652 MiB    0.000 MiB   	for variavel in corners2:
    39  103.652 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.652 MiB    0.000 MiB   		matriz2.append(array)
    41  103.656 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.660 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.934 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.75151 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17262.0  17262.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6345697.0 6345697.0     81.9  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4241.0   4241.0      0.1  	imagem1 = np.float32(img1)
    12         1      75965.0  75965.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13137.0  13137.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12546.0  12546.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5090.0   5090.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11715.0  11715.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20863.0  20863.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3203.0     68.1      0.0  	for variavel in corners1:
    21        46       9725.0    211.4      0.1  		array=np.array([variavel])
    22        46       2988.0     65.0      0.0  		matriz1.append(array)
    23         1       1166.0   1166.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12794.0  12794.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        276.0    276.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76127.0  76127.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26797.0  26797.0      0.3  	imagem2 = np.float32(img2)
    30         1     618388.0 618388.0      8.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96092.0  96092.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85658.0  85658.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37031.0  37031.0      0.5  	dst2 = np.uint8(dst2)
    34         1      79935.0  79935.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      86755.0  86755.0      1.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       129       8365.0     64.8      0.1  	for variavel in corners2:
    39       128      20792.0    162.4      0.3  		array=np.array([variavel])
    40       128       7791.0     60.9      0.1  		matriz2.append(array)
    41         1       2919.0   2919.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      62351.0  62351.0      0.8  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       5556.0   5556.0      0.1  	matches = bf.match(des1,des2)

