Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.004 MiB   49.004 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.918 MiB    0.914 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.207 MiB   45.289 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.480 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.691 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.074 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.254 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.254 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.359 MiB    0.105 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.359 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.402 MiB    0.043 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.402 MiB    0.000 MiB   	matriz1=[]
    20   97.402 MiB    0.000 MiB   	for variavel in corners1:
    21   97.402 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.402 MiB    0.000 MiB   		matriz1.append(array)
    23   97.406 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.680 MiB    0.273 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.805 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.387 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.707 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.027 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.027 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.027 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.289 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.609 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.609 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.609 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.609 MiB    0.000 MiB   	matriz2=[]
    38  103.613 MiB    0.000 MiB   	for variavel in corners2:
    39  103.613 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.613 MiB    0.000 MiB   		matriz2.append(array)
    41  103.617 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.621 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.965 MiB    0.344 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.82462 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17154.0  17154.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6461813.0 6461813.0     82.6  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4128.0   4128.0      0.1  	imagem1 = np.float32(img1)
    12         1      75401.0  75401.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12392.0  12392.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12627.0  12627.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5100.0   5100.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11782.0  11782.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23505.0  23505.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       2988.0     63.6      0.0  	for variavel in corners1:
    21        46       7376.0    160.3      0.1  		array=np.array([variavel])
    22        46       2878.0     62.6      0.0  		matriz1.append(array)
    23         1       1065.0   1065.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13419.0  13419.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        269.0    269.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76757.0  76757.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27055.0  27055.0      0.3  	imagem2 = np.float32(img2)
    30         1     577027.0 577027.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96757.0  96757.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84085.0  84085.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38460.0  38460.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76549.0  76549.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      87385.0  87385.0      1.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       129       8407.0     65.2      0.1  	for variavel in corners2:
    39       128      20726.0    161.9      0.3  		array=np.array([variavel])
    40       128       8463.0     66.1      0.1  		matriz2.append(array)
    41         1       2745.0   2745.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      62930.0  62930.0      0.8  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       5103.0   5103.0      0.1  	matches = bf.match(des1,des2)

