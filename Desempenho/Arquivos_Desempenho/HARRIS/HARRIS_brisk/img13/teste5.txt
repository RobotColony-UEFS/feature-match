Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.812 MiB   48.812 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.629 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.898 MiB   45.270 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.172 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.457 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.887 MiB    0.430 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.074 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.074 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.172 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.172 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.207 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.207 MiB    0.000 MiB   	matriz1=[]
    20   97.207 MiB    0.000 MiB   	for variavel in corners1:
    21   97.207 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.207 MiB    0.000 MiB   		matriz1.append(array)
    23   97.211 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.480 MiB    0.270 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.539 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.121 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.441 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.762 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.762 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.762 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.023 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.344 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.344 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.344 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.344 MiB    0.000 MiB   	matriz2=[]
    38  103.348 MiB    0.000 MiB   	for variavel in corners2:
    39  103.348 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.348 MiB    0.000 MiB   		matriz2.append(array)
    41  103.355 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.363 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.668 MiB    0.305 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.76918 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      19164.0  19164.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6345673.0 6345673.0     81.7  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3994.0   3994.0      0.1  	imagem1 = np.float32(img1)
    12         1      75208.0  75208.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13061.0  13061.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12369.0  12369.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5185.0   5185.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11595.0  11595.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21823.0  21823.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3189.0     67.9      0.0  	for variavel in corners1:
    21        46       7468.0    162.3      0.1  		array=np.array([variavel])
    22        46       2837.0     61.7      0.0  		matriz1.append(array)
    23         1       1502.0   1502.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      14580.0  14580.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        275.0    275.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78990.0  78990.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28401.0  28401.0      0.4  	imagem2 = np.float32(img2)
    30         1     579607.0 579607.0      7.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96067.0  96067.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      83854.0  83854.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39940.0  39940.0      0.5  	dst2 = np.uint8(dst2)
    34         1      74610.0  74610.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1        130.0    130.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114142.0 114142.0      1.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       180      12564.0     69.8      0.2  	for variavel in corners2:
    39       179      29433.0    164.4      0.4  		array=np.array([variavel])
    40       179      11563.0     64.6      0.1  		matriz2.append(array)
    41         1       3895.0   3895.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      70849.0  70849.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       7009.0   7009.0      0.1  	matches = bf.match(des1,des2)

