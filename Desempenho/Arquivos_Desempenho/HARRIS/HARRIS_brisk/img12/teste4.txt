Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.730 MiB   48.730 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.480 MiB    0.750 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.703 MiB   45.223 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   94.977 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.262 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.688 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.875 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.875 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   96.969 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   96.969 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.000 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.000 MiB    0.000 MiB   	matriz1=[]
    20   97.000 MiB    0.000 MiB   	for variavel in corners1:
    21   97.000 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.000 MiB    0.000 MiB   		matriz1.append(array)
    23   97.043 MiB    0.043 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.441 MiB    0.398 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.500 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.082 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.402 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.723 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.723 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.723 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  100.984 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.305 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.305 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.305 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.305 MiB    0.000 MiB   	matriz2=[]
    38  103.309 MiB    0.000 MiB   	for variavel in corners2:
    39  103.309 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.309 MiB    0.000 MiB   		matriz2.append(array)
    41  103.316 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.320 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.559 MiB    0.238 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.76249 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17038.0  17038.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6365159.0 6365159.0     82.0  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4233.0   4233.0      0.1  	imagem1 = np.float32(img1)
    12         1      73234.0  73234.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13675.0  13675.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      13185.0  13185.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4917.0   4917.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12166.0  12166.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21836.0  21836.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3076.0     65.4      0.0  	for variavel in corners1:
    21        46       7453.0    162.0      0.1  		array=np.array([variavel])
    22        46       2868.0     62.3      0.0  		matriz1.append(array)
    23         1       1228.0   1228.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13398.0  13398.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        386.0    386.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80702.0  80702.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28539.0  28539.0      0.4  	imagem2 = np.float32(img2)
    30         1     574502.0 574502.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96450.0  96450.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85676.0  85676.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37046.0  37046.0      0.5  	dst2 = np.uint8(dst2)
    34         1      77222.0  77222.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100240.0 100240.0      1.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       165      10650.0     64.5      0.1  	for variavel in corners2:
    39       164      26950.0    164.3      0.3  		array=np.array([variavel])
    40       164      10511.0     64.1      0.1  		matriz2.append(array)
    41         1       3571.0   3571.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      70133.0  70133.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6165.0   6165.0      0.1  	matches = bf.match(des1,des2)

