Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.656 MiB   48.656 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.531 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.773 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.047 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.340 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.797 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.984 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.984 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.125 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.125 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.141 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.141 MiB    0.000 MiB   	matriz1=[]
    20   97.141 MiB    0.000 MiB   	for variavel in corners1:
    21   97.141 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.141 MiB    0.000 MiB   		matriz1.append(array)
    23   97.168 MiB    0.027 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.504 MiB    0.336 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.562 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.145 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.465 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.785 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.785 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.836 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.098 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.418 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.418 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.418 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.418 MiB    0.000 MiB   	matriz2=[]
    38  103.426 MiB    0.000 MiB   	for variavel in corners2:
    39  103.426 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.426 MiB    0.000 MiB   		matriz2.append(array)
    41  103.430 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.438 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.602 MiB    0.164 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.81985 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      19080.0  19080.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6421047.0 6421047.0     82.1  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4134.0   4134.0      0.1  	imagem1 = np.float32(img1)
    12         1      73103.0  73103.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12259.0  12259.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      15131.0  15131.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5104.0   5104.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11569.0  11569.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21516.0  21516.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3095.0     65.9      0.0  	for variavel in corners1:
    21        46       8452.0    183.7      0.1  		array=np.array([variavel])
    22        46       2866.0     62.3      0.0  		matriz1.append(array)
    23         1       1135.0   1135.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13500.0  13500.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        323.0    323.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80664.0  80664.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26685.0  26685.0      0.3  	imagem2 = np.float32(img2)
    30         1     577363.0 577363.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96108.0  96108.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85262.0  85262.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38307.0  38307.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76051.0  76051.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      88174.0  88174.0      1.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       189      11958.0     63.3      0.2  	for variavel in corners2:
    39       188      32765.0    174.3      0.4  		array=np.array([variavel])
    40       188      12110.0     64.4      0.2  		matriz2.append(array)
    41         1       4183.0   4183.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      71214.0  71214.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6401.0   6401.0      0.1  	matches = bf.match(des1,des2)

