Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.738 MiB   48.738 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.551 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.793 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.066 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.418 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.883 MiB    0.465 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.070 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.070 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.152 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.152 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.172 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.172 MiB    0.000 MiB   	matriz1=[]
    20   97.172 MiB    0.000 MiB   	for variavel in corners1:
    21   97.172 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.172 MiB    0.000 MiB   		matriz1.append(array)
    23   97.203 MiB    0.031 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.539 MiB    0.336 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.598 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.180 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.500 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.820 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.820 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.867 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.129 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.449 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.449 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.449 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.449 MiB    0.000 MiB   	matriz2=[]
    38  103.457 MiB    0.000 MiB   	for variavel in corners2:
    39  103.457 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.457 MiB    0.000 MiB   		matriz2.append(array)
    41  103.461 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.469 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.637 MiB    0.168 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.77478 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      18904.0  18904.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6372215.0 6372215.0     82.0  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4021.0   4021.0      0.1  	imagem1 = np.float32(img1)
    12         1      80014.0  80014.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13169.0  13169.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12563.0  12563.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5072.0   5072.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11627.0  11627.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21368.0  21368.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3140.0     66.8      0.0  	for variavel in corners1:
    21        46       7472.0    162.4      0.1  		array=np.array([variavel])
    22        46       2881.0     62.6      0.0  		matriz1.append(array)
    23         1       1119.0   1119.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16039.0  16039.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        276.0    276.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      75565.0  75565.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29503.0  29503.0      0.4  	imagem2 = np.float32(img2)
    30         1     573860.0 573860.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96950.0  96950.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85290.0  85290.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39097.0  39097.0      0.5  	dst2 = np.uint8(dst2)
    34         1      74682.0  74682.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      89914.0  89914.0      1.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       189      12063.0     63.8      0.2  	for variavel in corners2:
    39       188      33257.0    176.9      0.4  		array=np.array([variavel])
    40       188      11760.0     62.6      0.2  		matriz2.append(array)
    41         1       4095.0   4095.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      72133.0  72133.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6446.0   6446.0      0.1  	matches = bf.match(des1,des2)

