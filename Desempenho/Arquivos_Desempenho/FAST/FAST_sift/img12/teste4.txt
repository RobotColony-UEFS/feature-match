Filename: FAST_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   48.570 MiB   48.570 MiB   @profile
     8                             def FAST_sift(img):
     9   49.270 MiB    0.699 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                             
    11   49.332 MiB    0.062 MiB   	fast = cv2.FastFeatureDetector_create(threshold=25)
    12   49.453 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    13   49.574 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                             
    15   49.848 MiB    0.273 MiB   	kp1 = fast.detect(img1,None)
    16   54.734 MiB    4.887 MiB   	kp1, des1 = sift.compute(img1, kp1)
    17                             
    18   54.734 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                             
    20   54.762 MiB    0.027 MiB   	kp2 = fast.detect(img2,None)
    21   55.516 MiB    0.754 MiB   	kp2, des2 = sift.compute(img2, kp2)
    22   55.848 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to FAST_sift.py.lprof
Timer unit: 1e-06 s

Total time: 16.4246 s
File: FAST_sift.py
Function: FAST_sift at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def FAST_sift(img):
     9         1      19228.0  19228.0      0.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                                           
    11         1        262.0    262.0      0.0  	fast = cv2.FastFeatureDetector_create(threshold=25)
    12         1        283.0    283.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    13         1        311.0    311.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                                           
    15         1      10929.0  10929.0      0.1  	kp1 = fast.detect(img1,None)
    16         1    3119773.0 3119773.0     19.0  	kp1, des1 = sift.compute(img1, kp1)
    17                                           
    18         1      72686.0  72686.0      0.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                                           
    20         1      44931.0  44931.0      0.3  	kp2 = fast.detect(img2,None)
    21         1    7814570.0 7814570.0     47.6  	kp2, des2 = sift.compute(img2, kp2)
    22         1    5341646.0 5341646.0     32.5  	matches = bf.match(des1,des2)

