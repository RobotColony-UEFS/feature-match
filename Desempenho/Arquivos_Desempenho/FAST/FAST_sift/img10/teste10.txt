Filename: FAST_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   49.211 MiB   49.211 MiB   @profile
     8                             def FAST_sift(img):
     9   50.152 MiB    0.941 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                             
    11   50.215 MiB    0.062 MiB   	fast = cv2.FastFeatureDetector_create(threshold=25)
    12   50.332 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    13   50.391 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                             
    15   50.691 MiB    0.301 MiB   	kp1 = fast.detect(img1,None)
    16   55.480 MiB    4.789 MiB   	kp1, des1 = sift.compute(img1, kp1)
    17                             
    18   55.480 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                             
    20   55.508 MiB    0.027 MiB   	kp2 = fast.detect(img2,None)
    21   56.246 MiB    0.738 MiB   	kp2, des2 = sift.compute(img2, kp2)
    22   56.602 MiB    0.355 MiB   	matches = bf.match(des1,des2)


Wrote profile results to FAST_sift.py.lprof
Timer unit: 1e-06 s

Total time: 16.8124 s
File: FAST_sift.py
Function: FAST_sift at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def FAST_sift(img):
     9         1      18238.0  18238.0      0.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                                           
    11         1        612.0    612.0      0.0  	fast = cv2.FastFeatureDetector_create(threshold=25)
    12         1       1196.0   1196.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    13         1        246.0    246.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                                           
    15         1      11225.0  11225.0      0.1  	kp1 = fast.detect(img1,None)
    16         1    3065516.0 3065516.0     18.2  	kp1, des1 = sift.compute(img1, kp1)
    17                                           
    18         1      73525.0  73525.0      0.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                                           
    20         1      42929.0  42929.0      0.3  	kp2 = fast.detect(img2,None)
    21         1    8349444.0 8349444.0     49.7  	kp2, des2 = sift.compute(img2, kp2)
    22         1    5249480.0 5249480.0     31.2  	matches = bf.match(des1,des2)

