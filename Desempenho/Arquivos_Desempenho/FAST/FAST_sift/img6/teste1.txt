Filename: FAST_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   48.973 MiB   48.973 MiB   @profile
     8                             def FAST_sift(img):
     9   49.910 MiB    0.938 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                             
    11   50.031 MiB    0.121 MiB   	fast = cv2.FastFeatureDetector_create(threshold=25)
    12   50.152 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    13   50.211 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                             
    15   50.520 MiB    0.309 MiB   	kp1 = fast.detect(img1,None)
    16   55.422 MiB    4.902 MiB   	kp1, des1 = sift.compute(img1, kp1)
    17                             
    18   55.422 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                             
    20   55.457 MiB    0.035 MiB   	kp2 = fast.detect(img2,None)
    21   56.289 MiB    0.832 MiB   	kp2, des2 = sift.compute(img2, kp2)
    22   56.621 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to FAST_sift.py.lprof
Timer unit: 1e-06 s

Total time: 17.6162 s
File: FAST_sift.py
Function: FAST_sift at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def FAST_sift(img):
     9         1      17075.0  17075.0      0.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                                           
    11         1        258.0    258.0      0.0  	fast = cv2.FastFeatureDetector_create(threshold=25)
    12         1        424.0    424.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    13         1        227.0    227.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                                           
    15         1      10949.0  10949.0      0.1  	kp1 = fast.detect(img1,None)
    16         1    3071889.0 3071889.0     17.4  	kp1, des1 = sift.compute(img1, kp1)
    17                                           
    18         1      74660.0  74660.0      0.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                                           
    20         1      43501.0  43501.0      0.2  	kp2 = fast.detect(img2,None)
    21         1    8453637.0 8453637.0     48.0  	kp2, des2 = sift.compute(img2, kp2)
    22         1    5943533.0 5943533.0     33.7  	matches = bf.match(des1,des2)

