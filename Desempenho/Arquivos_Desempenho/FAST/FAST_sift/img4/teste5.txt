Filename: FAST_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   48.801 MiB   48.801 MiB   @profile
     8                             def FAST_sift(img):
     9   49.750 MiB    0.949 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                             
    11   49.812 MiB    0.062 MiB   	fast = cv2.FastFeatureDetector_create(threshold=25)
    12   49.930 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    13   49.992 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                             
    15   50.223 MiB    0.230 MiB   	kp1 = fast.detect(img1,None)
    16   55.098 MiB    4.875 MiB   	kp1, des1 = sift.compute(img1, kp1)
    17                             
    18   55.098 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                             
    20   55.137 MiB    0.039 MiB   	kp2 = fast.detect(img2,None)
    21   56.066 MiB    0.930 MiB   	kp2, des2 = sift.compute(img2, kp2)
    22   56.461 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to FAST_sift.py.lprof
Timer unit: 1e-06 s

Total time: 18.993 s
File: FAST_sift.py
Function: FAST_sift at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def FAST_sift(img):
     9         1      16956.0  16956.0      0.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                                           
    11         1        361.0    361.0      0.0  	fast = cv2.FastFeatureDetector_create(threshold=25)
    12         1        290.0    290.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    13         1        220.0    220.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                                           
    15         1      11136.0  11136.0      0.1  	kp1 = fast.detect(img1,None)
    16         1    3064105.0 3064105.0     16.1  	kp1, des1 = sift.compute(img1, kp1)
    17                                           
    18         1      75790.0  75790.0      0.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                                           
    20         1      46648.0  46648.0      0.2  	kp2 = fast.detect(img2,None)
    21         1    9194860.0 9194860.0     48.4  	kp2, des2 = sift.compute(img2, kp2)
    22         1    6582682.0 6582682.0     34.7  	matches = bf.match(des1,des2)

