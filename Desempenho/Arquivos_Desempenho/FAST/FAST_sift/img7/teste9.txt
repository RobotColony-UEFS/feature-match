Filename: FAST_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   48.887 MiB   48.887 MiB   @profile
     8                             def FAST_sift(img):
     9   49.824 MiB    0.938 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                             
    11   49.945 MiB    0.121 MiB   	fast = cv2.FastFeatureDetector_create(threshold=25)
    12   50.066 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    13   50.125 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                             
    15   50.430 MiB    0.305 MiB   	kp1 = fast.detect(img1,None)
    16   55.324 MiB    4.895 MiB   	kp1, des1 = sift.compute(img1, kp1)
    17                             
    18   55.324 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                             
    20   55.359 MiB    0.035 MiB   	kp2 = fast.detect(img2,None)
    21   56.215 MiB    0.855 MiB   	kp2, des2 = sift.compute(img2, kp2)
    22   56.629 MiB    0.414 MiB   	matches = bf.match(des1,des2)


Wrote profile results to FAST_sift.py.lprof
Timer unit: 1e-06 s

Total time: 18.0586 s
File: FAST_sift.py
Function: FAST_sift at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def FAST_sift(img):
     9         1      17225.0  17225.0      0.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                                           
    11         1        265.0    265.0      0.0  	fast = cv2.FastFeatureDetector_create(threshold=25)
    12         1        302.0    302.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    13         1        318.0    318.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                                           
    15         1      10912.0  10912.0      0.1  	kp1 = fast.detect(img1,None)
    16         1    3054470.0 3054470.0     16.9  	kp1, des1 = sift.compute(img1, kp1)
    17                                           
    18         1      74303.0  74303.0      0.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                                           
    20         1      46508.0  46508.0      0.3  	kp2 = fast.detect(img2,None)
    21         1    8765340.0 8765340.0     48.5  	kp2, des2 = sift.compute(img2, kp2)
    22         1    6088955.0 6088955.0     33.7  	matches = bf.match(des1,des2)

