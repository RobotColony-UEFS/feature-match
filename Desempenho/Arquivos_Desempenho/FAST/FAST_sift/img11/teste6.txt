Filename: FAST_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   49.172 MiB   49.172 MiB   @profile
     8                             def FAST_sift(img):
     9   50.113 MiB    0.941 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                             
    11   50.176 MiB    0.062 MiB   	fast = cv2.FastFeatureDetector_create(threshold=25)
    12   50.293 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    13   50.352 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                             
    15   50.652 MiB    0.301 MiB   	kp1 = fast.detect(img1,None)
    16   55.441 MiB    4.789 MiB   	kp1, des1 = sift.compute(img1, kp1)
    17                             
    18   55.441 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                             
    20   55.449 MiB    0.008 MiB   	kp2 = fast.detect(img2,None)
    21   55.484 MiB    0.035 MiB   	kp2, des2 = sift.compute(img2, kp2)
    22   55.840 MiB    0.355 MiB   	matches = bf.match(des1,des2)


Wrote profile results to FAST_sift.py.lprof
Timer unit: 1e-06 s

Total time: 12.575 s
File: FAST_sift.py
Function: FAST_sift at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def FAST_sift(img):
     9         1      17234.0  17234.0      0.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                                           
    11         1        254.0    254.0      0.0  	fast = cv2.FastFeatureDetector_create(threshold=25)
    12         1        289.0    289.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    13         1        432.0    432.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                                           
    15         1      10826.0  10826.0      0.1  	kp1 = fast.detect(img1,None)
    16         1    3060662.0 3060662.0     24.3  	kp1, des1 = sift.compute(img1, kp1)
    17                                           
    18         1      70998.0  70998.0      0.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                                           
    20         1      39831.0  39831.0      0.3  	kp2 = fast.detect(img2,None)
    21         1    5898872.0 5898872.0     46.9  	kp2, des2 = sift.compute(img2, kp2)
    22         1    3475559.0 3475559.0     27.6  	matches = bf.match(des1,des2)

