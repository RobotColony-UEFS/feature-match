Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.699 MiB   48.699 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.664 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.785 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.020 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.289 MiB    1.270 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.668 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.969 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.969 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.152 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.152 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.215 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.215 MiB    0.000 MiB   	matriz1=[]
    20   52.215 MiB    0.000 MiB   	for variavel in corners1:
    21   52.215 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.215 MiB    0.000 MiB   		matriz1.append(array)
    23   52.277 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.824 MiB    8.547 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.883 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.465 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.785 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.105 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.105 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.105 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.367 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.688 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.688 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.688 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.688 MiB    0.000 MiB   	matriz2=[]
    38   66.691 MiB    0.000 MiB   	for variavel in corners2:
    39   66.691 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.691 MiB    0.000 MiB   		matriz2.append(array)
    41   66.699 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.703 MiB    0.004 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.035 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.2185 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      16986.0  16986.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        368.0    368.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3957.0   3957.0      0.2  	imagem1 = np.float32(img1)
    12         1      73866.0  73866.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14825.0  14825.0      0.7  	dst1 = cv2.dilate(dst1,None)
    14         1      12617.0  12617.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4955.0   4955.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12759.0  12759.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21062.0  21062.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3101.0     66.0      0.1  	for variavel in corners1:
    21        46       7539.0    163.9      0.3  		array=np.array([variavel])
    22        46       2955.0     64.2      0.1  		matriz1.append(array)
    23         1       1184.0   1184.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847076.0 847076.0     38.2  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        285.0    285.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78945.0  78945.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26727.0  26727.0      1.2  	imagem2 = np.float32(img2)
    30         1     579485.0 579485.0     26.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98074.0  98074.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      83766.0  83766.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38942.0  38942.0      1.8  	dst2 = np.uint8(dst2)
    34         1      76528.0  76528.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     101971.0 101971.0      4.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       165      10642.0     64.5      0.5  	for variavel in corners2:
    39       164      27045.0    164.9      1.2  		array=np.array([variavel])
    40       164      11262.0     68.7      0.5  		matriz2.append(array)
    41         1       3404.0   3404.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      52441.0  52441.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5444.0   5444.0      0.2  	matches = bf.match(des1,des2)

