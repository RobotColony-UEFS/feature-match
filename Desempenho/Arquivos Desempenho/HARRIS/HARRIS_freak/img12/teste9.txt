Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.059 MiB   49.059 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.988 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.102 MiB    0.113 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.336 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.551 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.938 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.113 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.113 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.223 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.223 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.270 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.270 MiB    0.000 MiB   	matriz1=[]
    20   52.270 MiB    0.000 MiB   	for variavel in corners1:
    21   52.270 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.270 MiB    0.000 MiB   		matriz1.append(array)
    23   52.332 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.691 MiB    8.359 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.816 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.398 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.719 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.039 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.039 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.039 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.301 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.621 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.621 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.621 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.621 MiB    0.000 MiB   	matriz2=[]
    38   66.625 MiB    0.000 MiB   	for variavel in corners2:
    39   66.625 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.625 MiB    0.000 MiB   		matriz2.append(array)
    41   66.633 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.637 MiB    0.004 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.031 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.23428 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17218.0  17218.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        340.0    340.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       5766.0   5766.0      0.3  	imagem1 = np.float32(img1)
    12         1      73812.0  73812.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13070.0  13070.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      14197.0  14197.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4984.0   4984.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11799.0  11799.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21289.0  21289.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3007.0     64.0      0.1  	for variavel in corners1:
    21        46       7366.0    160.1      0.3  		array=np.array([variavel])
    22        46       2918.0     63.4      0.1  		matriz1.append(array)
    23         1       1208.0   1208.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     848683.0 848683.0     38.0  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        390.0    390.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76709.0  76709.0      3.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28470.0  28470.0      1.3  	imagem2 = np.float32(img2)
    30         1     594278.0 594278.0     26.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96952.0  96952.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      83714.0  83714.0      3.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39005.0  39005.0      1.7  	dst2 = np.uint8(dst2)
    34         1      77041.0  77041.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     101395.0 101395.0      4.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       165      10897.0     66.0      0.5  	for variavel in corners2:
    39       164      26159.0    159.5      1.2  		array=np.array([variavel])
    40       164      10333.0     63.0      0.5  		matriz2.append(array)
    41         1       3608.0   3608.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      53526.0  53526.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5861.0   5861.0      0.3  	matches = bf.match(des1,des2)

