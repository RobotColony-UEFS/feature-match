Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.875 MiB   48.875 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.762 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.887 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.121 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.469 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.859 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.098 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.098 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.223 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.223 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.223 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.223 MiB    0.000 MiB   	matriz1=[]
    20   52.223 MiB    0.000 MiB   	for variavel in corners1:
    21   52.223 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.223 MiB    0.000 MiB   		matriz1.append(array)
    23   52.227 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.711 MiB    8.484 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.770 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.352 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.672 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.992 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.992 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.992 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.254 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.574 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.574 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.574 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.574 MiB    0.000 MiB   	matriz2=[]
    38   66.578 MiB    0.000 MiB   	for variavel in corners2:
    39   66.578 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.578 MiB    0.000 MiB   		matriz2.append(array)
    41   66.586 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.590 MiB    0.004 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.926 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.21191 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      16983.0  16983.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        353.0    353.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3826.0   3826.0      0.2  	imagem1 = np.float32(img1)
    12         1      76410.0  76410.0      3.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12323.0  12323.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12878.0  12878.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5091.0   5091.0      0.2  	dst1 = np.uint8(dst1)
    16         1      13395.0  13395.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20993.0  20993.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       2989.0     63.6      0.1  	for variavel in corners1:
    21        46       7406.0    161.0      0.3  		array=np.array([variavel])
    22        46       2820.0     61.3      0.1  		matriz1.append(array)
    23         1       1410.0   1410.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847647.0 847647.0     38.3  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        279.0    279.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79788.0  79788.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28606.0  28606.0      1.3  	imagem2 = np.float32(img2)
    30         1     575700.0 575700.0     26.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96423.0  96423.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      84382.0  84382.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37995.0  37995.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76696.0  76696.0      3.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      98891.0  98891.0      4.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       165      10559.0     64.0      0.5  	for variavel in corners2:
    39       164      26468.0    161.4      1.2  		array=np.array([variavel])
    40       164       9982.0     60.9      0.5  		matriz2.append(array)
    41         1       3412.0   3412.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      52075.0  52075.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5849.0   5849.0      0.3  	matches = bf.match(des1,des2)

