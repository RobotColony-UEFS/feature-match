Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.699 MiB   48.699 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.668 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.789 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.023 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.289 MiB    1.266 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.672 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.973 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.973 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.156 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.156 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.219 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.219 MiB    0.000 MiB   	matriz1=[]
    20   52.219 MiB    0.000 MiB   	for variavel in corners1:
    21   52.219 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.219 MiB    0.000 MiB   		matriz1.append(array)
    23   52.281 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.828 MiB    8.547 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.887 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.469 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.789 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.109 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.109 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.109 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.371 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.691 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.691 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.691 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.691 MiB    0.000 MiB   	matriz2=[]
    38   66.695 MiB    0.000 MiB   	for variavel in corners2:
    39   66.695 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.695 MiB    0.000 MiB   		matriz2.append(array)
    41   66.703 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.707 MiB    0.004 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.039 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.26765 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      16987.0  16987.0      0.7  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        420.0    420.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4302.0   4302.0      0.2  	imagem1 = np.float32(img1)
    12         1      76044.0  76044.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13306.0  13306.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12237.0  12237.0      0.5  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5076.0   5076.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11508.0  11508.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22485.0  22485.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3141.0     66.8      0.1  	for variavel in corners1:
    21        46       7619.0    165.6      0.3  		array=np.array([variavel])
    22        46       2972.0     64.6      0.1  		matriz1.append(array)
    23         1       1103.0   1103.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     844740.0 844740.0     37.3  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        283.0    283.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79564.0  79564.0      3.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26802.0  26802.0      1.2  	imagem2 = np.float32(img2)
    30         1     632326.0 632326.0     27.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96693.0  96693.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84181.0  84181.0      3.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39721.0  39721.0      1.8  	dst2 = np.uint8(dst2)
    34         1      75859.0  75859.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      99544.0  99544.0      4.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       165      10782.0     65.3      0.5  	for variavel in corners2:
    39       164      26666.0    162.6      1.2  		array=np.array([variavel])
    40       164      10462.0     63.8      0.5  		matriz2.append(array)
    41         1       3450.0   3450.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      53545.0  53545.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5548.0   5548.0      0.2  	matches = bf.match(des1,des2)

