Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.723 MiB   48.723 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.469 MiB    0.746 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.590 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.824 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.113 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.535 MiB    0.422 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.723 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.723 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.816 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.816 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.848 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.848 MiB    0.000 MiB   	matriz1=[]
    20   51.848 MiB    0.000 MiB   	for variavel in corners1:
    21   51.848 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.848 MiB    0.000 MiB   		matriz1.append(array)
    23   51.891 MiB    0.043 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.387 MiB    8.496 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.445 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.027 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.348 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.668 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.668 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.668 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   63.930 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.250 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.250 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.250 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.250 MiB    0.000 MiB   	matriz2=[]
    38   66.254 MiB    0.000 MiB   	for variavel in corners2:
    39   66.254 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.254 MiB    0.000 MiB   		matriz2.append(array)
    41   66.262 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.270 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.547 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.2304 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17096.0  17096.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        356.0    356.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3779.0   3779.0      0.2  	imagem1 = np.float32(img1)
    12         1      76199.0  76199.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12957.0  12957.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12443.0  12443.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5098.0   5098.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11480.0  11480.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22934.0  22934.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3455.0     73.5      0.2  	for variavel in corners1:
    21        46       7490.0    162.8      0.3  		array=np.array([variavel])
    22        46       3758.0     81.7      0.2  		matriz1.append(array)
    23         1       1263.0   1263.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     849306.0 849306.0     38.1  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        394.0    394.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82153.0  82153.0      3.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27514.0  27514.0      1.2  	imagem2 = np.float32(img2)
    30         1     576407.0 576407.0     25.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96986.0  96986.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85247.0  85247.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36975.0  36975.0      1.7  	dst2 = np.uint8(dst2)
    34         1      77628.0  77628.0      3.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      96995.0  96995.0      4.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       184      12103.0     65.8      0.5  	for variavel in corners2:
    39       183      31688.0    173.2      1.4  		array=np.array([variavel])
    40       183      11686.0     63.9      0.5  		matriz2.append(array)
    41         1       3962.0   3962.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      55312.0  55312.0      2.5  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       7452.0   7452.0      0.3  	matches = bf.match(des1,des2)

