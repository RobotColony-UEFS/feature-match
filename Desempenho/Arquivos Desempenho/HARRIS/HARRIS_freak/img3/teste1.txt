Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.020 MiB   49.020 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.895 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.004 MiB    0.109 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.238 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.449 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.832 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.012 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.012 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.117 MiB    0.105 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.117 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.160 MiB    0.043 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.160 MiB    0.000 MiB   	matriz1=[]
    20   52.160 MiB    0.000 MiB   	for variavel in corners1:
    21   52.160 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.160 MiB    0.000 MiB   		matriz1.append(array)
    23   52.223 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.586 MiB    8.363 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.711 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.293 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.613 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.934 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.934 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.934 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.195 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.516 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.516 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.516 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.516 MiB    0.000 MiB   	matriz2=[]
    38   66.520 MiB    0.000 MiB   	for variavel in corners2:
    39   66.520 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.520 MiB    0.000 MiB   		matriz2.append(array)
    41   66.527 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.535 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.930 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.22757 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18008.0  18008.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        353.0    353.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3845.0   3845.0      0.2  	imagem1 = np.float32(img1)
    12         1      75226.0  75226.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13895.0  13895.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12436.0  12436.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5511.0   5511.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11989.0  11989.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22347.0  22347.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3290.0     70.0      0.1  	for variavel in corners1:
    21        46       7411.0    161.1      0.3  		array=np.array([variavel])
    22        46       2835.0     61.6      0.1  		matriz1.append(array)
    23         1       1240.0   1240.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     848050.0 848050.0     38.1  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        387.0    387.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80455.0  80455.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28083.0  28083.0      1.3  	imagem2 = np.float32(img2)
    30         1     576215.0 576215.0     25.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96850.0  96850.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85379.0  85379.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38771.0  38771.0      1.7  	dst2 = np.uint8(dst2)
    34         1      75233.0  75233.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      94068.0  94068.0      4.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       184      11952.0     65.0      0.5  	for variavel in corners2:
    39       183      31299.0    171.0      1.4  		array=np.array([variavel])
    40       183      14238.0     77.8      0.6  		matriz2.append(array)
    41         1       4344.0   4344.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      55958.0  55958.0      2.5  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       7616.0   7616.0      0.3  	matches = bf.match(des1,des2)

