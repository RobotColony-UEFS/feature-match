Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.070 MiB   49.070 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   50.000 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.113 MiB    0.113 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.348 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.562 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.949 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.125 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.125 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.234 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.234 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.281 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.281 MiB    0.000 MiB   	matriz1=[]
    20   52.281 MiB    0.000 MiB   	for variavel in corners1:
    21   52.281 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.281 MiB    0.000 MiB   		matriz1.append(array)
    23   52.344 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.703 MiB    8.359 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.828 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.410 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.730 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.051 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.051 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.051 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.312 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.633 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.633 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.633 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.633 MiB    0.000 MiB   	matriz2=[]
    38   66.637 MiB    0.000 MiB   	for variavel in corners2:
    39   66.637 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.637 MiB    0.000 MiB   		matriz2.append(array)
    41   66.645 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.652 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.047 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.26696 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      16830.0  16830.0      0.7  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        369.0    369.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3964.0   3964.0      0.2  	imagem1 = np.float32(img1)
    12         1      75767.0  75767.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13105.0  13105.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12665.0  12665.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5184.0   5184.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11566.0  11566.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1        148.0    148.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22466.0  22466.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3194.0     68.0      0.1  	for variavel in corners1:
    21        46       7618.0    165.6      0.3  		array=np.array([variavel])
    22        46       2812.0     61.1      0.1  		matriz1.append(array)
    23         1       1226.0   1226.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     845076.0 845076.0     37.3  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        284.0    284.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81117.0  81117.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26543.0  26543.0      1.2  	imagem2 = np.float32(img2)
    30         1     626145.0 626145.0     27.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95744.0  95744.0      4.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85578.0  85578.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39849.0  39849.0      1.8  	dst2 = np.uint8(dst2)
    34         1      74604.0  74604.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      92354.0  92354.0      4.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       184      12059.0     65.5      0.5  	for variavel in corners2:
    39       183      30762.0    168.1      1.4  		array=np.array([variavel])
    40       183      11423.0     62.4      0.5  		matriz2.append(array)
    41         1       3931.0   3931.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      58130.0  58130.0      2.6  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       6246.0   6246.0      0.3  	matches = bf.match(des1,des2)

