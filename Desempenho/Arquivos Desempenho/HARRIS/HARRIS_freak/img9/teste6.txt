Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.602 MiB   48.602 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.473 MiB    0.871 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.598 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.832 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.125 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.582 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.770 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.770 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.910 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.910 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.926 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.926 MiB    0.000 MiB   	matriz1=[]
    20   51.926 MiB    0.000 MiB   	for variavel in corners1:
    21   51.926 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.926 MiB    0.000 MiB   		matriz1.append(array)
    23   51.953 MiB    0.027 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.457 MiB    8.504 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.516 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.098 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.418 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.738 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.738 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.789 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.051 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.371 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.371 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.371 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.371 MiB    0.000 MiB   	matriz2=[]
    38   66.375 MiB    0.000 MiB   	for variavel in corners2:
    39   66.375 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.375 MiB    0.000 MiB   		matriz2.append(array)
    41   66.383 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.391 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.613 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.23984 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      16888.0  16888.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        364.0    364.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4925.0   4925.0      0.2  	imagem1 = np.float32(img1)
    12         1      75701.0  75701.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12481.0  12481.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      13581.0  13581.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5022.0   5022.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11680.0  11680.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21462.0  21462.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3479.0     74.0      0.2  	for variavel in corners1:
    21        46       9131.0    198.5      0.4  		array=np.array([variavel])
    22        46       2860.0     62.2      0.1  		matriz1.append(array)
    23         1       1255.0   1255.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     845866.0 845866.0     37.8  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        285.0    285.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81755.0  81755.0      3.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27804.0  27804.0      1.2  	imagem2 = np.float32(img2)
    30         1     575737.0 575737.0     25.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98004.0  98004.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      89172.0  89172.0      4.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38126.0  38126.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76015.0  76015.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     106157.0 106157.0      4.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       190      13624.0     71.7      0.6  	for variavel in corners2:
    39       189      32698.0    173.0      1.5  		array=np.array([variavel])
    40       189      11974.0     63.4      0.5  		matriz2.append(array)
    41         1       4402.0   4402.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      53152.0  53152.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5954.0   5954.0      0.3  	matches = bf.match(des1,des2)

