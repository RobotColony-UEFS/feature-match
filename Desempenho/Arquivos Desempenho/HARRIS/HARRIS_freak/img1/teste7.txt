Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.707 MiB   48.707 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.512 MiB    0.805 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.633 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.867 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.156 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.629 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.816 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.816 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.906 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.906 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.934 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.934 MiB    0.000 MiB   	matriz1=[]
    20   51.934 MiB    0.000 MiB   	for variavel in corners1:
    21   51.934 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.934 MiB    0.000 MiB   		matriz1.append(array)
    23   51.973 MiB    0.039 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.527 MiB    8.555 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.586 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.168 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.488 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.809 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.809 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.809 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.070 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.391 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.391 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.391 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.391 MiB    0.000 MiB   	matriz2=[]
    38   66.398 MiB    0.000 MiB   	for variavel in corners2:
    39   66.398 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.398 MiB    0.000 MiB   		matriz2.append(array)
    41   66.410 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.422 MiB    0.012 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.719 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.34984 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18272.0  18272.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        456.0    456.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3844.0   3844.0      0.2  	imagem1 = np.float32(img1)
    12         1      75405.0  75405.0      3.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13089.0  13089.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      13381.0  13381.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5147.0   5147.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11742.0  11742.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22696.0  22696.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3070.0     65.3      0.1  	for variavel in corners1:
    21        46       7399.0    160.8      0.3  		array=np.array([variavel])
    22        46       3053.0     66.4      0.1  		matriz1.append(array)
    23         1       1376.0   1376.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     849116.0 849116.0     36.1  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        396.0    396.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79907.0  79907.0      3.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27639.0  27639.0      1.2  	imagem2 = np.float32(img2)
    30         1     576352.0 576352.0     24.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97420.0  97420.0      4.1  	dst2 = cv2.dilate(dst2,None)
    32         1      84959.0  84959.0      3.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38081.0  38081.0      1.6  	dst2 = np.uint8(dst2)
    34         1      76363.0  76363.0      3.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     172095.0 172095.0      7.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       287      18496.0     64.4      0.8  	for variavel in corners2:
    39       286      49441.0    172.9      2.1  		array=np.array([variavel])
    40       286      18376.0     64.3      0.8  		matriz2.append(array)
    41         1       5850.0   5850.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      67389.0  67389.0      2.9  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       8751.0   8751.0      0.4  	matches = bf.match(des1,des2)

