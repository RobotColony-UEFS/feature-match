Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.754 MiB   48.754 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.566 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.730 MiB    0.164 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.965 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.254 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.680 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.867 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.867 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.965 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.965 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.000 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.000 MiB    0.000 MiB   	matriz1=[]
    20   52.000 MiB    0.000 MiB   	for variavel in corners1:
    21   52.000 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.000 MiB    0.000 MiB   		matriz1.append(array)
    23   52.004 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.367 MiB    8.363 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.426 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.008 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.328 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.648 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.648 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.648 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   63.910 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.230 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.230 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.230 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.230 MiB    0.000 MiB   	matriz2=[]
    38   66.238 MiB    0.000 MiB   	for variavel in corners2:
    39   66.238 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.238 MiB    0.000 MiB   		matriz2.append(array)
    41   66.250 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.262 MiB    0.012 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.609 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.34024 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17127.0  17127.0      0.7  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        361.0    361.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3963.0   3963.0      0.2  	imagem1 = np.float32(img1)
    12         1      75800.0  75800.0      3.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12348.0  12348.0      0.5  	dst1 = cv2.dilate(dst1,None)
    14         1      12630.0  12630.0      0.5  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5214.0   5214.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12754.0  12754.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         83.0     83.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21497.0  21497.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       2984.0     63.5      0.1  	for variavel in corners1:
    21        46       7498.0    163.0      0.3  		array=np.array([variavel])
    22        46       2917.0     63.4      0.1  		matriz1.append(array)
    23         1       1086.0   1086.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     845876.0 845876.0     36.1  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        274.0    274.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80331.0  80331.0      3.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26816.0  26816.0      1.1  	imagem2 = np.float32(img2)
    30         1     576374.0 576374.0     24.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96870.0  96870.0      4.1  	dst2 = cv2.dilate(dst2,None)
    32         1      85457.0  85457.0      3.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37076.0  37076.0      1.6  	dst2 = np.uint8(dst2)
    34         1      77055.0  77055.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     172133.0 172133.0      7.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         54.0     54.0      0.0  	matriz2=[]
    38       287      18392.0     64.1      0.8  	for variavel in corners2:
    39       286      48505.0    169.6      2.1  		array=np.array([variavel])
    40       286      18250.0     63.8      0.8  		matriz2.append(array)
    41         1       5922.0   5922.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      65639.0  65639.0      2.8  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       8812.0   8812.0      0.4  	matches = bf.match(des1,des2)

