Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.902 MiB   48.902 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.785 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.910 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.145 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.496 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.883 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.121 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.121 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.246 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.246 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.246 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.246 MiB    0.000 MiB   	matriz1=[]
    20   52.246 MiB    0.000 MiB   	for variavel in corners1:
    21   52.246 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.246 MiB    0.000 MiB   		matriz1.append(array)
    23   52.250 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.734 MiB    8.484 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.793 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.375 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.695 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.016 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.016 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.016 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.277 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.598 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.598 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.598 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.598 MiB    0.000 MiB   	matriz2=[]
    38   66.605 MiB    0.000 MiB   	for variavel in corners2:
    39   66.605 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.605 MiB    0.000 MiB   		matriz2.append(array)
    41   66.617 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.629 MiB    0.012 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.965 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.3451 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17391.0  17391.0      0.7  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        347.0    347.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3844.0   3844.0      0.2  	imagem1 = np.float32(img1)
    12         1      76630.0  76630.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12965.0  12965.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12623.0  12623.0      0.5  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5015.0   5015.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11623.0  11623.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22365.0  22365.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3255.0     69.3      0.1  	for variavel in corners1:
    21        46       9431.0    205.0      0.4  		array=np.array([variavel])
    22        46       3058.0     66.5      0.1  		matriz1.append(array)
    23         1       1213.0   1213.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     843561.0 843561.0     36.0  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        280.0    280.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80130.0  80130.0      3.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27053.0  27053.0      1.2  	imagem2 = np.float32(img2)
    30         1     574340.0 574340.0     24.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96296.0  96296.0      4.1  	dst2 = cv2.dilate(dst2,None)
    32         1      86111.0  86111.0      3.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37157.0  37157.0      1.6  	dst2 = np.uint8(dst2)
    34         1      77455.0  77455.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     172206.0 172206.0      7.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       287      20830.0     72.6      0.9  	for variavel in corners2:
    39       286      48476.0    169.5      2.1  		array=np.array([variavel])
    40       286      19874.0     69.5      0.8  		matriz2.append(array)
    41         1       6264.0   6264.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      66116.0  66116.0      2.8  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       8900.0   8900.0      0.4  	matches = bf.match(des1,des2)

