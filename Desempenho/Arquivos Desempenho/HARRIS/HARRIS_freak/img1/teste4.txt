Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.531 MiB   48.531 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.410 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.535 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.828 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.121 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.531 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.773 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.773 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.898 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.898 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.910 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.910 MiB    0.000 MiB   	matriz1=[]
    20   51.910 MiB    0.000 MiB   	for variavel in corners1:
    21   51.910 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.910 MiB    0.000 MiB   		matriz1.append(array)
    23   51.914 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.398 MiB    8.484 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.457 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.039 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.359 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.680 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.680 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.734 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   63.996 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.316 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.316 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.316 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.316 MiB    0.000 MiB   	matriz2=[]
    38   66.324 MiB    0.000 MiB   	for variavel in corners2:
    39   66.324 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.324 MiB    0.000 MiB   		matriz2.append(array)
    41   66.336 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.348 MiB    0.012 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.711 MiB    0.363 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.34331 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17178.0  17178.0      0.7  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        479.0    479.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3968.0   3968.0      0.2  	imagem1 = np.float32(img1)
    12         1      74860.0  74860.0      3.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12888.0  12888.0      0.5  	dst1 = cv2.dilate(dst1,None)
    14         1      12597.0  12597.0      0.5  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5010.0   5010.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11800.0  11800.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21052.0  21052.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3091.0     65.8      0.1  	for variavel in corners1:
    21        46       7655.0    166.4      0.3  		array=np.array([variavel])
    22        46       2880.0     62.6      0.1  		matriz1.append(array)
    23         1       2501.0   2501.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     845986.0 845986.0     36.1  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        274.0    274.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81226.0  81226.0      3.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26842.0  26842.0      1.1  	imagem2 = np.float32(img2)
    30         1     575095.0 575095.0     24.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96698.0  96698.0      4.1  	dst2 = cv2.dilate(dst2,None)
    32         1      83914.0  83914.0      3.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38108.0  38108.0      1.6  	dst2 = np.uint8(dst2)
    34         1      77622.0  77622.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     173977.0 173977.0      7.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       287      18349.0     63.9      0.8  	for variavel in corners2:
    39       286      50065.0    175.1      2.1  		array=np.array([variavel])
    40       286      19128.0     66.9      0.8  		matriz2.append(array)
    41         1       6069.0   6069.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      63230.0  63230.0      2.7  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1      10481.0  10481.0      0.4  	matches = bf.match(des1,des2)

