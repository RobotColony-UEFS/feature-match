Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.746 MiB   48.746 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.559 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.723 MiB    0.164 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.957 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.246 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.672 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.859 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.859 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.957 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.957 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.992 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.992 MiB    0.000 MiB   	matriz1=[]
    20   51.992 MiB    0.000 MiB   	for variavel in corners1:
    21   51.992 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.992 MiB    0.000 MiB   		matriz1.append(array)
    23   51.996 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.359 MiB    8.363 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.418 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.000 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.320 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.641 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.641 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.641 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   63.902 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.223 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.223 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.223 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.223 MiB    0.000 MiB   	matriz2=[]
    38   66.227 MiB    0.000 MiB   	for variavel in corners2:
    39   66.227 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.227 MiB    0.000 MiB   		matriz2.append(array)
    41   66.230 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.238 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.586 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.20385 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      16972.0  16972.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        437.0    437.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3950.0   3950.0      0.2  	imagem1 = np.float32(img1)
    12         1      75425.0  75425.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13116.0  13116.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12625.0  12625.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5038.0   5038.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12380.0  12380.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21213.0  21213.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3322.0     70.7      0.2  	for variavel in corners1:
    21        46       7434.0    161.6      0.3  		array=np.array([variavel])
    22        46       2955.0     64.2      0.1  		matriz1.append(array)
    23         1       1247.0   1247.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847265.0 847265.0     38.4  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        286.0    286.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80006.0  80006.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26737.0  26737.0      1.2  	imagem2 = np.float32(img2)
    30         1     597356.0 597356.0     27.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97618.0  97618.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85475.0  85475.0      3.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38000.0  38000.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76196.0  76196.0      3.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      75306.0  75306.0      3.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       145       9456.0     65.2      0.4  	for variavel in corners2:
    39       144      24385.0    169.3      1.1  		array=np.array([variavel])
    40       144       9309.0     64.6      0.4  		matriz2.append(array)
    41         1       3146.0   3146.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      51785.0  51785.0      2.3  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5114.0   5114.0      0.2  	matches = bf.match(des1,des2)

