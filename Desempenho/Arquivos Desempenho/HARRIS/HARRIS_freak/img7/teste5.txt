Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.016 MiB   49.016 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.941 MiB    0.926 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.055 MiB    0.113 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.289 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.508 MiB    1.219 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.891 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.066 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.066 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.176 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.176 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.223 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.223 MiB    0.000 MiB   	matriz1=[]
    20   52.223 MiB    0.000 MiB   	for variavel in corners1:
    21   52.223 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.223 MiB    0.000 MiB   		matriz1.append(array)
    23   52.285 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.645 MiB    8.359 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.770 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.352 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.672 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.992 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.992 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.992 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.254 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.574 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.574 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.574 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.574 MiB    0.000 MiB   	matriz2=[]
    38   66.578 MiB    0.000 MiB   	for variavel in corners2:
    39   66.578 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.578 MiB    0.000 MiB   		matriz2.append(array)
    41   66.582 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.590 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.984 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.18706 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      19328.0  19328.0      0.9  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        364.0    364.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3844.0   3844.0      0.2  	imagem1 = np.float32(img1)
    12         1      73994.0  73994.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13755.0  13755.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12710.0  12710.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5615.0   5615.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11547.0  11547.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21173.0  21173.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3149.0     67.0      0.1  	for variavel in corners1:
    21        46       8339.0    181.3      0.4  		array=np.array([variavel])
    22        46       2820.0     61.3      0.1  		matriz1.append(array)
    23         1       1362.0   1362.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     848444.0 848444.0     38.8  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        282.0    282.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80668.0  80668.0      3.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27228.0  27228.0      1.2  	imagem2 = np.float32(img2)
    30         1     579403.0 579403.0     26.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97139.0  97139.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      84022.0  84022.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38713.0  38713.0      1.8  	dst2 = np.uint8(dst2)
    34         1      77227.0  77227.0      3.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      73763.0  73763.0      3.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       145      10890.0     75.1      0.5  	for variavel in corners2:
    39       144      23777.0    165.1      1.1  		array=np.array([variavel])
    40       144       8911.0     61.9      0.4  		matriz2.append(array)
    41         1       3182.0   3182.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      50226.0  50226.0      2.3  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       4906.0   4906.0      0.2  	matches = bf.match(des1,des2)

