Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.062 MiB   49.062 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   50.031 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.152 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.387 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.598 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.992 MiB    0.395 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.168 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.168 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.336 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.336 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.391 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.391 MiB    0.000 MiB   	matriz1=[]
    20   52.391 MiB    0.000 MiB   	for variavel in corners1:
    21   52.391 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.391 MiB    0.000 MiB   		matriz1.append(array)
    23   52.453 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.875 MiB    8.422 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.934 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.516 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.836 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.156 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.156 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.156 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.418 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.738 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.738 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.738 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.738 MiB    0.000 MiB   	matriz2=[]
    38   66.742 MiB    0.000 MiB   	for variavel in corners2:
    39   66.742 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.742 MiB    0.000 MiB   		matriz2.append(array)
    41   66.750 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.758 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.109 MiB    0.352 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.20743 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18451.0  18451.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        438.0    438.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3977.0   3977.0      0.2  	imagem1 = np.float32(img1)
    12         1      73772.0  73772.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12279.0  12279.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      14065.0  14065.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5196.0   5196.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11608.0  11608.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21555.0  21555.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3247.0     69.1      0.1  	for variavel in corners1:
    21        46       7561.0    164.4      0.3  		array=np.array([variavel])
    22        46       2957.0     64.3      0.1  		matriz1.append(array)
    23         1       1242.0   1242.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847255.0 847255.0     38.4  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        379.0    379.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76783.0  76783.0      3.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28438.0  28438.0      1.3  	imagem2 = np.float32(img2)
    30         1     572494.0 572494.0     25.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96566.0  96566.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85852.0  85852.0      3.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37388.0  37388.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76934.0  76934.0      3.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      88957.0  88957.0      4.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       189      14752.0     78.1      0.7  	for variavel in corners2:
    39       188      31496.0    167.5      1.4  		array=np.array([variavel])
    40       188      11951.0     63.6      0.5  		matriz2.append(array)
    41         1       4024.0   4024.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      52126.0  52126.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5396.0   5396.0      0.2  	matches = bf.match(des1,des2)

