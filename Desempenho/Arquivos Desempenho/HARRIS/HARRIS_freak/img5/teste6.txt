Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.977 MiB   48.977 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.906 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.020 MiB    0.113 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.254 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.469 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.855 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.031 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.031 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.141 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.141 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.188 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.188 MiB    0.000 MiB   	matriz1=[]
    20   52.188 MiB    0.000 MiB   	for variavel in corners1:
    21   52.188 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.188 MiB    0.000 MiB   		matriz1.append(array)
    23   52.250 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.609 MiB    8.359 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.734 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.316 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.637 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.957 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.957 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.957 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.219 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.539 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.539 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.539 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.539 MiB    0.000 MiB   	matriz2=[]
    38   66.543 MiB    0.000 MiB   	for variavel in corners2:
    39   66.543 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.543 MiB    0.000 MiB   		matriz2.append(array)
    41   66.551 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.559 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.953 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.21747 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18263.0  18263.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        359.0    359.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3959.0   3959.0      0.2  	imagem1 = np.float32(img1)
    12         1      74705.0  74705.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13220.0  13220.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      13612.0  13612.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5620.0   5620.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11572.0  11572.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21085.0  21085.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         61.0     61.0      0.0  	matriz1=[]
    20        47       3608.0     76.8      0.2  	for variavel in corners1:
    21        46       7768.0    168.9      0.4  		array=np.array([variavel])
    22        46       3158.0     68.7      0.1  		matriz1.append(array)
    23         1       1229.0   1229.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     848405.0 848405.0     38.3  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        282.0    282.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77213.0  77213.0      3.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28649.0  28649.0      1.3  	imagem2 = np.float32(img2)
    30         1     579194.0 579194.0     26.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98435.0  98435.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85207.0  85207.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38665.0  38665.0      1.7  	dst2 = np.uint8(dst2)
    34         1      75619.0  75619.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      87066.0  87066.0      3.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       189      12946.0     68.5      0.6  	for variavel in corners2:
    39       188      32349.0    172.1      1.5  		array=np.array([variavel])
    40       188      12653.0     67.3      0.6  		matriz2.append(array)
    41         1       4263.0   4263.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      52642.0  52642.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5435.0   5435.0      0.2  	matches = bf.match(des1,des2)

