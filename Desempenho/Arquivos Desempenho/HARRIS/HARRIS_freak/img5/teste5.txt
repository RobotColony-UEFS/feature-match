Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.656 MiB   48.656 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.531 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.656 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.891 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.180 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.641 MiB    0.461 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.828 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.828 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.969 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.969 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.984 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.984 MiB    0.000 MiB   	matriz1=[]
    20   51.984 MiB    0.000 MiB   	for variavel in corners1:
    21   51.984 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.984 MiB    0.000 MiB   		matriz1.append(array)
    23   52.012 MiB    0.027 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.516 MiB    8.504 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.574 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.156 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.477 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.797 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.797 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.848 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.109 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.430 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.430 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.430 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.430 MiB    0.000 MiB   	matriz2=[]
    38   66.434 MiB    0.000 MiB   	for variavel in corners2:
    39   66.434 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.434 MiB    0.000 MiB   		matriz2.append(array)
    41   66.441 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.449 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.672 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.21096 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17067.0  17067.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        338.0    338.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4496.0   4496.0      0.2  	imagem1 = np.float32(img1)
    12         1      74822.0  74822.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12308.0  12308.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      13019.0  13019.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5101.0   5101.0      0.2  	dst1 = np.uint8(dst1)
    16         1      13323.0  13323.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22102.0  22102.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         61.0     61.0      0.0  	matriz1=[]
    20        47       3627.0     77.2      0.2  	for variavel in corners1:
    21        46       7431.0    161.5      0.3  		array=np.array([variavel])
    22        46       3020.0     65.7      0.1  		matriz1.append(array)
    23         1       1190.0   1190.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     845230.0 845230.0     38.2  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        609.0    609.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78345.0  78345.0      3.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27095.0  27095.0      1.2  	imagem2 = np.float32(img2)
    30         1     578821.0 578821.0     26.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97571.0  97571.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      84710.0  84710.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37639.0  37639.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76096.0  76096.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      88117.0  88117.0      4.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       189      12338.0     65.3      0.6  	for variavel in corners2:
    39       188      32002.0    170.2      1.4  		array=np.array([variavel])
    40       188      13632.0     72.5      0.6  		matriz2.append(array)
    41         1       3803.0   3803.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      51163.0  51163.0      2.3  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5657.0   5657.0      0.3  	matches = bf.match(des1,des2)

