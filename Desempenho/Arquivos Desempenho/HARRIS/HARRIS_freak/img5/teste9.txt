Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.719 MiB   48.719 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.531 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.656 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.891 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.238 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.707 MiB    0.469 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.895 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.895 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.977 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.977 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.996 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.996 MiB    0.000 MiB   	matriz1=[]
    20   51.996 MiB    0.000 MiB   	for variavel in corners1:
    21   51.996 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.996 MiB    0.000 MiB   		matriz1.append(array)
    23   52.027 MiB    0.031 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.527 MiB    8.500 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.586 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.168 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.488 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.809 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.809 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.855 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.117 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.438 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.438 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.438 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.438 MiB    0.000 MiB   	matriz2=[]
    38   66.441 MiB    0.000 MiB   	for variavel in corners2:
    39   66.441 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.441 MiB    0.000 MiB   		matriz2.append(array)
    41   66.449 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.457 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.684 MiB    0.227 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.26364 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18460.0  18460.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        430.0    430.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4055.0   4055.0      0.2  	imagem1 = np.float32(img1)
    12         1      74645.0  74645.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13418.0  13418.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      13466.0  13466.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5115.0   5115.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11597.0  11597.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21364.0  21364.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3981.0     84.7      0.2  	for variavel in corners1:
    21        46       7566.0    164.5      0.3  		array=np.array([variavel])
    22        46       2914.0     63.3      0.1  		matriz1.append(array)
    23         1       1112.0   1112.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     848318.0 848318.0     37.5  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        284.0    284.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77399.0  77399.0      3.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27739.0  27739.0      1.2  	imagem2 = np.float32(img2)
    30         1     628785.0 628785.0     27.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97289.0  97289.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85805.0  85805.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38153.0  38153.0      1.7  	dst2 = np.uint8(dst2)
    34         1      75734.0  75734.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      86873.0  86873.0      3.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       189      12295.0     65.1      0.5  	for variavel in corners2:
    39       188      33448.0    177.9      1.5  		array=np.array([variavel])
    40       188      11916.0     63.4      0.5  		matriz2.append(array)
    41         1       3988.0   3988.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      50480.0  50480.0      2.2  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       6728.0   6728.0      0.3  	matches = bf.match(des1,des2)

