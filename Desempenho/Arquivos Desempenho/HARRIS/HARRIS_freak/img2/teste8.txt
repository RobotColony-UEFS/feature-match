Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.066 MiB   49.066 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.883 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.047 MiB    0.164 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.281 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.562 MiB    1.281 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.941 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.125 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.125 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.227 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.227 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.266 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.266 MiB    0.000 MiB   	matriz1=[]
    20   52.266 MiB    0.000 MiB   	for variavel in corners1:
    21   52.266 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.266 MiB    0.000 MiB   		matriz1.append(array)
    23   52.270 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.629 MiB    8.359 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.750 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.332 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.652 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.973 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.973 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.973 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.234 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.555 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.555 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.555 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.555 MiB    0.000 MiB   	matriz2=[]
    38   66.562 MiB    0.000 MiB   	for variavel in corners2:
    39   66.562 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.562 MiB    0.000 MiB   		matriz2.append(array)
    41   66.570 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.578 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.863 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.26228 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18105.0  18105.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        335.0    335.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       5145.0   5145.0      0.2  	imagem1 = np.float32(img1)
    12         1      74334.0  74334.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12897.0  12897.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      14351.0  14351.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5091.0   5091.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12567.0  12567.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21007.0  21007.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       2997.0     63.8      0.1  	for variavel in corners1:
    21        46       7721.0    167.8      0.3  		array=np.array([variavel])
    22        46       2807.0     61.0      0.1  		matriz1.append(array)
    23         1       1164.0   1164.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847468.0 847468.0     37.5  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        275.0    275.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78919.0  78919.0      3.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28649.0  28649.0      1.3  	imagem2 = np.float32(img2)
    30         1     574938.0 574938.0     25.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97043.0  97043.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85126.0  85126.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39805.0  39805.0      1.8  	dst2 = np.uint8(dst2)
    34         1      75044.0  75044.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     115377.0 115377.0      5.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       226      14592.0     64.6      0.6  	for variavel in corners2:
    39       225      37423.0    166.3      1.7  		array=np.array([variavel])
    40       225      14137.0     62.8      0.6  		matriz2.append(array)
    41         1       4714.0   4714.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      62179.0  62179.0      2.7  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       7787.0   7787.0      0.3  	matches = bf.match(des1,des2)

