Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.793 MiB   48.793 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.609 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.773 MiB    0.164 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.008 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.293 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.723 MiB    0.430 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.910 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.910 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.008 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.008 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.043 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.043 MiB    0.000 MiB   	matriz1=[]
    20   52.043 MiB    0.000 MiB   	for variavel in corners1:
    21   52.043 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.043 MiB    0.000 MiB   		matriz1.append(array)
    23   52.047 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.410 MiB    8.363 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.469 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.051 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.371 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.691 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.691 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.691 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   63.953 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.273 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.273 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.273 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.273 MiB    0.000 MiB   	matriz2=[]
    38   66.281 MiB    0.000 MiB   	for variavel in corners2:
    39   66.281 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.281 MiB    0.000 MiB   		matriz2.append(array)
    41   66.289 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.297 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.645 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.26392 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17195.0  17195.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        367.0    367.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3956.0   3956.0      0.2  	imagem1 = np.float32(img1)
    12         1      75823.0  75823.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12431.0  12431.0      0.5  	dst1 = cv2.dilate(dst1,None)
    14         1      12635.0  12635.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5173.0   5173.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12429.0  12429.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         83.0     83.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21707.0  21707.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3127.0     66.5      0.1  	for variavel in corners1:
    21        46       7659.0    166.5      0.3  		array=np.array([variavel])
    22        46       2829.0     61.5      0.1  		matriz1.append(array)
    23         1       1165.0   1165.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     846441.0 846441.0     37.4  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        279.0    279.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      83396.0  83396.0      3.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26732.0  26732.0      1.2  	imagem2 = np.float32(img2)
    30         1     577468.0 577468.0     25.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97205.0  97205.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      86060.0  86060.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38001.0  38001.0      1.7  	dst2 = np.uint8(dst2)
    34         1      77260.0  77260.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     113560.0 113560.0      5.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       226      14745.0     65.2      0.7  	for variavel in corners2:
    39       225      36949.0    164.2      1.6  		array=np.array([variavel])
    40       225      15657.0     69.6      0.7  		matriz2.append(array)
    41         1       4560.0   4560.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      61340.0  61340.0      2.7  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       7493.0   7493.0      0.3  	matches = bf.match(des1,des2)

