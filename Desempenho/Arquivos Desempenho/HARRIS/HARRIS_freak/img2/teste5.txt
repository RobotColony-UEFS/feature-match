Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.590 MiB   48.590 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.469 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.594 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.887 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.180 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.590 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.832 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.832 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.957 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.957 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.969 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.969 MiB    0.000 MiB   	matriz1=[]
    20   51.969 MiB    0.000 MiB   	for variavel in corners1:
    21   51.969 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.969 MiB    0.000 MiB   		matriz1.append(array)
    23   51.973 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.457 MiB    8.484 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.516 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.098 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.418 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.738 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.738 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.793 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.055 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.375 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.375 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.375 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.375 MiB    0.000 MiB   	matriz2=[]
    38   66.383 MiB    0.000 MiB   	for variavel in corners2:
    39   66.383 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.383 MiB    0.000 MiB   		matriz2.append(array)
    41   66.391 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.398 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.738 MiB    0.340 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.26029 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17710.0  17710.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        370.0    370.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4022.0   4022.0      0.2  	imagem1 = np.float32(img1)
    12         1      74949.0  74949.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12605.0  12605.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12802.0  12802.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4992.0   4992.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11754.0  11754.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         81.0     81.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21565.0  21565.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3018.0     64.2      0.1  	for variavel in corners1:
    21        46       7725.0    167.9      0.3  		array=np.array([variavel])
    22        46       2816.0     61.2      0.1  		matriz1.append(array)
    23         1       1155.0   1155.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847922.0 847922.0     37.5  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        272.0    272.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82006.0  82006.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26923.0  26923.0      1.2  	imagem2 = np.float32(img2)
    30         1     574842.0 574842.0     25.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96509.0  96509.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      83313.0  83313.0      3.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39059.0  39059.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76637.0  76637.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     117900.0 117900.0      5.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       226      14574.0     64.5      0.6  	for variavel in corners2:
    39       225      38037.0    169.1      1.7  		array=np.array([variavel])
    40       225      14002.0     62.2      0.6  		matriz2.append(array)
    41         1       4734.0   4734.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      60212.0  60212.0      2.7  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       7598.0   7598.0      0.3  	matches = bf.match(des1,des2)

