Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.859 MiB   48.859 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.746 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.871 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.105 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.453 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.844 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.082 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.082 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.207 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.207 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.207 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.207 MiB    0.000 MiB   	matriz1=[]
    20   52.207 MiB    0.000 MiB   	for variavel in corners1:
    21   52.207 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.207 MiB    0.000 MiB   		matriz1.append(array)
    23   52.211 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.695 MiB    8.484 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.754 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.336 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.656 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.977 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.977 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.977 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.238 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.559 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.559 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.559 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.559 MiB    0.000 MiB   	matriz2=[]
    38   66.566 MiB    0.000 MiB   	for variavel in corners2:
    39   66.566 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.566 MiB    0.000 MiB   		matriz2.append(array)
    41   66.574 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.582 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.918 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.26331 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17171.0  17171.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        356.0    356.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3798.0   3798.0      0.2  	imagem1 = np.float32(img1)
    12         1      75153.0  75153.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12399.0  12399.0      0.5  	dst1 = cv2.dilate(dst1,None)
    14         1      12779.0  12779.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6005.0   6005.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11613.0  11613.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22936.0  22936.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       2998.0     63.8      0.1  	for variavel in corners1:
    21        46       7682.0    167.0      0.3  		array=np.array([variavel])
    22        46       2807.0     61.0      0.1  		matriz1.append(array)
    23         1       1143.0   1143.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     846606.0 846606.0     37.4  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        282.0    282.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80413.0  80413.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27776.0  27776.0      1.2  	imagem2 = np.float32(img2)
    30         1     574420.0 574420.0     25.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97549.0  97549.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85032.0  85032.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37747.0  37747.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76712.0  76712.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     116709.0 116709.0      5.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       226      15843.0     70.1      0.7  	for variavel in corners2:
    39       225      37774.0    167.9      1.7  		array=np.array([variavel])
    40       225      14914.0     66.3      0.7  		matriz2.append(array)
    41         1       4322.0   4322.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      62489.0  62489.0      2.8  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       7596.0   7596.0      0.3  	matches = bf.match(des1,des2)

