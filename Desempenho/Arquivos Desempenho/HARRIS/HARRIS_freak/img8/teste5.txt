Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.180 MiB   49.180 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   50.098 MiB    0.918 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.215 MiB    0.117 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.449 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.664 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.051 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.234 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.234 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.395 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.395 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.445 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.445 MiB    0.000 MiB   	matriz1=[]
    20   52.445 MiB    0.000 MiB   	for variavel in corners1:
    21   52.445 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.445 MiB    0.000 MiB   		matriz1.append(array)
    23   52.508 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.926 MiB    8.418 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.984 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.566 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.887 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.207 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.207 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.207 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.469 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.789 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.789 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.789 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.789 MiB    0.000 MiB   	matriz2=[]
    38   66.797 MiB    0.000 MiB   	for variavel in corners2:
    39   66.797 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.797 MiB    0.000 MiB   		matriz2.append(array)
    41   66.809 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.820 MiB    0.012 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.176 MiB    0.355 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.36008 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18743.0  18743.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        475.0    475.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3837.0   3837.0      0.2  	imagem1 = np.float32(img1)
    12         1      73564.0  73564.0      3.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14287.0  14287.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12677.0  12677.0      0.5  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5012.0   5012.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12481.0  12481.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20874.0  20874.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3046.0     64.8      0.1  	for variavel in corners1:
    21        46       7469.0    162.4      0.3  		array=np.array([variavel])
    22        46       2937.0     63.8      0.1  		matriz1.append(array)
    23         1       1186.0   1186.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     851007.0 851007.0     36.1  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        275.0    275.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81014.0  81014.0      3.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26797.0  26797.0      1.1  	imagem2 = np.float32(img2)
    30         1     577185.0 577185.0     24.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96849.0  96849.0      4.1  	dst2 = cv2.dilate(dst2,None)
    32         1      83570.0  83570.0      3.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38970.0  38970.0      1.7  	dst2 = np.uint8(dst2)
    34         1      77803.0  77803.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     182925.0 182925.0      7.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       285      18434.0     64.7      0.8  	for variavel in corners2:
    39       284      50514.0    177.9      2.1  		array=np.array([variavel])
    40       284      17829.0     62.8      0.8  		matriz2.append(array)
    41         1       5809.0   5809.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      65452.0  65452.0      2.8  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       8778.0   8778.0      0.4  	matches = bf.match(des1,des2)

