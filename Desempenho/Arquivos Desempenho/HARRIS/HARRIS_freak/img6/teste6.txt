Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.879 MiB   48.879 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.852 MiB    0.973 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.973 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.207 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.527 MiB    1.320 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.863 MiB    0.336 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.043 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.043 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.219 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.219 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.277 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.277 MiB    0.000 MiB   	matriz1=[]
    20   52.277 MiB    0.000 MiB   	for variavel in corners1:
    21   52.277 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.277 MiB    0.000 MiB   		matriz1.append(array)
    23   52.340 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.699 MiB    8.359 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.758 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.340 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.660 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.980 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.980 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.980 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.242 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.562 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.562 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.562 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.562 MiB    0.000 MiB   	matriz2=[]
    38   66.566 MiB    0.000 MiB   	for variavel in corners2:
    39   66.566 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.566 MiB    0.000 MiB   		matriz2.append(array)
    41   66.574 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.582 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.992 MiB    0.410 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.27657 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18186.0  18186.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        357.0    357.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4090.0   4090.0      0.2  	imagem1 = np.float32(img1)
    12         1      74899.0  74899.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13821.0  13821.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12498.0  12498.0      0.5  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5071.0   5071.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12102.0  12102.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21069.0  21069.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3281.0     69.8      0.1  	for variavel in corners1:
    21        46       7611.0    165.5      0.3  		array=np.array([variavel])
    22        46       3358.0     73.0      0.1  		matriz1.append(array)
    23         1       1129.0   1129.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     845583.0 845583.0     37.1  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        390.0    390.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79466.0  79466.0      3.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27282.0  27282.0      1.2  	imagem2 = np.float32(img2)
    30         1     629296.0 629296.0     27.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97157.0  97157.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84823.0  84823.0      3.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37607.0  37607.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76154.0  76154.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      99039.0  99039.0      4.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       179      11890.0     66.4      0.5  	for variavel in corners2:
    39       178      31885.0    179.1      1.4  		array=np.array([variavel])
    40       178      11814.0     66.4      0.5  		matriz2.append(array)
    41         1       3914.0   3914.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      56218.0  56218.0      2.5  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       6294.0   6294.0      0.3  	matches = bf.match(des1,des2)

