Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.641 MiB   48.641 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.512 MiB    0.871 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.637 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.871 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.164 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.621 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.809 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.809 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.949 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.949 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.965 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.965 MiB    0.000 MiB   	matriz1=[]
    20   51.965 MiB    0.000 MiB   	for variavel in corners1:
    21   51.965 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.965 MiB    0.000 MiB   		matriz1.append(array)
    23   51.992 MiB    0.027 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.496 MiB    8.504 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.555 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.137 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.457 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.777 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.777 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.828 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.090 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.410 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.410 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.410 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.410 MiB    0.000 MiB   	matriz2=[]
    38   66.414 MiB    0.000 MiB   	for variavel in corners2:
    39   66.414 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.414 MiB    0.000 MiB   		matriz2.append(array)
    41   66.422 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.430 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.652 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.27947 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17380.0  17380.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        345.0    345.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3867.0   3867.0      0.2  	imagem1 = np.float32(img1)
    12         1      75474.0  75474.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13177.0  13177.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12753.0  12753.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5176.0   5176.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11578.0  11578.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23350.0  23350.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3093.0     65.8      0.1  	for variavel in corners1:
    21        46       7468.0    162.3      0.3  		array=np.array([variavel])
    22        46       2836.0     61.7      0.1  		matriz1.append(array)
    23         1       1252.0   1252.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     844254.0 844254.0     37.0  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        274.0    274.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82744.0  82744.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27164.0  27164.0      1.2  	imagem2 = np.float32(img2)
    30         1     632953.0 632953.0     27.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97016.0  97016.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      82440.0  82440.0      3.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39400.0  39400.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76535.0  76535.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      99158.0  99158.0      4.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       179      11343.0     63.4      0.5  	for variavel in corners2:
    39       178      29755.0    167.2      1.3  		array=np.array([variavel])
    40       178      11660.0     65.5      0.5  		matriz2.append(array)
    41         1       3983.0   3983.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      56292.0  56292.0      2.5  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       6462.0   6462.0      0.3  	matches = bf.match(des1,des2)

