Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.602 MiB   48.602 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.484 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.609 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.902 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.191 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.605 MiB    0.414 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.848 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.848 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.973 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.973 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.984 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.984 MiB    0.000 MiB   	matriz1=[]
    20   51.984 MiB    0.000 MiB   	for variavel in corners1:
    21   51.984 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.984 MiB    0.000 MiB   		matriz1.append(array)
    23   51.988 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.473 MiB    8.484 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.531 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.113 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.434 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.754 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.754 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.809 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.070 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.391 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.391 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.391 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.391 MiB    0.000 MiB   	matriz2=[]
    38   66.395 MiB    0.000 MiB   	for variavel in corners2:
    39   66.395 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.395 MiB    0.000 MiB   		matriz2.append(array)
    41   66.402 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.410 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.750 MiB    0.340 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.2363 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17566.0  17566.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        438.0    438.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3922.0   3922.0      0.2  	imagem1 = np.float32(img1)
    12         1      76253.0  76253.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13550.0  13550.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12428.0  12428.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5944.0   5944.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11592.0  11592.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20963.0  20963.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         61.0     61.0      0.0  	matriz1=[]
    20        47       3758.0     80.0      0.2  	for variavel in corners1:
    21        46       7973.0    173.3      0.4  		array=np.array([variavel])
    22        46       3054.0     66.4      0.1  		matriz1.append(array)
    23         1       1427.0   1427.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     848112.0 848112.0     37.9  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        395.0    395.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79995.0  79995.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27898.0  27898.0      1.2  	imagem2 = np.float32(img2)
    30         1     582636.0 582636.0     26.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97235.0  97235.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      86163.0  86163.0      3.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38385.0  38385.0      1.7  	dst2 = np.uint8(dst2)
    34         1      77109.0  77109.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         86.0     86.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      98780.0  98780.0      4.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       179      12116.0     67.7      0.5  	for variavel in corners2:
    39       178      30526.0    171.5      1.4  		array=np.array([variavel])
    40       178      12550.0     70.5      0.6  		matriz2.append(array)
    41         1       3747.0   3747.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      55155.0  55155.0      2.5  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       6331.0   6331.0      0.3  	matches = bf.match(des1,des2)

