Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.148 MiB   49.148 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   50.066 MiB    0.918 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.184 MiB    0.117 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.418 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.633 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.020 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.203 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.203 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.363 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.363 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.414 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.414 MiB    0.000 MiB   	matriz1=[]
    20   52.414 MiB    0.000 MiB   	for variavel in corners1:
    21   52.414 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.414 MiB    0.000 MiB   		matriz1.append(array)
    23   52.477 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.895 MiB    8.418 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.953 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.535 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.855 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.176 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.176 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.176 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.438 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.758 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.758 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.758 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.758 MiB    0.000 MiB   	matriz2=[]
    38   66.762 MiB    0.000 MiB   	for variavel in corners2:
    39   66.762 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.762 MiB    0.000 MiB   		matriz2.append(array)
    41   66.770 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.777 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.133 MiB    0.355 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.23263 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17141.0  17141.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        338.0    338.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3962.0   3962.0      0.2  	imagem1 = np.float32(img1)
    12         1      75765.0  75765.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13050.0  13050.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12322.0  12322.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5112.0   5112.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11576.0  11576.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21405.0  21405.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3071.0     65.3      0.1  	for variavel in corners1:
    21        46       7660.0    166.5      0.3  		array=np.array([variavel])
    22        46       2885.0     62.7      0.1  		matriz1.append(array)
    23         1       1228.0   1228.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     846294.0 846294.0     37.9  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        389.0    389.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79284.0  79284.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26607.0  26607.0      1.2  	imagem2 = np.float32(img2)
    30         1     576520.0 576520.0     25.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95240.0  95240.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      86104.0  86104.0      3.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39366.0  39366.0      1.8  	dst2 = np.uint8(dst2)
    34         1      74275.0  74275.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114426.0 114426.0      5.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       180      11695.0     65.0      0.5  	for variavel in corners2:
    39       179      28683.0    160.2      1.3  		array=np.array([variavel])
    40       179      11587.0     64.7      0.5  		matriz2.append(array)
    41         1       3748.0   3748.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      56508.0  56508.0      2.5  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       6103.0   6103.0      0.3  	matches = bf.match(des1,des2)

