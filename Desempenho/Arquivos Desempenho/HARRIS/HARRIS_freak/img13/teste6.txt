Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.086 MiB   49.086 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.957 MiB    0.871 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.066 MiB    0.109 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.301 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.516 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.895 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.074 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.074 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.180 MiB    0.105 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.180 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.223 MiB    0.043 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.223 MiB    0.000 MiB   	matriz1=[]
    20   52.223 MiB    0.000 MiB   	for variavel in corners1:
    21   52.223 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.223 MiB    0.000 MiB   		matriz1.append(array)
    23   52.285 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.648 MiB    8.363 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.773 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.355 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.676 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.996 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.996 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.996 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.258 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.578 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.578 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.578 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.578 MiB    0.000 MiB   	matriz2=[]
    38   66.582 MiB    0.000 MiB   	for variavel in corners2:
    39   66.582 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.582 MiB    0.000 MiB   		matriz2.append(array)
    41   66.590 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.598 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.992 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.23371 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17042.0  17042.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        361.0    361.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4058.0   4058.0      0.2  	imagem1 = np.float32(img1)
    12         1      74440.0  74440.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14621.0  14621.0      0.7  	dst1 = cv2.dilate(dst1,None)
    14         1      12366.0  12366.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5045.0   5045.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11755.0  11755.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20957.0  20957.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3013.0     64.1      0.1  	for variavel in corners1:
    21        46       7552.0    164.2      0.3  		array=np.array([variavel])
    22        46       2832.0     61.6      0.1  		matriz1.append(array)
    23         1       1106.0   1106.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847744.0 847744.0     38.0  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        272.0    272.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79646.0  79646.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26572.0  26572.0      1.2  	imagem2 = np.float32(img2)
    30         1     578557.0 578557.0     25.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97306.0  97306.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      82121.0  82121.0      3.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39854.0  39854.0      1.8  	dst2 = np.uint8(dst2)
    34         1      74656.0  74656.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114803.0 114803.0      5.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       180      11541.0     64.1      0.5  	for variavel in corners2:
    39       179      28916.0    161.5      1.3  		array=np.array([variavel])
    40       179      10928.0     61.1      0.5  		matriz2.append(array)
    41         1       3771.0   3771.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      55721.0  55721.0      2.5  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5868.0   5868.0      0.3  	matches = bf.match(des1,des2)

