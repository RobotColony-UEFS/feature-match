Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.602 MiB   48.602 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.480 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.605 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.898 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.191 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.602 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.844 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.844 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.969 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.969 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.980 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.980 MiB    0.000 MiB   	matriz1=[]
    20   51.980 MiB    0.000 MiB   	for variavel in corners1:
    21   51.980 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.980 MiB    0.000 MiB   		matriz1.append(array)
    23   51.984 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.469 MiB    8.484 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.527 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.109 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.430 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.750 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.750 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.805 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.066 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.387 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.387 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.387 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.387 MiB    0.000 MiB   	matriz2=[]
    38   66.391 MiB    0.000 MiB   	for variavel in corners2:
    39   66.391 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.391 MiB    0.000 MiB   		matriz2.append(array)
    41   66.398 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.406 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.746 MiB    0.340 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.24068 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18511.0  18511.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        368.0    368.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4106.0   4106.0      0.2  	imagem1 = np.float32(img1)
    12         1      74159.0  74159.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12304.0  12304.0      0.5  	dst1 = cv2.dilate(dst1,None)
    14         1      14239.0  14239.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5055.0   5055.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11535.0  11535.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21202.0  21202.0      0.9  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3330.0     70.9      0.1  	for variavel in corners1:
    21        46       9062.0    197.0      0.4  		array=np.array([variavel])
    22        46       3029.0     65.8      0.1  		matriz1.append(array)
    23         1       1233.0   1233.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     848219.0 848219.0     37.9  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        288.0    288.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77575.0  77575.0      3.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28170.0  28170.0      1.3  	imagem2 = np.float32(img2)
    30         1     580042.0 580042.0     25.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96141.0  96141.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85892.0  85892.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38561.0  38561.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76175.0  76175.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     115329.0 115329.0      5.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       180      11863.0     65.9      0.5  	for variavel in corners2:
    39       179      28807.0    160.9      1.3  		array=np.array([variavel])
    40       179      11413.0     63.8      0.5  		matriz2.append(array)
    41         1       3878.0   3878.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      53851.0  53851.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       6058.0   6058.0      0.3  	matches = bf.match(des1,des2)

