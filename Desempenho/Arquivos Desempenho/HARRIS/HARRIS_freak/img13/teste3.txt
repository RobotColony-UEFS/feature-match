Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.121 MiB   49.121 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.934 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.098 MiB    0.164 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.332 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.617 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.992 MiB    0.375 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.176 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.176 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.277 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.277 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.316 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.316 MiB    0.000 MiB   	matriz1=[]
    20   52.316 MiB    0.000 MiB   	for variavel in corners1:
    21   52.316 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.316 MiB    0.000 MiB   		matriz1.append(array)
    23   52.320 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.680 MiB    8.359 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.801 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.383 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.703 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.023 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.023 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.023 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.285 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.605 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.605 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.605 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.605 MiB    0.000 MiB   	matriz2=[]
    38   66.609 MiB    0.000 MiB   	for variavel in corners2:
    39   66.609 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.609 MiB    0.000 MiB   		matriz2.append(array)
    41   66.617 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.625 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.910 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.24005 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      19067.0  19067.0      0.9  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        433.0    433.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3848.0   3848.0      0.2  	imagem1 = np.float32(img1)
    12         1      74260.0  74260.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13289.0  13289.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      13952.0  13952.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5029.0   5029.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11567.0  11567.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21793.0  21793.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3050.0     64.9      0.1  	for variavel in corners1:
    21        46       7347.0    159.7      0.3  		array=np.array([variavel])
    22        46       2899.0     63.0      0.1  		matriz1.append(array)
    23         1       1340.0   1340.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     846320.0 846320.0     37.8  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        377.0    377.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77609.0  77609.0      3.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28664.0  28664.0      1.3  	imagem2 = np.float32(img2)
    30         1     576599.0 576599.0     25.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97835.0  97835.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85036.0  85036.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39238.0  39238.0      1.8  	dst2 = np.uint8(dst2)
    34         1      74624.0  74624.0      3.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114258.0 114258.0      5.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       180      11424.0     63.5      0.5  	for variavel in corners2:
    39       179      29516.0    164.9      1.3  		array=np.array([variavel])
    40       179      16039.0     89.6      0.7  		matriz2.append(array)
    41         1       3912.0   3912.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      54422.0  54422.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       6011.0   6011.0      0.3  	matches = bf.match(des1,des2)

