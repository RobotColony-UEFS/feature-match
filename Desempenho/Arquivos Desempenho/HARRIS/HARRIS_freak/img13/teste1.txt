Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.219 MiB   49.219 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   50.141 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.258 MiB    0.117 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.492 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.703 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.094 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.277 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.277 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.438 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.438 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.488 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.488 MiB    0.000 MiB   	matriz1=[]
    20   52.488 MiB    0.000 MiB   	for variavel in corners1:
    21   52.488 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.488 MiB    0.000 MiB   		matriz1.append(array)
    23   52.551 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.969 MiB    8.418 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   61.027 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.609 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.930 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.250 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.250 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.250 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.512 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.832 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.832 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.832 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.832 MiB    0.000 MiB   	matriz2=[]
    38   66.836 MiB    0.000 MiB   	for variavel in corners2:
    39   66.836 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.836 MiB    0.000 MiB   		matriz2.append(array)
    41   66.844 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.852 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.207 MiB    0.355 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.23836 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18147.0  18147.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        360.0    360.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3912.0   3912.0      0.2  	imagem1 = np.float32(img1)
    12         1      74668.0  74668.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13240.0  13240.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12776.0  12776.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5124.0   5124.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11683.0  11683.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21587.0  21587.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3161.0     67.3      0.1  	for variavel in corners1:
    21        46       7480.0    162.6      0.3  		array=np.array([variavel])
    22        46       2979.0     64.8      0.1  		matriz1.append(array)
    23         1       1125.0   1125.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     848631.0 848631.0     37.9  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        278.0    278.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79791.0  79791.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27725.0  27725.0      1.2  	imagem2 = np.float32(img2)
    30         1     578258.0 578258.0     25.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97929.0  97929.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      84399.0  84399.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38743.0  38743.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76739.0  76739.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     112226.0 112226.0      5.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       180      11932.0     66.3      0.5  	for variavel in corners2:
    39       179      30017.0    167.7      1.3  		array=np.array([variavel])
    40       179      11981.0     66.9      0.5  		matriz2.append(array)
    41         1       3766.0   3766.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      53235.0  53235.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       6188.0   6188.0      0.3  	matches = bf.match(des1,des2)

