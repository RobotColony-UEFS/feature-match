Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.988 MiB   48.988 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.918 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.031 MiB    0.113 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.266 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.480 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.867 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.043 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.043 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.152 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.152 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.199 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.199 MiB    0.000 MiB   	matriz1=[]
    20   52.199 MiB    0.000 MiB   	for variavel in corners1:
    21   52.199 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.199 MiB    0.000 MiB   		matriz1.append(array)
    23   52.262 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.621 MiB    8.359 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.746 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.328 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.648 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.969 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.969 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.969 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.230 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.551 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.551 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.551 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.551 MiB    0.000 MiB   	matriz2=[]
    38   66.555 MiB    0.000 MiB   	for variavel in corners2:
    39   66.555 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.555 MiB    0.000 MiB   		matriz2.append(array)
    41   66.562 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.570 MiB    0.008 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.965 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.2514 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17271.0  17271.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        344.0    344.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3942.0   3942.0      0.2  	imagem1 = np.float32(img1)
    12         1      75000.0  75000.0      3.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14002.0  14002.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12494.0  12494.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5013.0   5013.0      0.2  	dst1 = np.uint8(dst1)
    16         1      12373.0  12373.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22395.0  22395.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3152.0     67.1      0.1  	for variavel in corners1:
    21        46       7535.0    163.8      0.3  		array=np.array([variavel])
    22        46       2830.0     61.5      0.1  		matriz1.append(array)
    23         1       1232.0   1232.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     847053.0 847053.0     37.6  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        273.0    273.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80186.0  80186.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26750.0  26750.0      1.2  	imagem2 = np.float32(img2)
    30         1     584862.0 584862.0     26.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97047.0  97047.0      4.3  	dst2 = cv2.dilate(dst2,None)
    32         1      89001.0  89001.0      4.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38803.0  38803.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76428.0  76428.0      3.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     113904.0 113904.0      5.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       180      12833.0     71.3      0.6  	for variavel in corners2:
    39       179      29261.0    163.5      1.3  		array=np.array([variavel])
    40       179      11460.0     64.0      0.5  		matriz2.append(array)
    41         1       4668.0   4668.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      55012.0  55012.0      2.4  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       5986.0   5986.0      0.3  	matches = bf.match(des1,des2)

