Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.602 MiB   48.602 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.480 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.605 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.898 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.191 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.602 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.844 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.844 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.969 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.969 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.980 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.980 MiB    0.000 MiB   	matriz1=[]
    20   51.980 MiB    0.000 MiB   	for variavel in corners1:
    21   51.980 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.980 MiB    0.000 MiB   		matriz1.append(array)
    23   51.984 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.469 MiB    8.484 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.527 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.109 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.430 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.750 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.750 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.805 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.066 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.387 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.387 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.387 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.387 MiB    0.000 MiB   	matriz2=[]
    38   66.391 MiB    0.000 MiB   	for variavel in corners2:
    39   66.391 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.391 MiB    0.000 MiB   		matriz2.append(array)
    41   66.395 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.398 MiB    0.004 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.738 MiB    0.340 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.15797 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17773.0  17773.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        489.0    489.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3896.0   3896.0      0.2  	imagem1 = np.float32(img1)
    12         1      76203.0  76203.0      3.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12531.0  12531.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12873.0  12873.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5417.0   5417.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12918.0  12918.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21158.0  21158.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3100.0     66.0      0.1  	for variavel in corners1:
    21        46       7509.0    163.2      0.3  		array=np.array([variavel])
    22        46       3152.0     68.5      0.1  		matriz1.append(array)
    23         1       1210.0   1210.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     849217.0 849217.0     39.4  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        280.0    280.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80439.0  80439.0      3.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28498.0  28498.0      1.3  	imagem2 = np.float32(img2)
    30         1     578234.0 578234.0     26.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98036.0  98036.0      4.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84158.0  84158.0      3.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      40215.0  40215.0      1.9  	dst2 = np.uint8(dst2)
    34         1      75196.0  75196.0      3.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      61931.0  61931.0      2.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       105       6912.0     65.8      0.3  	for variavel in corners2:
    39       104      17400.0    167.3      0.8  		array=np.array([variavel])
    40       104       6678.0     64.2      0.3  		matriz2.append(array)
    41         1       2359.0   2359.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      45872.0  45872.0      2.1  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       4042.0   4042.0      0.2  	matches = bf.match(des1,des2)

