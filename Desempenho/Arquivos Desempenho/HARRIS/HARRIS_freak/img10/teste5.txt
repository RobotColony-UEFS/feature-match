Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.016 MiB   49.016 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.980 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.102 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.336 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.551 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.941 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.117 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.117 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.285 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.285 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.340 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.340 MiB    0.000 MiB   	matriz1=[]
    20   52.340 MiB    0.000 MiB   	for variavel in corners1:
    21   52.340 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.340 MiB    0.000 MiB   		matriz1.append(array)
    23   52.402 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.824 MiB    8.422 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.883 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.465 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.785 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.105 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.105 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.105 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.367 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.688 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.688 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.688 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.688 MiB    0.000 MiB   	matriz2=[]
    38   66.691 MiB    0.000 MiB   	for variavel in corners2:
    39   66.691 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.691 MiB    0.000 MiB   		matriz2.append(array)
    41   66.695 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.699 MiB    0.004 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   67.051 MiB    0.352 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.20426 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18090.0  18090.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        347.0    347.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       4885.0   4885.0      0.2  	imagem1 = np.float32(img1)
    12         1      74904.0  74904.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12948.0  12948.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      13328.0  13328.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5029.0   5029.0      0.2  	dst1 = np.uint8(dst1)
    16         1      13267.0  13267.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21377.0  21377.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3099.0     65.9      0.1  	for variavel in corners1:
    21        46       7299.0    158.7      0.3  		array=np.array([variavel])
    22        46       2965.0     64.5      0.1  		matriz1.append(array)
    23         1       1215.0   1215.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     844526.0 844526.0     38.3  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1       1452.0   1452.0      0.1  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78467.0  78467.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27815.0  27815.0      1.3  	imagem2 = np.float32(img2)
    30         1     631703.0 631703.0     28.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96659.0  96659.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      84727.0  84727.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37143.0  37143.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76532.0  76532.0      3.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      61955.0  61955.0      2.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       105       9298.0     88.6      0.4  	for variavel in corners2:
    39       104      17794.0    171.1      0.8  		array=np.array([variavel])
    40       104       6534.0     62.8      0.3  		matriz2.append(array)
    41         1       2341.0   2341.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      44185.0  44185.0      2.0  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       4096.0   4096.0      0.2  	matches = bf.match(des1,des2)

