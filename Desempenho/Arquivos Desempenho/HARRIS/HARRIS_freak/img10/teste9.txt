Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.758 MiB   48.758 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.562 MiB    0.805 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.684 MiB    0.121 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   49.918 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.207 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.680 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.867 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.867 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.957 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.957 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.984 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.984 MiB    0.000 MiB   	matriz1=[]
    20   51.984 MiB    0.000 MiB   	for variavel in corners1:
    21   51.984 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.984 MiB    0.000 MiB   		matriz1.append(array)
    23   52.023 MiB    0.039 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.578 MiB    8.555 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.637 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.219 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.539 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   65.859 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   65.859 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   65.859 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.121 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.441 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.441 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.441 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.441 MiB    0.000 MiB   	matriz2=[]
    38   66.445 MiB    0.000 MiB   	for variavel in corners2:
    39   66.445 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.445 MiB    0.000 MiB   		matriz2.append(array)
    41   66.449 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.453 MiB    0.004 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.750 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.15085 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      17063.0  17063.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        354.0    354.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       3934.0   3934.0      0.2  	imagem1 = np.float32(img1)
    12         1      75407.0  75407.0      3.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12285.0  12285.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      12993.0  12993.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5127.0   5127.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11962.0  11962.0      0.6  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22647.0  22647.0      1.1  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3208.0     68.3      0.1  	for variavel in corners1:
    21        46       7548.0    164.1      0.4  		array=np.array([variavel])
    22        46       2978.0     64.7      0.1  		matriz1.append(array)
    23         1       1188.0   1188.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     845289.0 845289.0     39.3  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        399.0    399.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79954.0  79954.0      3.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26782.0  26782.0      1.2  	imagem2 = np.float32(img2)
    30         1     578720.0 578720.0     26.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97221.0  97221.0      4.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84211.0  84211.0      3.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38405.0  38405.0      1.8  	dst2 = np.uint8(dst2)
    34         1      76719.0  76719.0      3.6  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      62667.0  62667.0      2.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         63.0     63.0      0.0  	matriz2=[]
    38       105       7164.0     68.2      0.3  	for variavel in corners2:
    39       104      17164.0    165.0      0.8  		array=np.array([variavel])
    40       104       6801.0     65.4      0.3  		matriz2.append(array)
    41         1       2381.0   2381.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      45875.0  45875.0      2.1  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       4107.0   4107.0      0.2  	matches = bf.match(des1,des2)

