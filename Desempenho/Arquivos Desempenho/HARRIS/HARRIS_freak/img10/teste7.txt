Filename: HARRIS_freak.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.926 MiB   48.926 MiB   @profile
     7                             def HARRIS_freak(img):	
     8   49.809 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.934 MiB    0.125 MiB   	freak = cv2.xfeatures2d.FREAK_create()
    10                             
    11   50.168 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.520 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.906 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.145 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.145 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.270 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.270 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.270 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.270 MiB    0.000 MiB   	matriz1=[]
    20   52.270 MiB    0.000 MiB   	for variavel in corners1:
    21   52.270 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.270 MiB    0.000 MiB   		matriz1.append(array)
    23   52.273 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   60.758 MiB    8.484 MiB   	kp1, des1 = freak.compute(img1, kp1)
    25                             
    26   60.816 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   61.398 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   63.719 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   66.039 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   66.039 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   66.039 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   64.301 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   66.621 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   66.621 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   66.621 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   66.621 MiB    0.000 MiB   	matriz2=[]
    38   66.625 MiB    0.000 MiB   	for variavel in corners2:
    39   66.625 MiB    0.004 MiB   		array=np.array([variavel])
    40   66.625 MiB    0.000 MiB   		matriz2.append(array)
    41   66.629 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   66.633 MiB    0.004 MiB   	kp2, des2 = freak.compute(img2, kp2)
    43                             
    44   66.969 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_freak.py.lprof
Timer unit: 1e-06 s

Total time: 2.20952 s
File: HARRIS_freak.py
Function: HARRIS_freak at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_freak(img):	
     8         1      18003.0  18003.0      0.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        369.0    369.0      0.0  	freak = cv2.xfeatures2d.FREAK_create()
    10                                           
    11         1       5020.0   5020.0      0.2  	imagem1 = np.float32(img1)
    12         1      75440.0  75440.0      3.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13303.0  13303.0      0.6  	dst1 = cv2.dilate(dst1,None)
    14         1      13977.0  13977.0      0.6  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5065.0   5065.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11945.0  11945.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22614.0  22614.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3065.0     65.2      0.1  	for variavel in corners1:
    21        46       7644.0    166.2      0.3  		array=np.array([variavel])
    22        46       2893.0     62.9      0.1  		matriz1.append(array)
    23         1       1191.0   1191.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     846398.0 846398.0     38.3  	kp1, des1 = freak.compute(img1, kp1)
    25                                           
    26         1        282.0    282.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78753.0  78753.0      3.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28070.0  28070.0      1.3  	imagem2 = np.float32(img2)
    30         1     636114.0 636114.0     28.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96737.0  96737.0      4.4  	dst2 = cv2.dilate(dst2,None)
    32         1      83730.0  83730.0      3.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38514.0  38514.0      1.7  	dst2 = np.uint8(dst2)
    34         1      76882.0  76882.0      3.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      61145.0  61145.0      2.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       105       7133.0     67.9      0.3  	for variavel in corners2:
    39       104      17458.0    167.9      0.8  		array=np.array([variavel])
    40       104       7277.0     70.0      0.3  		matriz2.append(array)
    41         1       2352.0   2352.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      43961.0  43961.0      2.0  	kp2, des2 = freak.compute(img2, kp2)
    43                                           
    44         1       3908.0   3908.0      0.2  	matches = bf.match(des1,des2)

