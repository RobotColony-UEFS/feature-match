Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.723 MiB   48.723 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.469 MiB    0.746 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.570 MiB    0.102 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.805 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.094 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.516 MiB    0.422 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.703 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.703 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.797 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.797 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.828 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.828 MiB    0.000 MiB   	matriz1=[]
    20   51.828 MiB    0.000 MiB   	for variavel in corners1:
    21   51.828 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.828 MiB    0.000 MiB   		matriz1.append(array)
    23   51.930 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.449 MiB    0.520 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.508 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.090 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.410 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.730 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.730 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.730 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.992 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.312 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.312 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.312 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.312 MiB    0.000 MiB   	matriz2=[]
    38   58.316 MiB    0.000 MiB   	for variavel in corners2:
    39   58.316 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.316 MiB    0.000 MiB   		matriz2.append(array)
    41   58.320 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.324 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.602 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.35567 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      16932.0  16932.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        333.0    333.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3955.0   3955.0      0.3  	imagem1 = np.float32(img1)
    12         1      76296.0  76296.0      5.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13009.0  13009.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12548.0  12548.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5107.0   5107.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11437.0  11437.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20895.0  20895.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3121.0     66.4      0.2  	for variavel in corners1:
    21        46       9030.0    196.3      0.7  		array=np.array([variavel])
    22        46       4089.0     88.9      0.3  		matriz1.append(array)
    23         1       1360.0   1360.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8635.0   8635.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        284.0    284.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79024.0  79024.0      5.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26532.0  26532.0      2.0  	imagem2 = np.float32(img2)
    30         1     623818.0 623818.0     46.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96276.0  96276.0      7.1  	dst2 = cv2.dilate(dst2,None)
    32         1      85353.0  85353.0      6.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37250.0  37250.0      2.7  	dst2 = np.uint8(dst2)
    34         1      75774.0  75774.0      5.6  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      61195.0  61195.0      4.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       105       6790.0     64.7      0.5  	for variavel in corners2:
    39       104      17235.0    165.7      1.3  		array=np.array([variavel])
    40       104       6686.0     64.3      0.5  		matriz2.append(array)
    41         1       2223.0   2223.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      47694.0  47694.0      3.5  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       2508.0   2508.0      0.2  	matches = bf.match(des1,des2)

