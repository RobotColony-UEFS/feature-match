Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.656 MiB   48.656 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.625 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.730 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.965 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.230 MiB    1.266 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.613 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.914 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.914 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.098 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.098 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.160 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.160 MiB    0.000 MiB   	matriz1=[]
    20   52.160 MiB    0.000 MiB   	for variavel in corners1:
    21   52.160 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.160 MiB    0.000 MiB   		matriz1.append(array)
    23   52.285 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.824 MiB    0.539 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.824 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.406 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.727 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.047 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.047 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.047 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.309 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.629 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.629 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.629 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.629 MiB    0.000 MiB   	matriz2=[]
    38   58.633 MiB    0.000 MiB   	for variavel in corners2:
    39   58.633 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.633 MiB    0.000 MiB   		matriz2.append(array)
    41   58.637 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.641 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.969 MiB    0.328 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.35825 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      16995.0  16995.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        235.0    235.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3950.0   3950.0      0.3  	imagem1 = np.float32(img1)
    12         1      75456.0  75456.0      5.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13180.0  13180.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12456.0  12456.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5215.0   5215.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11454.0  11454.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21871.0  21871.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3123.0     66.4      0.2  	for variavel in corners1:
    21        46       7414.0    161.2      0.5  		array=np.array([variavel])
    22        46       2778.0     60.4      0.2  		matriz1.append(array)
    23         1       1273.0   1273.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8967.0   8967.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        284.0    284.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80308.0  80308.0      5.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28522.0  28522.0      2.1  	imagem2 = np.float32(img2)
    30         1     623868.0 623868.0     45.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97416.0  97416.0      7.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84628.0  84628.0      6.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37356.0  37356.0      2.8  	dst2 = np.uint8(dst2)
    34         1      76431.0  76431.0      5.6  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      60976.0  60976.0      4.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       105       6869.0     65.4      0.5  	for variavel in corners2:
    39       104      18321.0    176.2      1.3  		array=np.array([variavel])
    40       104       6863.0     66.0      0.5  		matriz2.append(array)
    41         1       2247.0   2247.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      46985.0  46985.0      3.5  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       2527.0   2527.0      0.2  	matches = bf.match(des1,des2)

