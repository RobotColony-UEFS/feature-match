Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.586 MiB   48.586 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.465 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.586 MiB    0.121 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.879 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.172 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.582 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.824 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.824 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.949 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.949 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.961 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.961 MiB    0.000 MiB   	matriz1=[]
    20   51.961 MiB    0.000 MiB   	for variavel in corners1:
    21   51.961 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.961 MiB    0.000 MiB   		matriz1.append(array)
    23   52.027 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.516 MiB    0.488 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.516 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.098 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.418 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.738 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.738 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.793 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.055 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.375 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.375 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.375 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.375 MiB    0.000 MiB   	matriz2=[]
    38   58.379 MiB    0.000 MiB   	for variavel in corners2:
    39   58.379 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.379 MiB    0.000 MiB   		matriz2.append(array)
    41   58.383 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.387 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.723 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.309 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17175.0  17175.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        449.0    449.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3818.0   3818.0      0.3  	imagem1 = np.float32(img1)
    12         1      76246.0  76246.0      5.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12924.0  12924.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12428.0  12428.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5136.0   5136.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11590.0  11590.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23890.0  23890.0      1.8  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3151.0     67.0      0.2  	for variavel in corners1:
    21        46       7626.0    165.8      0.6  		array=np.array([variavel])
    22        46       2948.0     64.1      0.2  		matriz1.append(array)
    23         1       1439.0   1439.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8575.0   8575.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        294.0    294.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80648.0  80648.0      6.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26658.0  26658.0      2.0  	imagem2 = np.float32(img2)
    30         1     574899.0 574899.0     43.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96703.0  96703.0      7.4  	dst2 = cv2.dilate(dst2,None)
    32         1      84148.0  84148.0      6.4  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38140.0  38140.0      2.9  	dst2 = np.uint8(dst2)
    34         1      76101.0  76101.0      5.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      59676.0  59676.0      4.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       105       8691.0     82.8      0.7  	for variavel in corners2:
    39       104      17730.0    170.5      1.4  		array=np.array([variavel])
    40       104       6613.0     63.6      0.5  		matriz2.append(array)
    41         1       2339.0   2339.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      45979.0  45979.0      3.5  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       2691.0   2691.0      0.2  	matches = bf.match(des1,des2)

