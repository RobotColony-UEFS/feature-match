Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.121 MiB   49.121 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.996 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.102 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.336 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.547 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.930 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.109 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.109 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.215 MiB    0.105 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.215 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.258 MiB    0.043 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.258 MiB    0.000 MiB   	matriz1=[]
    20   52.258 MiB    0.000 MiB   	for variavel in corners1:
    21   52.258 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.258 MiB    0.000 MiB   		matriz1.append(array)
    23   52.371 MiB    0.113 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.770 MiB    0.398 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.832 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.414 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.734 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.055 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.055 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.055 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.316 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.637 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.637 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.637 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.637 MiB    0.000 MiB   	matriz2=[]
    38   58.641 MiB    0.000 MiB   	for variavel in corners2:
    39   58.641 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.641 MiB    0.000 MiB   		matriz2.append(array)
    41   58.645 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.648 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.043 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.35423 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18653.0  18653.0      1.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        447.0    447.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4564.0   4564.0      0.3  	imagem1 = np.float32(img1)
    12         1      73532.0  73532.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13200.0  13200.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      14452.0  14452.0      1.1  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6447.0   6447.0      0.5  	dst1 = np.uint8(dst1)
    16         1      11454.0  11454.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20983.0  20983.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3077.0     65.5      0.2  	for variavel in corners1:
    21        46       7361.0    160.0      0.5  		array=np.array([variavel])
    22        46       2795.0     60.8      0.2  		matriz1.append(array)
    23         1       1362.0   1362.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8891.0   8891.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        286.0    286.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79621.0  79621.0      5.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26660.0  26660.0      2.0  	imagem2 = np.float32(img2)
    30         1     621192.0 621192.0     45.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      94575.0  94575.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      85282.0  85282.0      6.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      40314.0  40314.0      3.0  	dst2 = np.uint8(dst2)
    34         1      73391.0  73391.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      61457.0  61457.0      4.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       105       6764.0     64.4      0.5  	for variavel in corners2:
    39       104      17094.0    164.4      1.3  		array=np.array([variavel])
    40       104       6520.0     62.7      0.5  		matriz2.append(array)
    41         1       2433.0   2433.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      48713.0  48713.0      3.6  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       2435.0   2435.0      0.2  	matches = bf.match(des1,des2)

