Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.641 MiB   48.641 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.449 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.500 MiB    0.051 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.734 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.020 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.496 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.684 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.684 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.773 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.773 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.801 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.801 MiB    0.000 MiB   	matriz1=[]
    20   51.801 MiB    0.000 MiB   	for variavel in corners1:
    21   51.801 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.801 MiB    0.000 MiB   		matriz1.append(array)
    23   51.898 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.543 MiB    0.645 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.602 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.184 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.504 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.824 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.824 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.824 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.086 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.406 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.406 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.406 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.406 MiB    0.000 MiB   	matriz2=[]
    38   58.410 MiB    0.000 MiB   	for variavel in corners2:
    39   58.410 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.410 MiB    0.000 MiB   		matriz2.append(array)
    41   58.414 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.418 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.711 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.35815 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17351.0  17351.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        316.0    316.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3963.0   3963.0      0.3  	imagem1 = np.float32(img1)
    12         1      75266.0  75266.0      5.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13106.0  13106.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12533.0  12533.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4993.0   4993.0      0.4  	dst1 = np.uint8(dst1)
    16         1      12548.0  12548.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20951.0  20951.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3173.0     67.5      0.2  	for variavel in corners1:
    21        46       8281.0    180.0      0.6  		array=np.array([variavel])
    22        46       4482.0     97.4      0.3  		matriz1.append(array)
    23         1       1353.0   1353.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8918.0   8918.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        174.0    174.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79914.0  79914.0      5.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26559.0  26559.0      2.0  	imagem2 = np.float32(img2)
    30         1     622364.0 622364.0     45.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96900.0  96900.0      7.1  	dst2 = cv2.dilate(dst2,None)
    32         1      84719.0  84719.0      6.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38300.0  38300.0      2.8  	dst2 = np.uint8(dst2)
    34         1      75482.0  75482.0      5.6  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      62077.0  62077.0      4.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       105       6689.0     63.7      0.5  	for variavel in corners2:
    39       104      17347.0    166.8      1.3  		array=np.array([variavel])
    40       104       6528.0     62.8      0.5  		matriz2.append(array)
    41         1       2256.0   2256.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      48592.0  48592.0      3.6  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       2723.0   2723.0      0.2  	matches = bf.match(des1,des2)

