Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.594 MiB   48.594 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.469 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.527 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.762 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.051 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.512 MiB    0.461 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.699 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.699 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.840 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.840 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.855 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.855 MiB    0.000 MiB   	matriz1=[]
    20   51.855 MiB    0.000 MiB   	for variavel in corners1:
    21   51.855 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.855 MiB    0.000 MiB   		matriz1.append(array)
    23   51.945 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.520 MiB    0.574 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.520 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.102 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.422 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.742 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.742 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.793 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.055 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.375 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.375 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.375 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.375 MiB    0.000 MiB   	matriz2=[]
    38   58.379 MiB    0.000 MiB   	for variavel in corners2:
    39   58.379 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.379 MiB    0.000 MiB   		matriz2.append(array)
    41   58.383 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.387 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.605 MiB    0.219 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.30722 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17340.0  17340.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        315.0    315.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3999.0   3999.0      0.3  	imagem1 = np.float32(img1)
    12         1      74591.0  74591.0      5.7  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12228.0  12228.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13029.0  13029.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5152.0   5152.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11669.0  11669.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22989.0  22989.0      1.8  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3130.0     66.6      0.2  	for variavel in corners1:
    21        46       7536.0    163.8      0.6  		array=np.array([variavel])
    22        46       2944.0     64.0      0.2  		matriz1.append(array)
    23         1       1350.0   1350.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9263.0   9263.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        167.0    167.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78983.0  78983.0      6.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26547.0  26547.0      2.0  	imagem2 = np.float32(img2)
    30         1     578973.0 578973.0     44.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95493.0  95493.0      7.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84761.0  84761.0      6.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38030.0  38030.0      2.9  	dst2 = np.uint8(dst2)
    34         1      76052.0  76052.0      5.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      59639.0  59639.0      4.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       105       6894.0     65.7      0.5  	for variavel in corners2:
    39       104      17195.0    165.3      1.3  		array=np.array([variavel])
    40       104       6939.0     66.7      0.5  		matriz2.append(array)
    41         1       2133.0   2133.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      47004.0  47004.0      3.6  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       2592.0   2592.0      0.2  	matches = bf.match(des1,des2)

