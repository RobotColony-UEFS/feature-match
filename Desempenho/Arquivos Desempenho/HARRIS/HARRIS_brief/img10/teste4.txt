Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.688 MiB   48.688 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.496 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.547 MiB    0.051 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.781 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.066 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.543 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.730 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.730 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.820 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.820 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.848 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.848 MiB    0.000 MiB   	matriz1=[]
    20   51.848 MiB    0.000 MiB   	for variavel in corners1:
    21   51.848 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.848 MiB    0.000 MiB   		matriz1.append(array)
    23   51.945 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.590 MiB    0.645 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.648 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.230 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.551 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.871 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.871 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.871 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.133 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.453 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.453 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.453 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.453 MiB    0.000 MiB   	matriz2=[]
    38   58.457 MiB    0.000 MiB   	for variavel in corners2:
    39   58.457 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.457 MiB    0.000 MiB   		matriz2.append(array)
    41   58.461 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.465 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.758 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.37309 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17948.0  17948.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        308.0    308.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3952.0   3952.0      0.3  	imagem1 = np.float32(img1)
    12         1      80765.0  80765.0      5.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13115.0  13115.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      13289.0  13289.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5124.0   5124.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11581.0  11581.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22134.0  22134.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         85.0     85.0      0.0  	matriz1=[]
    20        47       3016.0     64.2      0.2  	for variavel in corners1:
    21        46       7569.0    164.5      0.6  		array=np.array([variavel])
    22        46       2918.0     63.4      0.2  		matriz1.append(array)
    23         1       1430.0   1430.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8785.0   8785.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        167.0    167.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80622.0  80622.0      5.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26786.0  26786.0      2.0  	imagem2 = np.float32(img2)
    30         1     628658.0 628658.0     45.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96342.0  96342.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      85320.0  85320.0      6.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39028.0  39028.0      2.8  	dst2 = np.uint8(dst2)
    34         1      74666.0  74666.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      64800.0  64800.0      4.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       105       6740.0     64.2      0.5  	for variavel in corners2:
    39       104      17907.0    172.2      1.3  		array=np.array([variavel])
    40       104       6580.0     63.3      0.5  		matriz2.append(array)
    41         1       2234.0   2234.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      48150.0  48150.0      3.5  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       2844.0   2844.0      0.2  	matches = bf.match(des1,des2)

