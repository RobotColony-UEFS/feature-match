Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.090 MiB   49.090 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.902 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.008 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.242 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.527 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.902 MiB    0.375 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.086 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.086 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.188 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.188 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.227 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.227 MiB    0.000 MiB   	matriz1=[]
    20   52.227 MiB    0.000 MiB   	for variavel in corners1:
    21   52.227 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.227 MiB    0.000 MiB   		matriz1.append(array)
    23   52.336 MiB    0.109 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.727 MiB    0.391 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.848 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.430 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.750 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.070 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.070 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.070 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.332 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.652 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.652 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.652 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.652 MiB    0.000 MiB   	matriz2=[]
    38   58.656 MiB    0.000 MiB   	for variavel in corners2:
    39   58.656 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.656 MiB    0.000 MiB   		matriz2.append(array)
    41   58.660 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.668 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.891 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.3546 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      16689.0  16689.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        331.0    331.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4009.0   4009.0      0.3  	imagem1 = np.float32(img1)
    12         1      75036.0  75036.0      5.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12284.0  12284.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12975.0  12975.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5973.0   5973.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11583.0  11583.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21582.0  21582.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3103.0     66.0      0.2  	for variavel in corners1:
    21        46       7894.0    171.6      0.6  		array=np.array([variavel])
    22        46       2883.0     62.7      0.2  		matriz1.append(array)
    23         1       1367.0   1367.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      11096.0  11096.0      0.8  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        285.0    285.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78492.0  78492.0      5.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29426.0  29426.0      2.2  	imagem2 = np.float32(img2)
    30         1     578409.0 578409.0     42.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97291.0  97291.0      7.2  	dst2 = cv2.dilate(dst2,None)
    32         1      86160.0  86160.0      6.4  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39027.0  39027.0      2.9  	dst2 = np.uint8(dst2)
    34         1      74616.0  74616.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      75360.0  75360.0      5.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       145       9786.0     67.5      0.7  	for variavel in corners2:
    39       144      29876.0    207.5      2.2  		array=np.array([variavel])
    40       144       9299.0     64.6      0.7  		matriz2.append(array)
    41         1       3115.0   3115.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      53223.0  53223.0      3.9  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3145.0   3145.0      0.2  	matches = bf.match(des1,des2)

