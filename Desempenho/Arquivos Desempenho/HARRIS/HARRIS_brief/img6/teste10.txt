Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.684 MiB   48.684 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.652 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.758 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.992 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.258 MiB    1.266 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.641 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.941 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.941 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.125 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.125 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.188 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.188 MiB    0.000 MiB   	matriz1=[]
    20   52.188 MiB    0.000 MiB   	for variavel in corners1:
    21   52.188 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.188 MiB    0.000 MiB   		matriz1.append(array)
    23   52.312 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.852 MiB    0.539 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.852 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.434 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.754 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.074 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.074 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.074 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.336 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.656 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.656 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.656 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.656 MiB    0.000 MiB   	matriz2=[]
    38   58.660 MiB    0.000 MiB   	for variavel in corners2:
    39   58.660 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.660 MiB    0.000 MiB   		matriz2.append(array)
    41   58.668 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.676 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.004 MiB    0.328 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.44798 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      16735.0  16735.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        357.0    357.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       5807.0   5807.0      0.4  	imagem1 = np.float32(img1)
    12         1      73667.0  73667.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13424.0  13424.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      14259.0  14259.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5215.0   5215.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11460.0  11460.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1        135.0    135.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22063.0  22063.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3584.0     76.3      0.2  	for variavel in corners1:
    21        46       9331.0    202.8      0.6  		array=np.array([variavel])
    22        46       3158.0     68.7      0.2  		matriz1.append(array)
    23         1       2519.0   2519.0      0.2  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8942.0   8942.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        285.0    285.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79821.0  79821.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26619.0  26619.0      1.8  	imagem2 = np.float32(img2)
    30         1     627412.0 627412.0     43.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96630.0  96630.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      86058.0  86058.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39189.0  39189.0      2.7  	dst2 = np.uint8(dst2)
    34         1      77777.0  77777.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     101884.0 101884.0      7.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       179      11865.0     66.3      0.8  	for variavel in corners2:
    39       178      30060.0    168.9      2.1  		array=np.array([variavel])
    40       178      11521.0     64.7      0.8  		matriz2.append(array)
    41         1       3798.0   3798.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      60344.0  60344.0      4.2  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3857.0   3857.0      0.3  	matches = bf.match(des1,des2)

