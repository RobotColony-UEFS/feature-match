Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.594 MiB   48.594 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.469 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.527 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.762 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.051 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.512 MiB    0.461 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.699 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.699 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.840 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.840 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.855 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.855 MiB    0.000 MiB   	matriz1=[]
    20   51.855 MiB    0.000 MiB   	for variavel in corners1:
    21   51.855 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.855 MiB    0.000 MiB   		matriz1.append(array)
    23   51.945 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.520 MiB    0.574 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.520 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.102 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.422 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.742 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.742 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.793 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.055 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.375 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.375 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.375 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.375 MiB    0.000 MiB   	matriz2=[]
    38   58.379 MiB    0.000 MiB   	for variavel in corners2:
    39   58.379 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.379 MiB    0.000 MiB   		matriz2.append(array)
    41   58.387 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.395 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.613 MiB    0.219 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.38669 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17095.0  17095.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        351.0    351.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4239.0   4239.0      0.3  	imagem1 = np.float32(img1)
    12         1      75196.0  75196.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12232.0  12232.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13185.0  13185.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5824.0   5824.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11688.0  11688.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20966.0  20966.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1        107.0    107.0      0.0  	matriz1=[]
    20        47       3178.0     67.6      0.2  	for variavel in corners1:
    21        46       7498.0    163.0      0.5  		array=np.array([variavel])
    22        46       2854.0     62.0      0.2  		matriz1.append(array)
    23         1       1585.0   1585.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      10875.0  10875.0      0.8  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        176.0    176.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77528.0  77528.0      5.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29076.0  29076.0      2.1  	imagem2 = np.float32(img2)
    30         1     573986.0 573986.0     41.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96676.0  96676.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      86033.0  86033.0      6.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39475.0  39475.0      2.8  	dst2 = np.uint8(dst2)
    34         1      74628.0  74628.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100225.0 100225.0      7.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       179      12426.0     69.4      0.9  	for variavel in corners2:
    39       178      31498.0    177.0      2.3  		array=np.array([variavel])
    40       178      11139.0     62.6      0.8  		matriz2.append(array)
    41         1       3665.0   3665.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      59130.0  59130.0      4.3  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3933.0   3933.0      0.3  	matches = bf.match(des1,des2)

