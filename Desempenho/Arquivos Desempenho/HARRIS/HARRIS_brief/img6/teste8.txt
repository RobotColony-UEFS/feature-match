Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.703 MiB   48.703 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.512 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.570 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.805 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.156 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.621 MiB    0.465 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.809 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.809 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.891 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.891 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.910 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.910 MiB    0.000 MiB   	matriz1=[]
    20   51.910 MiB    0.000 MiB   	for variavel in corners1:
    21   51.910 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.910 MiB    0.000 MiB   		matriz1.append(array)
    23   52.004 MiB    0.094 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.520 MiB    0.516 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.578 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.160 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.480 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.801 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.801 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.848 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.109 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.430 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.430 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.430 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.430 MiB    0.000 MiB   	matriz2=[]
    38   58.434 MiB    0.000 MiB   	for variavel in corners2:
    39   58.434 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.434 MiB    0.000 MiB   		matriz2.append(array)
    41   58.441 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.449 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.672 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.38852 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18029.0  18029.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        320.0    320.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4472.0   4472.0      0.3  	imagem1 = np.float32(img1)
    12         1      74889.0  74889.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13294.0  13294.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      13839.0  13839.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5313.0   5313.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11811.0  11811.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22114.0  22114.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         61.0     61.0      0.0  	matriz1=[]
    20        47       3178.0     67.6      0.2  	for variavel in corners1:
    21        46       7331.0    159.4      0.5  		array=np.array([variavel])
    22        46       2847.0     61.9      0.2  		matriz1.append(array)
    23         1       1424.0   1424.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8475.0   8475.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        293.0    293.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79220.0  79220.0      5.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26756.0  26756.0      1.9  	imagem2 = np.float32(img2)
    30         1     577276.0 577276.0     41.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96758.0  96758.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      84801.0  84801.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37795.0  37795.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76525.0  76525.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     102238.0 102238.0      7.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       179      13071.0     73.0      0.9  	for variavel in corners2:
    39       178      29680.0    166.7      2.1  		array=np.array([variavel])
    40       178      11410.0     64.1      0.8  		matriz2.append(array)
    41         1       3503.0   3503.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      57797.0  57797.0      4.2  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3774.0   3774.0      0.3  	matches = bf.match(des1,des2)

