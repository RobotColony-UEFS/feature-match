Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.965 MiB   48.965 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.895 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.000 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.234 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.449 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.836 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.012 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.012 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.121 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.121 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.168 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.168 MiB    0.000 MiB   	matriz1=[]
    20   52.168 MiB    0.000 MiB   	for variavel in corners1:
    21   52.168 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.168 MiB    0.000 MiB   		matriz1.append(array)
    23   52.285 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.684 MiB    0.398 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.746 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.328 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.648 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.969 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.969 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.969 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.230 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.551 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.551 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.551 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.551 MiB    0.000 MiB   	matriz2=[]
    38   58.555 MiB    0.000 MiB   	for variavel in corners2:
    39   58.555 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.555 MiB    0.000 MiB   		matriz2.append(array)
    41   58.562 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.570 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.965 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.38446 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      19931.0  19931.0      1.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        316.0    316.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3870.0   3870.0      0.3  	imagem1 = np.float32(img1)
    12         1      72343.0  72343.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12191.0  12191.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      15010.0  15010.0      1.1  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5171.0   5171.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11779.0  11779.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         94.0     94.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21528.0  21528.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         96.0     96.0      0.0  	matriz1=[]
    20        47       3106.0     66.1      0.2  	for variavel in corners1:
    21        46       7477.0    162.5      0.5  		array=np.array([variavel])
    22        46       3148.0     68.4      0.2  		matriz1.append(array)
    23         1       1362.0   1362.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      10343.0  10343.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        177.0    177.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80901.0  80901.0      5.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26858.0  26858.0      1.9  	imagem2 = np.float32(img2)
    30         1     575850.0 575850.0     41.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97941.0  97941.0      7.1  	dst2 = cv2.dilate(dst2,None)
    32         1      84841.0  84841.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37117.0  37117.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76340.0  76340.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      93390.0  93390.0      6.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       184      12612.0     68.5      0.9  	for variavel in corners2:
    39       183      31714.0    173.3      2.3  		array=np.array([variavel])
    40       183      11974.0     65.4      0.9  		matriz2.append(array)
    41         1       3829.0   3829.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      58895.0  58895.0      4.3  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       4116.0   4116.0      0.3  	matches = bf.match(des1,des2)

