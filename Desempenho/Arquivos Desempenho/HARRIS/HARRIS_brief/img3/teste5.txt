Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.871 MiB   48.871 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.754 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.871 MiB    0.117 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.105 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.457 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.844 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.082 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.082 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.207 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.207 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.207 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.207 MiB    0.000 MiB   	matriz1=[]
    20   52.207 MiB    0.000 MiB   	for variavel in corners1:
    21   52.207 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.207 MiB    0.000 MiB   		matriz1.append(array)
    23   52.273 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.758 MiB    0.484 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.758 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.340 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.660 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.980 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.980 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.980 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.242 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.562 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.562 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.562 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.562 MiB    0.000 MiB   	matriz2=[]
    38   58.566 MiB    0.000 MiB   	for variavel in corners2:
    39   58.566 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.566 MiB    0.000 MiB   		matriz2.append(array)
    41   58.574 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.582 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.914 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.39068 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17234.0  17234.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        312.0    312.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3929.0   3929.0      0.3  	imagem1 = np.float32(img1)
    12         1      73983.0  73983.0      5.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13548.0  13548.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12550.0  12550.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6020.0   6020.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11745.0  11745.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21053.0  21053.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3080.0     65.5      0.2  	for variavel in corners1:
    21        46       7620.0    165.7      0.5  		array=np.array([variavel])
    22        46       2921.0     63.5      0.2  		matriz1.append(array)
    23         1       1287.0   1287.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9757.0   9757.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        169.0    169.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80540.0  80540.0      5.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28698.0  28698.0      2.1  	imagem2 = np.float32(img2)
    30         1     580581.0 580581.0     41.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96854.0  96854.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      85390.0  85390.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39393.0  39393.0      2.8  	dst2 = np.uint8(dst2)
    34         1      74552.0  74552.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      93301.0  93301.0      6.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       184      12036.0     65.4      0.9  	for variavel in corners2:
    39       183      31883.0    174.2      2.3  		array=np.array([variavel])
    40       183      12534.0     68.5      0.9  		matriz2.append(array)
    41         1       3876.0   3876.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      61407.0  61407.0      4.4  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       4145.0   4145.0      0.3  	matches = bf.match(des1,des2)

