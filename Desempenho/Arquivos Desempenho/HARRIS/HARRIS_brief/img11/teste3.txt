Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.660 MiB   48.660 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.629 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.734 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.969 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.234 MiB    1.266 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.617 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.918 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.918 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.102 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.102 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.164 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.164 MiB    0.000 MiB   	matriz1=[]
    20   52.164 MiB    0.000 MiB   	for variavel in corners1:
    21   52.164 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.164 MiB    0.000 MiB   		matriz1.append(array)
    23   52.289 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.828 MiB    0.539 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.828 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.410 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.730 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.051 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.051 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.051 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.312 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.633 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.633 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.633 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.633 MiB    0.000 MiB   	matriz2=[]
    38   58.637 MiB    0.000 MiB   	for variavel in corners2:
    39   58.637 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.637 MiB    0.000 MiB   		matriz2.append(array)
    41   58.641 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.645 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.973 MiB    0.328 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.40312 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      16949.0  16949.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        250.0    250.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3947.0   3947.0      0.3  	imagem1 = np.float32(img1)
    12         1      77110.0  77110.0      5.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13297.0  13297.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13013.0  13013.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6129.0   6129.0      0.4  	dst1 = np.uint8(dst1)
    16         1      12465.0  12465.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21417.0  21417.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3127.0     66.5      0.2  	for variavel in corners1:
    21        46       7488.0    162.8      0.5  		array=np.array([variavel])
    22        46       3087.0     67.1      0.2  		matriz1.append(array)
    23         1       1354.0   1354.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8786.0   8786.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        281.0    281.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77192.0  77192.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26737.0  26737.0      1.9  	imagem2 = np.float32(img2)
    30         1     627447.0 627447.0     44.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98741.0  98741.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      85221.0  85221.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39693.0  39693.0      2.8  	dst2 = np.uint8(dst2)
    34         1      74143.0  74143.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1        198.0    198.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      87594.0  87594.0      6.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       129       9954.0     77.2      0.7  	for variavel in corners2:
    39       128      22475.0    175.6      1.6  		array=np.array([variavel])
    40       128       8177.0     63.9      0.6  		matriz2.append(array)
    41         1       2794.0   2794.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      50259.0  50259.0      3.6  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3585.0   3585.0      0.3  	matches = bf.match(des1,des2)

