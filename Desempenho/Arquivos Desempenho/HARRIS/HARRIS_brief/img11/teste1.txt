Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.719 MiB   48.719 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.465 MiB    0.746 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.566 MiB    0.102 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.801 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.090 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.512 MiB    0.422 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.699 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.699 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.793 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.793 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.824 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.824 MiB    0.000 MiB   	matriz1=[]
    20   51.824 MiB    0.000 MiB   	for variavel in corners1:
    21   51.824 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.824 MiB    0.000 MiB   		matriz1.append(array)
    23   51.926 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.445 MiB    0.520 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.504 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.086 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.406 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.727 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.727 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.727 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.988 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.309 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.309 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.309 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.309 MiB    0.000 MiB   	matriz2=[]
    38   58.312 MiB    0.000 MiB   	for variavel in corners2:
    39   58.312 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.312 MiB    0.000 MiB   		matriz2.append(array)
    41   58.316 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.320 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.598 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.39513 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17410.0  17410.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        348.0    348.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3857.0   3857.0      0.3  	imagem1 = np.float32(img1)
    12         1      75652.0  75652.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13785.0  13785.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12425.0  12425.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5199.0   5199.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11457.0  11457.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22189.0  22189.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3121.0     66.4      0.2  	for variavel in corners1:
    21        46       7685.0    167.1      0.6  		array=np.array([variavel])
    22        46       3073.0     66.8      0.2  		matriz1.append(array)
    23         1       1359.0   1359.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8802.0   8802.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        172.0    172.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76107.0  76107.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28133.0  28133.0      2.0  	imagem2 = np.float32(img2)
    30         1     624429.0 624429.0     44.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96444.0  96444.0      6.9  	dst2 = cv2.dilate(dst2,None)
    32         1      85737.0  85737.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37052.0  37052.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76060.0  76060.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      86894.0  86894.0      6.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       129       8558.0     66.3      0.6  	for variavel in corners2:
    39       128      22498.0    175.8      1.6  		array=np.array([variavel])
    40       128       8268.0     64.6      0.6  		matriz2.append(array)
    41         1       2834.0   2834.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      52234.0  52234.0      3.7  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3051.0   3051.0      0.2  	matches = bf.match(des1,des2)

