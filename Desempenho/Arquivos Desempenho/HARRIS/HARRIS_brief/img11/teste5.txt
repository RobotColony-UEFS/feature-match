Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.723 MiB   48.723 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.469 MiB    0.746 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.570 MiB    0.102 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.805 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.094 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.516 MiB    0.422 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.703 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.703 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.797 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.797 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.828 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.828 MiB    0.000 MiB   	matriz1=[]
    20   51.828 MiB    0.000 MiB   	for variavel in corners1:
    21   51.828 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.828 MiB    0.000 MiB   		matriz1.append(array)
    23   51.930 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.449 MiB    0.520 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.508 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.090 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.410 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.730 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.730 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.730 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.992 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.312 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.312 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.312 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.312 MiB    0.000 MiB   	matriz2=[]
    38   58.316 MiB    0.000 MiB   	for variavel in corners2:
    39   58.316 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.316 MiB    0.000 MiB   		matriz2.append(array)
    41   58.320 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.324 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.602 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.34997 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17117.0  17117.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        329.0    329.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4091.0   4091.0      0.3  	imagem1 = np.float32(img1)
    12         1      75080.0  75080.0      5.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12384.0  12384.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13360.0  13360.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5113.0   5113.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11681.0  11681.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         93.0     93.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23253.0  23253.0      1.7  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3106.0     66.1      0.2  	for variavel in corners1:
    21        46       7589.0    165.0      0.6  		array=np.array([variavel])
    22        46       3005.0     65.3      0.2  		matriz1.append(array)
    23         1       1187.0   1187.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      10265.0  10265.0      0.8  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        178.0    178.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      75077.0  75077.0      5.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27664.0  27664.0      2.0  	imagem2 = np.float32(img2)
    30         1     576987.0 576987.0     42.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96877.0  96877.0      7.2  	dst2 = cv2.dilate(dst2,None)
    32         1      83968.0  83968.0      6.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39624.0  39624.0      2.9  	dst2 = np.uint8(dst2)
    34         1      74715.0  74715.0      5.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1       1116.0   1116.0      0.1  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      88978.0  88978.0      6.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       129       8764.0     67.9      0.6  	for variavel in corners2:
    39       128      21522.0    168.1      1.6  		array=np.array([variavel])
    40       128       8934.0     69.8      0.7  		matriz2.append(array)
    41         1       2661.0   2661.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      50649.0  50649.0      3.8  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       4488.0   4488.0      0.3  	matches = bf.match(des1,des2)

