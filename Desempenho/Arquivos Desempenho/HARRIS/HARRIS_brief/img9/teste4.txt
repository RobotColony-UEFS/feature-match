Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.613 MiB   48.613 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.352 MiB    0.738 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.457 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.691 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.035 MiB    1.344 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.508 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.695 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.695 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.781 MiB    0.086 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.781 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.805 MiB    0.023 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.805 MiB    0.000 MiB   	matriz1=[]
    20   51.805 MiB    0.000 MiB   	for variavel in corners1:
    21   51.805 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.805 MiB    0.000 MiB   		matriz1.append(array)
    23   51.902 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.480 MiB    0.578 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.539 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.121 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.441 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.762 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.762 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.809 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.070 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.391 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.391 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.391 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.391 MiB    0.000 MiB   	matriz2=[]
    38   58.395 MiB    0.000 MiB   	for variavel in corners2:
    39   58.395 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.395 MiB    0.000 MiB   		matriz2.append(array)
    41   58.402 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.410 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.641 MiB    0.230 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.44682 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17132.0  17132.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        441.0    441.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4002.0   4002.0      0.3  	imagem1 = np.float32(img1)
    12         1      75726.0  75726.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12986.0  12986.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12336.0  12336.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5200.0   5200.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11723.0  11723.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1        194.0    194.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22041.0  22041.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3078.0     65.5      0.2  	for variavel in corners1:
    21        46       7687.0    167.1      0.5  		array=np.array([variavel])
    22        46       2923.0     63.5      0.2  		matriz1.append(array)
    23         1       1323.0   1323.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      10121.0  10121.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        169.0    169.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79793.0  79793.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28548.0  28548.0      2.0  	imagem2 = np.float32(img2)
    30         1     625115.0 625115.0     43.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96737.0  96737.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      85131.0  85131.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37157.0  37157.0      2.6  	dst2 = np.uint8(dst2)
    34         1      77031.0  77031.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     103242.0 103242.0      7.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       190      13265.0     69.8      0.9  	for variavel in corners2:
    39       189      31282.0    165.5      2.2  		array=np.array([variavel])
    40       189      12098.0     64.0      0.8  		matriz2.append(array)
    41         1       3951.0   3951.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      62445.0  62445.0      4.3  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3740.0   3740.0      0.3  	matches = bf.match(des1,des2)

