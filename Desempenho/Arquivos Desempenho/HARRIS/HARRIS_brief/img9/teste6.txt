Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.719 MiB   48.719 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.469 MiB    0.750 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.570 MiB    0.102 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.805 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.090 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.516 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.703 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.703 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.797 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.797 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.828 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.828 MiB    0.000 MiB   	matriz1=[]
    20   51.828 MiB    0.000 MiB   	for variavel in corners1:
    21   51.828 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.828 MiB    0.000 MiB   		matriz1.append(array)
    23   51.930 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.449 MiB    0.520 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.508 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.090 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.410 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.730 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.730 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.730 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.992 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.312 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.312 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.312 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.312 MiB    0.000 MiB   	matriz2=[]
    38   58.316 MiB    0.000 MiB   	for variavel in corners2:
    39   58.316 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.316 MiB    0.000 MiB   		matriz2.append(array)
    41   58.324 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.332 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.609 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.44947 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18013.0  18013.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        332.0    332.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4088.0   4088.0      0.3  	imagem1 = np.float32(img1)
    12         1      74580.0  74580.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13375.0  13375.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13319.0  13319.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4942.0   4942.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11675.0  11675.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21345.0  21345.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3072.0     65.4      0.2  	for variavel in corners1:
    21        46       8345.0    181.4      0.6  		array=np.array([variavel])
    22        46       3089.0     67.2      0.2  		matriz1.append(array)
    23         1       1353.0   1353.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      10262.0  10262.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        278.0    278.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82153.0  82153.0      5.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26633.0  26633.0      1.8  	imagem2 = np.float32(img2)
    30         1     627849.0 627849.0     43.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96902.0  96902.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      84041.0  84041.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38260.0  38260.0      2.6  	dst2 = np.uint8(dst2)
    34         1      77092.0  77092.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     103699.0 103699.0      7.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       190      13184.0     69.4      0.9  	for variavel in corners2:
    39       189      30693.0    162.4      2.1  		array=np.array([variavel])
    40       189      13536.0     71.6      0.9  		matriz2.append(array)
    41         1       4123.0   4123.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      58376.0  58376.0      4.0  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       4586.0   4586.0      0.3  	matches = bf.match(des1,des2)

