Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.848 MiB   48.848 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.734 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.852 MiB    0.117 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.086 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.434 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.824 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.062 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.062 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.188 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.188 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.188 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.188 MiB    0.000 MiB   	matriz1=[]
    20   52.188 MiB    0.000 MiB   	for variavel in corners1:
    21   52.188 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.188 MiB    0.000 MiB   		matriz1.append(array)
    23   52.254 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.738 MiB    0.484 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.738 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.320 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.641 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.961 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.961 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.961 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.223 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.543 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.543 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.543 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.543 MiB    0.000 MiB   	matriz2=[]
    38   58.547 MiB    0.000 MiB   	for variavel in corners2:
    39   58.547 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.547 MiB    0.000 MiB   		matriz2.append(array)
    41   58.555 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.562 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.895 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.44354 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18757.0  18757.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        308.0    308.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4083.0   4083.0      0.3  	imagem1 = np.float32(img1)
    12         1      74346.0  74346.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14126.0  14126.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12318.0  12318.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5102.0   5102.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11558.0  11558.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21009.0  21009.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3069.0     65.3      0.2  	for variavel in corners1:
    21        46       7585.0    164.9      0.5  		array=np.array([variavel])
    22        46       2865.0     62.3      0.2  		matriz1.append(array)
    23         1       1370.0   1370.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8883.0   8883.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        174.0    174.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81566.0  81566.0      5.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29853.0  29853.0      2.1  	imagem2 = np.float32(img2)
    30         1     624184.0 624184.0     43.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96780.0  96780.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      84268.0  84268.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38042.0  38042.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76551.0  76551.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     105810.0 105810.0      7.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       190      12515.0     65.9      0.9  	for variavel in corners2:
    39       189      31378.0    166.0      2.2  		array=np.array([variavel])
    40       189      11906.0     63.0      0.8  		matriz2.append(array)
    41         1       4749.0   4749.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      56438.0  56438.0      3.9  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3655.0   3655.0      0.3  	matches = bf.match(des1,des2)

