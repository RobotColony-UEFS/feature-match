Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.664 MiB   48.664 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.539 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.598 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.832 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.125 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.582 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.770 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.770 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.910 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.910 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.926 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.926 MiB    0.000 MiB   	matriz1=[]
    20   51.926 MiB    0.000 MiB   	for variavel in corners1:
    21   51.926 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.926 MiB    0.000 MiB   		matriz1.append(array)
    23   52.016 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.590 MiB    0.574 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.590 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.172 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.492 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.812 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.812 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.863 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.125 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.445 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.445 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.445 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.445 MiB    0.000 MiB   	matriz2=[]
    38   58.453 MiB    0.000 MiB   	for variavel in corners2:
    39   58.453 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.453 MiB    0.000 MiB   		matriz2.append(array)
    41   58.465 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.473 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.691 MiB    0.219 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.51884 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17130.0  17130.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        370.0    370.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4905.0   4905.0      0.3  	imagem1 = np.float32(img1)
    12         1      72531.0  72531.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14190.0  14190.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13729.0  13729.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4915.0   4915.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11664.0  11664.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21445.0  21445.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3030.0     64.5      0.2  	for variavel in corners1:
    21        46       7353.0    159.8      0.5  		array=np.array([variavel])
    22        46       2955.0     64.2      0.2  		matriz1.append(array)
    23         1       1410.0   1410.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9196.0   9196.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        278.0    278.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79718.0  79718.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29276.0  29276.0      1.9  	imagem2 = np.float32(img2)
    30         1     575328.0 575328.0     37.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96885.0  96885.0      6.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85442.0  85442.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37104.0  37104.0      2.4  	dst2 = np.uint8(dst2)
    34         1      77060.0  77060.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     190556.0 190556.0     12.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       273      17513.0     64.2      1.2  	for variavel in corners2:
    39       272      44117.0    162.2      2.9  		array=np.array([variavel])
    40       272      19128.0     70.3      1.3  		matriz2.append(array)
    41         1       5681.0   5681.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      70895.0  70895.0      4.7  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       4745.0   4745.0      0.3  	matches = bf.match(des1,des2)

