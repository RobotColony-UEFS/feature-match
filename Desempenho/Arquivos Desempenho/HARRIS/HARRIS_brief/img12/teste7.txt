Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.586 MiB   48.586 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.461 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.520 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.754 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.043 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.504 MiB    0.461 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.691 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.691 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.832 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.832 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.848 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.848 MiB    0.000 MiB   	matriz1=[]
    20   51.848 MiB    0.000 MiB   	for variavel in corners1:
    21   51.848 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.848 MiB    0.000 MiB   		matriz1.append(array)
    23   51.938 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.512 MiB    0.574 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.512 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.094 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.414 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.734 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.734 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.785 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.047 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.367 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.367 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.367 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.367 MiB    0.000 MiB   	matriz2=[]
    38   58.371 MiB    0.000 MiB   	for variavel in corners2:
    39   58.371 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.371 MiB    0.000 MiB   		matriz2.append(array)
    41   58.379 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.383 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.621 MiB    0.238 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.38089 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18047.0  18047.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        330.0    330.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4002.0   4002.0      0.3  	imagem1 = np.float32(img1)
    12         1      75522.0  75522.0      5.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14026.0  14026.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12424.0  12424.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5156.0   5156.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11490.0  11490.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21280.0  21280.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3192.0     67.9      0.2  	for variavel in corners1:
    21        46       7613.0    165.5      0.6  		array=np.array([variavel])
    22        46       3972.0     86.3      0.3  		matriz1.append(array)
    23         1       1486.0   1486.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8734.0   8734.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        289.0    289.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76821.0  76821.0      5.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28684.0  28684.0      2.1  	imagem2 = np.float32(img2)
    30         1     574812.0 574812.0     41.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96597.0  96597.0      7.0  	dst2 = cv2.dilate(dst2,None)
    32         1      85464.0  85464.0      6.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39221.0  39221.0      2.8  	dst2 = np.uint8(dst2)
    34         1      74794.0  74794.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     102599.0 102599.0      7.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       165      10892.0     66.0      0.8  	for variavel in corners2:
    39       164      28576.0    174.2      2.1  		array=np.array([variavel])
    40       164      10195.0     62.2      0.7  		matriz2.append(array)
    41         1       3516.0   3516.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      56819.0  56819.0      4.1  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       4052.0   4052.0      0.3  	matches = bf.match(des1,des2)

