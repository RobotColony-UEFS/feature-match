Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.066 MiB   49.066 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.996 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.102 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.336 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.551 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.938 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.113 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.113 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.223 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.223 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.270 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.270 MiB    0.000 MiB   	matriz1=[]
    20   52.270 MiB    0.000 MiB   	for variavel in corners1:
    21   52.270 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.270 MiB    0.000 MiB   		matriz1.append(array)
    23   52.387 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.785 MiB    0.398 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.848 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.430 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.750 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.070 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.070 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.070 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.332 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.652 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.652 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.652 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.652 MiB    0.000 MiB   	matriz2=[]
    38   58.656 MiB    0.000 MiB   	for variavel in corners2:
    39   58.656 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.656 MiB    0.000 MiB   		matriz2.append(array)
    41   58.664 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.668 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.062 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.43373 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      19698.0  19698.0      1.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        327.0    327.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4006.0   4006.0      0.3  	imagem1 = np.float32(img1)
    12         1      72782.0  72782.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14871.0  14871.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      13313.0  13313.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5099.0   5099.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11607.0  11607.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21372.0  21372.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3031.0     64.5      0.2  	for variavel in corners1:
    21        46       7523.0    163.5      0.5  		array=np.array([variavel])
    22        46       2930.0     63.7      0.2  		matriz1.append(array)
    23         1       1269.0   1269.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8719.0   8719.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        390.0    390.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78731.0  78731.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26745.0  26745.0      1.9  	imagem2 = np.float32(img2)
    30         1     631476.0 631476.0     44.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96156.0  96156.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      84100.0  84100.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38166.0  38166.0      2.7  	dst2 = np.uint8(dst2)
    34         1      76919.0  76919.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      99653.0  99653.0      7.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       165      11393.0     69.0      0.8  	for variavel in corners2:
    39       164      26975.0    164.5      1.9  		array=np.array([variavel])
    40       164      10772.0     65.7      0.8  		matriz2.append(array)
    41         1       3617.0   3617.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      58086.0  58086.0      4.1  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3717.0   3717.0      0.3  	matches = bf.match(des1,des2)

