Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.543 MiB   48.543 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.418 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.477 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.711 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.000 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.461 MiB    0.461 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.648 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.648 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.789 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.789 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.805 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.805 MiB    0.000 MiB   	matriz1=[]
    20   51.805 MiB    0.000 MiB   	for variavel in corners1:
    21   51.805 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.805 MiB    0.000 MiB   		matriz1.append(array)
    23   51.895 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.469 MiB    0.574 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.469 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.051 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.371 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.691 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.691 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.742 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.004 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.324 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.324 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.324 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.324 MiB    0.000 MiB   	matriz2=[]
    38   58.328 MiB    0.000 MiB   	for variavel in corners2:
    39   58.328 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.328 MiB    0.000 MiB   		matriz2.append(array)
    41   58.336 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.340 MiB    0.004 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.559 MiB    0.219 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.43635 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18051.0  18051.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        462.0    462.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3891.0   3891.0      0.3  	imagem1 = np.float32(img1)
    12         1      77432.0  77432.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13165.0  13165.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12465.0  12465.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5194.0   5194.0      0.4  	dst1 = np.uint8(dst1)
    16         1      13473.0  13473.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21672.0  21672.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3116.0     66.3      0.2  	for variavel in corners1:
    21        46       7748.0    168.4      0.5  		array=np.array([variavel])
    22        46       2808.0     61.0      0.2  		matriz1.append(array)
    23         1       1205.0   1205.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8786.0   8786.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        172.0    172.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79319.0  79319.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26951.0  26951.0      1.9  	imagem2 = np.float32(img2)
    30         1     628257.0 628257.0     43.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96959.0  96959.0      6.8  	dst2 = cv2.dilate(dst2,None)
    32         1      85762.0  85762.0      6.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39275.0  39275.0      2.7  	dst2 = np.uint8(dst2)
    34         1      75144.0  75144.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      99638.0  99638.0      6.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       165      12123.0     73.5      0.8  	for variavel in corners2:
    39       164      28061.0    171.1      2.0  		array=np.array([variavel])
    40       164      10815.0     65.9      0.8  		matriz2.append(array)
    41         1       3397.0   3397.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      57104.0  57104.0      4.0  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3623.0   3623.0      0.3  	matches = bf.match(des1,des2)

