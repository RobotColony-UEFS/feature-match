Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.781 MiB   48.781 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.777 MiB    0.996 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.883 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.117 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.438 MiB    1.320 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.773 MiB    0.336 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.953 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.953 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.129 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.129 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.188 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.188 MiB    0.000 MiB   	matriz1=[]
    20   52.188 MiB    0.000 MiB   	for variavel in corners1:
    21   52.188 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.188 MiB    0.000 MiB   		matriz1.append(array)
    23   52.312 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.727 MiB    0.414 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.727 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.309 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.629 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.949 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.949 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.949 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.211 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.531 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.531 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.531 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.531 MiB    0.000 MiB   	matriz2=[]
    38   58.535 MiB    0.000 MiB   	for variavel in corners2:
    39   58.535 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.535 MiB    0.000 MiB   		matriz2.append(array)
    41   58.543 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.551 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.957 MiB    0.406 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.37501 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17124.0  17124.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        328.0    328.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3976.0   3976.0      0.3  	imagem1 = np.float32(img1)
    12         1      75258.0  75258.0      5.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13883.0  13883.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12568.0  12568.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5125.0   5125.0      0.4  	dst1 = np.uint8(dst1)
    16         1      12574.0  12574.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21716.0  21716.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3069.0     65.3      0.2  	for variavel in corners1:
    21        46       7381.0    160.5      0.5  		array=np.array([variavel])
    22        46       3001.0     65.2      0.2  		matriz1.append(array)
    23         1       1547.0   1547.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8490.0   8490.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80468.0  80468.0      5.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27603.0  27603.0      2.0  	imagem2 = np.float32(img2)
    30         1     577855.0 577855.0     42.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97517.0  97517.0      7.1  	dst2 = cv2.dilate(dst2,None)
    32         1      84947.0  84947.0      6.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37854.0  37854.0      2.8  	dst2 = np.uint8(dst2)
    34         1      76783.0  76783.0      5.6  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      86480.0  86480.0      6.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       189      12311.0     65.1      0.9  	for variavel in corners2:
    39       188      32056.0    170.5      2.3  		array=np.array([variavel])
    40       188      12223.0     65.0      0.9  		matriz2.append(array)
    41         1       3932.0   3932.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      54992.0  54992.0      4.0  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3396.0   3396.0      0.2  	matches = bf.match(des1,des2)

