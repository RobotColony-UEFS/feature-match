Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.715 MiB   48.715 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.527 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.586 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.820 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.168 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.637 MiB    0.469 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.824 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.824 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.906 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.906 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.926 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.926 MiB    0.000 MiB   	matriz1=[]
    20   51.926 MiB    0.000 MiB   	for variavel in corners1:
    21   51.926 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.926 MiB    0.000 MiB   		matriz1.append(array)
    23   52.020 MiB    0.094 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.535 MiB    0.516 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.594 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.176 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.496 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.816 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.816 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.863 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.125 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.445 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.445 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.445 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.445 MiB    0.000 MiB   	matriz2=[]
    38   58.449 MiB    0.000 MiB   	for variavel in corners2:
    39   58.449 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.449 MiB    0.000 MiB   		matriz2.append(array)
    41   58.457 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.465 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.688 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.41626 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17451.0  17451.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        313.0    313.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3917.0   3917.0      0.3  	imagem1 = np.float32(img1)
    12         1      77056.0  77056.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12994.0  12994.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12446.0  12446.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5095.0   5095.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11627.0  11627.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20782.0  20782.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3102.0     66.0      0.2  	for variavel in corners1:
    21        46       9217.0    200.4      0.7  		array=np.array([variavel])
    22        46       2903.0     63.1      0.2  		matriz1.append(array)
    23         1       1302.0   1302.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9500.0   9500.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        170.0    170.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76219.0  76219.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29436.0  29436.0      2.1  	imagem2 = np.float32(img2)
    30         1     622770.0 622770.0     44.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96252.0  96252.0      6.8  	dst2 = cv2.dilate(dst2,None)
    32         1      85674.0  85674.0      6.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37311.0  37311.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76219.0  76219.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      87262.0  87262.0      6.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       189      12902.0     68.3      0.9  	for variavel in corners2:
    39       188      30388.0    161.6      2.1  		array=np.array([variavel])
    40       188      11672.0     62.1      0.8  		matriz2.append(array)
    41         1       3660.0   3660.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      54853.0  54853.0      3.9  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3478.0   3478.0      0.2  	matches = bf.match(des1,des2)

