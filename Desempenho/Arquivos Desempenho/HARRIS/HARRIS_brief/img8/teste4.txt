Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.645 MiB   48.645 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.520 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.578 MiB    0.059 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.812 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.102 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.562 MiB    0.461 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.750 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.750 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.891 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.891 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.906 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.906 MiB    0.000 MiB   	matriz1=[]
    20   51.906 MiB    0.000 MiB   	for variavel in corners1:
    21   51.906 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.906 MiB    0.000 MiB   		matriz1.append(array)
    23   51.996 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.570 MiB    0.574 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.570 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.152 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.473 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.793 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.793 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.844 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.105 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.426 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.426 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.426 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.426 MiB    0.000 MiB   	matriz2=[]
    38   58.434 MiB    0.000 MiB   	for variavel in corners2:
    39   58.434 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.434 MiB    0.000 MiB   		matriz2.append(array)
    41   58.445 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.457 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.676 MiB    0.219 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.52213 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17298.0  17298.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        353.0    353.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3866.0   3866.0      0.3  	imagem1 = np.float32(img1)
    12         1      74784.0  74784.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12326.0  12326.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12790.0  12790.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5064.0   5064.0      0.3  	dst1 = np.uint8(dst1)
    16         1      13177.0  13177.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21075.0  21075.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3019.0     64.2      0.2  	for variavel in corners1:
    21        46       7451.0    162.0      0.5  		array=np.array([variavel])
    22        46       3043.0     66.2      0.2  		matriz1.append(array)
    23         1       1255.0   1255.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9300.0   9300.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        168.0    168.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80798.0  80798.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27659.0  27659.0      1.8  	imagem2 = np.float32(img2)
    30         1     575325.0 575325.0     37.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96273.0  96273.0      6.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85863.0  85863.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37045.0  37045.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76942.0  76942.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     187622.0 187622.0     12.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       285      19208.0     67.4      1.3  	for variavel in corners2:
    39       284      47972.0    168.9      3.2  		array=np.array([variavel])
    40       284      17735.0     62.4      1.2  		matriz2.append(array)
    41         1       5851.0   5851.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      73351.0  73351.0      4.8  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5236.0   5236.0      0.3  	matches = bf.match(des1,des2)

