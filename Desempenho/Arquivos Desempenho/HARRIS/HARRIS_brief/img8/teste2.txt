Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.047 MiB   49.047 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.863 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.969 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.203 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.484 MiB    1.281 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.863 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.047 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.047 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.148 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.148 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.188 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.188 MiB    0.000 MiB   	matriz1=[]
    20   52.188 MiB    0.000 MiB   	for variavel in corners1:
    21   52.188 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.188 MiB    0.000 MiB   		matriz1.append(array)
    23   52.297 MiB    0.109 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.688 MiB    0.391 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.809 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.391 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.711 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.031 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.031 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.031 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.293 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.613 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.613 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.613 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.613 MiB    0.000 MiB   	matriz2=[]
    38   58.621 MiB    0.000 MiB   	for variavel in corners2:
    39   58.621 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.621 MiB    0.000 MiB   		matriz2.append(array)
    41   58.633 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.645 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.867 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.52709 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17094.0  17094.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        345.0    345.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3923.0   3923.0      0.3  	imagem1 = np.float32(img1)
    12         1      76624.0  76624.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13083.0  13083.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12905.0  12905.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4994.0   4994.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12368.0  12368.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22262.0  22262.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3061.0     65.1      0.2  	for variavel in corners1:
    21        46       7532.0    163.7      0.5  		array=np.array([variavel])
    22        46       3055.0     66.4      0.2  		matriz1.append(array)
    23         1       1248.0   1248.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8760.0   8760.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        174.0    174.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80627.0  80627.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27739.0  27739.0      1.8  	imagem2 = np.float32(img2)
    30         1     577945.0 577945.0     37.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97171.0  97171.0      6.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85392.0  85392.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38113.0  38113.0      2.5  	dst2 = np.uint8(dst2)
    34         1      77288.0  77288.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         76.0     76.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     186898.0 186898.0     12.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       285      18799.0     66.0      1.2  	for variavel in corners2:
    39       284      47402.0    166.9      3.1  		array=np.array([variavel])
    40       284      17861.0     62.9      1.2  		matriz2.append(array)
    41         1       5676.0   5676.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      72796.0  72796.0      4.8  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5671.0   5671.0      0.4  	matches = bf.match(des1,des2)

