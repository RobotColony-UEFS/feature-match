Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.996 MiB   48.996 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.906 MiB    0.910 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.012 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.246 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.461 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.840 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.020 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.020 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.125 MiB    0.105 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.125 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.168 MiB    0.043 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.168 MiB    0.000 MiB   	matriz1=[]
    20   52.168 MiB    0.000 MiB   	for variavel in corners1:
    21   52.168 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.168 MiB    0.000 MiB   		matriz1.append(array)
    23   52.281 MiB    0.113 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.680 MiB    0.398 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.742 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.324 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.645 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.965 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.965 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.965 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.227 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.547 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.547 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.547 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.547 MiB    0.000 MiB   	matriz2=[]
    38   58.555 MiB    0.000 MiB   	for variavel in corners2:
    39   58.555 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.555 MiB    0.000 MiB   		matriz2.append(array)
    41   58.566 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.578 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.973 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.52644 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18474.0  18474.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        314.0    314.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4108.0   4108.0      0.3  	imagem1 = np.float32(img1)
    12         1      73243.0  73243.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12195.0  12195.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      13741.0  13741.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5606.0   5606.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11647.0  11647.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21074.0  21074.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3047.0     64.8      0.2  	for variavel in corners1:
    21        46       7407.0    161.0      0.5  		array=np.array([variavel])
    22        46       2865.0     62.3      0.2  		matriz1.append(array)
    23         1       1520.0   1520.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9289.0   9289.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        169.0    169.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80389.0  80389.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28366.0  28366.0      1.9  	imagem2 = np.float32(img2)
    30         1     575478.0 575478.0     37.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96726.0  96726.0      6.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84862.0  84862.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37200.0  37200.0      2.4  	dst2 = np.uint8(dst2)
    34         1      78527.0  78527.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     190527.0 190527.0     12.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       285      18311.0     64.2      1.2  	for variavel in corners2:
    39       284      48932.0    172.3      3.2  		array=np.array([variavel])
    40       284      18048.0     63.5      1.2  		matriz2.append(array)
    41         1       5792.0   5792.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      73066.0  73066.0      4.8  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5237.0   5237.0      0.3  	matches = bf.match(des1,des2)

