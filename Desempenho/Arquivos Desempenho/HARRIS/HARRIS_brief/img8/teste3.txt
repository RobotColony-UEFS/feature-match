Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.973 MiB   48.973 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.875 MiB    0.902 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.984 MiB    0.109 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.219 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.570 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.957 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.258 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.258 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.445 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.445 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.445 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.445 MiB    0.000 MiB   	matriz1=[]
    20   52.445 MiB    0.000 MiB   	for variavel in corners1:
    21   52.445 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.445 MiB    0.000 MiB   		matriz1.append(array)
    23   52.512 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.992 MiB    0.480 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.992 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.574 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.895 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.215 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.215 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.215 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.477 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.797 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.797 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.797 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.797 MiB    0.000 MiB   	matriz2=[]
    38   58.805 MiB    0.000 MiB   	for variavel in corners2:
    39   58.805 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.805 MiB    0.000 MiB   		matriz2.append(array)
    41   58.816 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.828 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.160 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.56592 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      19182.0  19182.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        347.0    347.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       5110.0   5110.0      0.3  	imagem1 = np.float32(img1)
    12         1      72481.0  72481.0      4.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14730.0  14730.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13649.0  13649.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5025.0   5025.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12126.0  12126.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20732.0  20732.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3190.0     67.9      0.2  	for variavel in corners1:
    21        46       7594.0    165.1      0.5  		array=np.array([variavel])
    22        46       2909.0     63.2      0.2  		matriz1.append(array)
    23         1       1359.0   1359.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8832.0   8832.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        169.0    169.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80872.0  80872.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26670.0  26670.0      1.7  	imagem2 = np.float32(img2)
    30         1     626031.0 626031.0     40.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95239.0  95239.0      6.1  	dst2 = cv2.dilate(dst2,None)
    32         1      83446.0  83446.0      5.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      40291.0  40291.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76139.0  76139.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     181180.0 181180.0     11.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       285      20975.0     73.6      1.3  	for variavel in corners2:
    39       284      48095.0    169.3      3.1  		array=np.array([variavel])
    40       284      18045.0     63.5      1.2  		matriz2.append(array)
    41         1       5837.0   5837.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      70135.0  70135.0      4.5  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5238.0   5238.0      0.3  	matches = bf.match(des1,des2)

