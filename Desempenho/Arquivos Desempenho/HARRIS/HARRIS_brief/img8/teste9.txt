Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.609 MiB   48.609 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.348 MiB    0.738 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.453 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.688 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.031 MiB    1.344 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.504 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.691 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.691 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.777 MiB    0.086 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.777 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.801 MiB    0.023 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.801 MiB    0.000 MiB   	matriz1=[]
    20   51.801 MiB    0.000 MiB   	for variavel in corners1:
    21   51.801 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.801 MiB    0.000 MiB   		matriz1.append(array)
    23   51.898 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.477 MiB    0.578 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.535 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.117 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.438 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.758 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.758 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.805 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.066 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.387 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.387 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.387 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.387 MiB    0.000 MiB   	matriz2=[]
    38   58.395 MiB    0.000 MiB   	for variavel in corners2:
    39   58.395 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.395 MiB    0.000 MiB   		matriz2.append(array)
    41   58.406 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.418 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.648 MiB    0.230 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.57814 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      16950.0  16950.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        241.0    241.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4851.0   4851.0      0.3  	imagem1 = np.float32(img1)
    12         1      75452.0  75452.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13257.0  13257.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      13466.0  13466.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5024.0   5024.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12227.0  12227.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22333.0  22333.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3021.0     64.3      0.2  	for variavel in corners1:
    21        46       7407.0    161.0      0.5  		array=np.array([variavel])
    22        46       2949.0     64.1      0.2  		matriz1.append(array)
    23         1       1378.0   1378.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9008.0   9008.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        278.0    278.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81637.0  81637.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26553.0  26553.0      1.7  	imagem2 = np.float32(img2)
    30         1     630083.0 630083.0     39.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97206.0  97206.0      6.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84289.0  84289.0      5.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39510.0  39510.0      2.5  	dst2 = np.uint8(dst2)
    34         1      76176.0  76176.0      4.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     182842.0 182842.0     11.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       285      19849.0     69.6      1.3  	for variavel in corners2:
    39       284      48903.0    172.2      3.1  		array=np.array([variavel])
    40       284      17929.0     63.1      1.1  		matriz2.append(array)
    41         1       6336.0   6336.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      73513.0  73513.0      4.7  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5187.0   5187.0      0.3  	matches = bf.match(des1,des2)

