Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.086 MiB   49.086 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.961 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.066 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.301 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.512 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.895 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.074 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.074 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.180 MiB    0.105 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.180 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.223 MiB    0.043 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.223 MiB    0.000 MiB   	matriz1=[]
    20   52.223 MiB    0.000 MiB   	for variavel in corners1:
    21   52.223 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.223 MiB    0.000 MiB   		matriz1.append(array)
    23   52.336 MiB    0.113 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.734 MiB    0.398 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.797 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.379 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.699 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.020 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.020 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.020 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.281 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.602 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.602 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.602 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.602 MiB    0.000 MiB   	matriz2=[]
    38   58.609 MiB    0.000 MiB   	for variavel in corners2:
    39   58.609 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.609 MiB    0.000 MiB   		matriz2.append(array)
    41   58.621 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.633 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.027 MiB    0.395 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.56946 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      16743.0  16743.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        317.0    317.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4575.0   4575.0      0.3  	imagem1 = np.float32(img1)
    12         1      75269.0  75269.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13221.0  13221.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12369.0  12369.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5096.0   5096.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11647.0  11647.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      24897.0  24897.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         64.0     64.0      0.0  	matriz1=[]
    20        47       3614.0     76.9      0.2  	for variavel in corners1:
    21        46       8769.0    190.6      0.6  		array=np.array([variavel])
    22        46       3327.0     72.3      0.2  		matriz1.append(array)
    23         1       1325.0   1325.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8816.0   8816.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81740.0  81740.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26557.0  26557.0      1.7  	imagem2 = np.float32(img2)
    30         1     623393.0 623393.0     39.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96685.0  96685.0      6.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85238.0  85238.0      5.4  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37127.0  37127.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76867.0  76867.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     182523.0 182523.0     11.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       285      18932.0     66.4      1.2  	for variavel in corners2:
    39       284      48446.0    170.6      3.1  		array=np.array([variavel])
    40       284      17688.0     62.3      1.1  		matriz2.append(array)
    41         1       5725.0   5725.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      72759.0  72759.0      4.6  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5228.0   5228.0      0.3  	matches = bf.match(des1,des2)

