Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.547 MiB   48.547 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.430 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.551 MiB    0.121 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.844 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.133 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.547 MiB    0.414 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.789 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.789 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.914 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.914 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.926 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.926 MiB    0.000 MiB   	matriz1=[]
    20   51.926 MiB    0.000 MiB   	for variavel in corners1:
    21   51.926 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.926 MiB    0.000 MiB   		matriz1.append(array)
    23   51.992 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.480 MiB    0.488 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.480 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.062 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.383 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.703 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.703 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.758 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.020 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.340 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.340 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.340 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.340 MiB    0.000 MiB   	matriz2=[]
    38   58.348 MiB    0.000 MiB   	for variavel in corners2:
    39   58.348 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.348 MiB    0.000 MiB   		matriz2.append(array)
    41   58.355 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.363 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.699 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.42822 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17285.0  17285.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        315.0    315.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3932.0   3932.0      0.3  	imagem1 = np.float32(img1)
    12         1      75231.0  75231.0      5.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12092.0  12092.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12726.0  12726.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5140.0   5140.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11707.0  11707.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         93.0     93.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23021.0  23021.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         62.0     62.0      0.0  	matriz1=[]
    20        47       4166.0     88.6      0.3  	for variavel in corners1:
    21        46       7999.0    173.9      0.6  		array=np.array([variavel])
    22        46       3219.0     70.0      0.2  		matriz1.append(array)
    23         1       1327.0   1327.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9348.0   9348.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        178.0    178.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78526.0  78526.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27665.0  27665.0      1.9  	imagem2 = np.float32(img2)
    30         1     580226.0 580226.0     40.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95604.0  95604.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      83069.0  83069.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      40008.0  40008.0      2.8  	dst2 = np.uint8(dst2)
    34         1      76225.0  76225.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         87.0     87.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     115036.0 115036.0      8.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         63.0     63.0      0.0  	matriz2=[]
    38       226      15361.0     68.0      1.1  	for variavel in corners2:
    39       225      38850.0    172.7      2.7  		array=np.array([variavel])
    40       225      15578.0     69.2      1.1  		matriz2.append(array)
    41         1       4559.0   4559.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      64889.0  64889.0      4.5  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       4632.0   4632.0      0.3  	matches = bf.match(des1,des2)

