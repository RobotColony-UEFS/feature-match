Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.688 MiB   48.688 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.492 MiB    0.805 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.543 MiB    0.051 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.777 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.066 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.539 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.727 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.727 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.816 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.816 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.844 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.844 MiB    0.000 MiB   	matriz1=[]
    20   51.844 MiB    0.000 MiB   	for variavel in corners1:
    21   51.844 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.844 MiB    0.000 MiB   		matriz1.append(array)
    23   51.941 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.586 MiB    0.645 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.645 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.227 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.547 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.867 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.867 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.867 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.129 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.449 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.449 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.449 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.449 MiB    0.000 MiB   	matriz2=[]
    38   58.457 MiB    0.000 MiB   	for variavel in corners2:
    39   58.457 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.457 MiB    0.000 MiB   		matriz2.append(array)
    41   58.469 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.480 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.773 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.5596 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17292.0  17292.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        312.0    312.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3953.0   3953.0      0.3  	imagem1 = np.float32(img1)
    12         1      76026.0  76026.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13112.0  13112.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12435.0  12435.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5094.0   5094.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11719.0  11719.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23113.0  23113.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3058.0     65.1      0.2  	for variavel in corners1:
    21        46       7481.0    162.6      0.5  		array=np.array([variavel])
    22        46       2834.0     61.6      0.2  		matriz1.append(array)
    23         1       1450.0   1450.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8893.0   8893.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        173.0    173.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80669.0  80669.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26633.0  26633.0      1.7  	imagem2 = np.float32(img2)
    30         1     625788.0 625788.0     40.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97020.0  97020.0      6.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85161.0  85161.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37219.0  37219.0      2.4  	dst2 = np.uint8(dst2)
    34         1      77673.0  77673.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     174646.0 174646.0     11.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       287      18534.0     64.6      1.2  	for variavel in corners2:
    39       286      47223.0    165.1      3.0  		array=np.array([variavel])
    40       286      18192.0     63.6      1.2  		matriz2.append(array)
    41         1       5734.0   5734.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      72470.0  72470.0      4.6  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5413.0   5413.0      0.3  	matches = bf.match(des1,des2)

