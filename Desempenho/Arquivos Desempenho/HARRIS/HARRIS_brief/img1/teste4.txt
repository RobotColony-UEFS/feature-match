Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.777 MiB   48.777 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.746 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.852 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.086 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.410 MiB    1.324 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.742 MiB    0.332 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.922 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.922 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.098 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.098 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.156 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.156 MiB    0.000 MiB   	matriz1=[]
    20   52.156 MiB    0.000 MiB   	for variavel in corners1:
    21   52.156 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.156 MiB    0.000 MiB   		matriz1.append(array)
    23   52.281 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.695 MiB    0.414 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.695 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.277 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.598 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.918 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.918 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.918 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.180 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.500 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.500 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.500 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.500 MiB    0.000 MiB   	matriz2=[]
    38   58.508 MiB    0.000 MiB   	for variavel in corners2:
    39   58.508 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.508 MiB    0.000 MiB   		matriz2.append(array)
    41   58.520 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.531 MiB    0.012 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.938 MiB    0.406 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.51116 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      18046.0  18046.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        252.0    252.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       4274.0   4274.0      0.3  	imagem1 = np.float32(img1)
    12         1      74780.0  74780.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14494.0  14494.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      13524.0  13524.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5432.0   5432.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11620.0  11620.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20980.0  20980.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3056.0     65.0      0.2  	for variavel in corners1:
    21        46       7373.0    160.3      0.5  		array=np.array([variavel])
    22        46       2988.0     65.0      0.2  		matriz1.append(array)
    23         1       1278.0   1278.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9661.0   9661.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        172.0    172.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79655.0  79655.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27768.0  27768.0      1.8  	imagem2 = np.float32(img2)
    30         1     576402.0 576402.0     38.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96669.0  96669.0      6.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85459.0  85459.0      5.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38207.0  38207.0      2.5  	dst2 = np.uint8(dst2)
    34         1      77168.0  77168.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     173899.0 173899.0     11.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       287      18659.0     65.0      1.2  	for variavel in corners2:
    39       286      46816.0    163.7      3.1  		array=np.array([variavel])
    40       286      18688.0     65.3      1.2  		matriz2.append(array)
    41         1       5830.0   5830.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      72688.0  72688.0      4.8  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       5040.0   5040.0      0.3  	matches = bf.match(des1,des2)

