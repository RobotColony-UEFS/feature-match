Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.883 MiB   48.883 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.789 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.898 MiB    0.109 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.133 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.480 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.871 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.172 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.172 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.359 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.359 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.359 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.359 MiB    0.000 MiB   	matriz1=[]
    20   52.359 MiB    0.000 MiB   	for variavel in corners1:
    21   52.359 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.359 MiB    0.000 MiB   		matriz1.append(array)
    23   52.426 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.906 MiB    0.480 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.906 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.488 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.809 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.129 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.129 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.129 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.391 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.711 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.711 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.711 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.711 MiB    0.000 MiB   	matriz2=[]
    38   58.715 MiB    0.000 MiB   	for variavel in corners2:
    39   58.715 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.715 MiB    0.000 MiB   		matriz2.append(array)
    41   58.723 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.730 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.062 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.44437 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17122.0  17122.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        327.0    327.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3871.0   3871.0      0.3  	imagem1 = np.float32(img1)
    12         1      76037.0  76037.0      5.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13080.0  13080.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12518.0  12518.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5027.0   5027.0      0.3  	dst1 = np.uint8(dst1)
    16         1      13099.0  13099.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22080.0  22080.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3141.0     66.8      0.2  	for variavel in corners1:
    21        46       7502.0    163.1      0.5  		array=np.array([variavel])
    22        46       2976.0     64.7      0.2  		matriz1.append(array)
    23         1       1399.0   1399.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8862.0   8862.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        283.0    283.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78781.0  78781.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26592.0  26592.0      1.8  	imagem2 = np.float32(img2)
    30         1     620866.0 620866.0     43.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95946.0  95946.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85121.0  85121.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38921.0  38921.0      2.7  	dst2 = np.uint8(dst2)
    34         1      75287.0  75287.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     111168.0 111168.0      7.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         99.0     99.0      0.0  	matriz2=[]
    38       180      12068.0     67.0      0.8  	for variavel in corners2:
    39       179      31235.0    174.5      2.2  		array=np.array([variavel])
    40       179      14364.0     80.2      1.0  		matriz2.append(array)
    41         1       3827.0   3827.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      58766.0  58766.0      4.1  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3779.0   3779.0      0.3  	matches = bf.match(des1,des2)

