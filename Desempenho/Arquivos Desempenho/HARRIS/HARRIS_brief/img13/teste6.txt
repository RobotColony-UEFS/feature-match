Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.898 MiB   48.898 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.867 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.973 MiB    0.105 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   50.207 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.531 MiB    1.324 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.863 MiB    0.332 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.043 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.043 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.219 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.219 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.277 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.277 MiB    0.000 MiB   	matriz1=[]
    20   52.277 MiB    0.000 MiB   	for variavel in corners1:
    21   52.277 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.277 MiB    0.000 MiB   		matriz1.append(array)
    23   52.402 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.816 MiB    0.414 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.816 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.398 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.719 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.039 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.039 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.039 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.301 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.621 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.621 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.621 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.621 MiB    0.000 MiB   	matriz2=[]
    38   58.625 MiB    0.000 MiB   	for variavel in corners2:
    39   58.625 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.625 MiB    0.000 MiB   		matriz2.append(array)
    41   58.633 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.641 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   59.047 MiB    0.406 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.4044 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17226.0  17226.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        249.0    249.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3845.0   3845.0      0.3  	imagem1 = np.float32(img1)
    12         1      75141.0  75141.0      5.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13093.0  13093.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12541.0  12541.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5022.0   5022.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11592.0  11592.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23459.0  23459.0      1.7  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3096.0     65.9      0.2  	for variavel in corners1:
    21        46       7590.0    165.0      0.5  		array=np.array([variavel])
    22        46       2799.0     60.8      0.2  		matriz1.append(array)
    23         1       1299.0   1299.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       8837.0   8837.0      0.6  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79583.0  79583.0      5.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26726.0  26726.0      1.9  	imagem2 = np.float32(img2)
    30         1     574742.0 574742.0     40.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1     100806.0 100806.0      7.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85736.0  85736.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37186.0  37186.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76219.0  76219.0      5.4  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     117466.0 117466.0      8.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       180      12166.0     67.6      0.9  	for variavel in corners2:
    39       179      30346.0    169.5      2.2  		array=np.array([variavel])
    40       179      12183.0     68.1      0.9  		matriz2.append(array)
    41         1       3805.0   3805.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      57505.0  57505.0      4.1  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3575.0   3575.0      0.3  	matches = bf.match(des1,des2)

