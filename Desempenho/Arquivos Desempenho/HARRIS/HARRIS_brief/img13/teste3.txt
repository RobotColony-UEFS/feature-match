Filename: HARRIS_brief.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.527 MiB   48.527 MiB   @profile
     7                             def HARRIS_brief(img):
     8   49.406 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.527 MiB    0.121 MiB   	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                             	
    11   49.820 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.113 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.523 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.766 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.766 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.891 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.891 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.902 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.902 MiB    0.000 MiB   	matriz1=[]
    20   51.902 MiB    0.000 MiB   	for variavel in corners1:
    21   51.902 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.902 MiB    0.000 MiB   		matriz1.append(array)
    23   51.969 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.457 MiB    0.488 MiB   	kp1, des1 = brief.compute(img1, kp1)
    25                             
    26   52.457 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.039 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.359 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.680 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.680 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.734 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.996 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.316 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.316 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.316 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.316 MiB    0.000 MiB   	matriz2=[]
    38   58.320 MiB    0.000 MiB   	for variavel in corners2:
    39   58.320 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.320 MiB    0.000 MiB   		matriz2.append(array)
    41   58.328 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.336 MiB    0.008 MiB   	kp2, des2 = brief.compute(img2, kp2)
    43                             
    44   58.695 MiB    0.359 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brief.py.lprof
Timer unit: 1e-06 s

Total time: 1.44735 s
File: HARRIS_brief.py
Function: HARRIS_brief at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brief(img):
     8         1      17726.0  17726.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        329.0    329.0      0.0  	brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()
    10                                           	
    11         1       3944.0   3944.0      0.3  	imagem1 = np.float32(img1)
    12         1      75661.0  75661.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13162.0  13162.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12986.0  12986.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5482.0   5482.0      0.4  	dst1 = np.uint8(dst1)
    16         1      12490.0  12490.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20822.0  20822.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3044.0     64.8      0.2  	for variavel in corners1:
    21        46       7411.0    161.1      0.5  		array=np.array([variavel])
    22        46       2837.0     61.7      0.2  		matriz1.append(array)
    23         1       1267.0   1267.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       9628.0   9628.0      0.7  	kp1, des1 = brief.compute(img1, kp1)
    25                                           
    26         1        284.0    284.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78493.0  78493.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28037.0  28037.0      1.9  	imagem2 = np.float32(img2)
    30         1     626163.0 626163.0     43.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96618.0  96618.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      85149.0  85149.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39113.0  39113.0      2.7  	dst2 = np.uint8(dst2)
    34         1      75198.0  75198.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     112427.0 112427.0      7.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       180      11600.0     64.4      0.8  	for variavel in corners2:
    39       179      30116.0    168.2      2.1  		array=np.array([variavel])
    40       179      11470.0     64.1      0.8  		matriz2.append(array)
    41         1       3759.0   3759.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      58062.0  58062.0      4.0  	kp2, des2 = brief.compute(img2, kp2)
    43                                           
    44         1       3781.0   3781.0      0.3  	matches = bf.match(des1,des2)

