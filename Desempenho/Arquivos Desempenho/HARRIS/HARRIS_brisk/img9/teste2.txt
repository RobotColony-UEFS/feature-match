Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.754 MiB   48.754 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.570 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.840 MiB   45.270 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.113 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.402 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.828 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.016 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.016 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.113 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.113 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.148 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.148 MiB    0.000 MiB   	matriz1=[]
    20   97.148 MiB    0.000 MiB   	for variavel in corners1:
    21   97.148 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.148 MiB    0.000 MiB   		matriz1.append(array)
    23   97.152 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.422 MiB    0.270 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.480 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.062 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.383 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.703 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.703 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.703 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  100.965 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.285 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.285 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.285 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.285 MiB    0.000 MiB   	matriz2=[]
    38  103.293 MiB    0.000 MiB   	for variavel in corners2:
    39  103.293 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.293 MiB    0.000 MiB   		matriz2.append(array)
    41  103.297 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.305 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.609 MiB    0.305 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.76617 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      18470.0  18470.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6344990.0 6344990.0     81.7  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3909.0   3909.0      0.1  	imagem1 = np.float32(img1)
    12         1      73338.0  73338.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      15539.0  15539.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12635.0  12635.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5046.0   5046.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11448.0  11448.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21214.0  21214.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3105.0     66.1      0.0  	for variavel in corners1:
    21        46       7616.0    165.6      0.1  		array=np.array([variavel])
    22        46       2962.0     64.4      0.0  		matriz1.append(array)
    23         1       1206.0   1206.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13586.0  13586.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        285.0    285.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81243.0  81243.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29568.0  29568.0      0.4  	imagem2 = np.float32(img2)
    30         1     574648.0 574648.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97106.0  97106.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85849.0  85849.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39203.0  39203.0      0.5  	dst2 = np.uint8(dst2)
    34         1      74628.0  74628.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     106818.0 106818.0      1.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       190      12455.0     65.6      0.2  	for variavel in corners2:
    39       189      31785.0    168.2      0.4  		array=np.array([variavel])
    40       189      11809.0     62.5      0.2  		matriz2.append(array)
    41         1       3971.0   3971.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      74659.0  74659.0      1.0  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6795.0   6795.0      0.1  	matches = bf.match(des1,des2)

