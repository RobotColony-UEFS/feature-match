Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.828 MiB   48.828 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.801 MiB    0.973 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.047 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.320 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.645 MiB    1.324 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.977 MiB    0.332 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.156 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.156 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.332 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.332 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.391 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.391 MiB    0.000 MiB   	matriz1=[]
    20   97.391 MiB    0.000 MiB   	for variavel in corners1:
    21   97.391 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.391 MiB    0.000 MiB   		matriz1.append(array)
    23   97.395 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.750 MiB    0.355 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.809 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.391 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.711 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.031 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.031 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.031 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.293 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.613 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.613 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.613 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.613 MiB    0.000 MiB   	matriz2=[]
    38  103.621 MiB    0.000 MiB   	for variavel in corners2:
    39  103.621 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.621 MiB    0.000 MiB   		matriz2.append(array)
    41  103.633 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.645 MiB    0.012 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.996 MiB    0.352 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.90108 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17115.0  17115.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6353639.0 6353639.0     80.4  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4020.0   4020.0      0.1  	imagem1 = np.float32(img1)
    12         1      75302.0  75302.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12879.0  12879.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12382.0  12382.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5116.0   5116.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12189.0  12189.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23495.0  23495.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3074.0     65.4      0.0  	for variavel in corners1:
    21        46       7833.0    170.3      0.1  		array=np.array([variavel])
    22        46       2835.0     61.6      0.0  		matriz1.append(array)
    23         1       1051.0   1051.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13064.0  13064.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        276.0    276.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80957.0  80957.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27043.0  27043.0      0.3  	imagem2 = np.float32(img2)
    30         1     575737.0 575737.0      7.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97073.0  97073.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84883.0  84883.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37164.0  37164.0      0.5  	dst2 = np.uint8(dst2)
    34         1      77516.0  77516.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     183515.0 183515.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       285      19761.0     69.3      0.3  	for variavel in corners2:
    39       284      46637.0    164.2      0.6  		array=np.array([variavel])
    40       284      17425.0     61.4      0.2  		matriz2.append(array)
    41         1       5352.0   5352.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      93293.0  93293.0      1.2  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1      10168.0  10168.0      0.1  	matches = bf.match(des1,des2)

