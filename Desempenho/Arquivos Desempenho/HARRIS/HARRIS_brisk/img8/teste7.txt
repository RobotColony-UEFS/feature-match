Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.680 MiB   48.680 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.430 MiB    0.750 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.652 MiB   45.223 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   94.926 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.215 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.637 MiB    0.422 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.824 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.824 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   96.918 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   96.918 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   96.949 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   96.949 MiB    0.000 MiB   	matriz1=[]
    20   96.949 MiB    0.000 MiB   	for variavel in corners1:
    21   96.949 MiB    0.000 MiB   		array=np.array([variavel])
    22   96.949 MiB    0.000 MiB   		matriz1.append(array)
    23   96.992 MiB    0.043 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.391 MiB    0.398 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.449 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.031 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.352 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.672 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.672 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.672 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  100.934 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.254 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.254 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.254 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.254 MiB    0.000 MiB   	matriz2=[]
    38  103.262 MiB    0.000 MiB   	for variavel in corners2:
    39  103.262 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.262 MiB    0.000 MiB   		matriz2.append(array)
    41  103.273 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.285 MiB    0.012 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.523 MiB    0.238 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 8.0688 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      18515.0  18515.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6466848.0 6466848.0     80.1  	brisk = cv2.BRISK_create()
    10                                           
    11         1       5454.0   5454.0      0.1  	imagem1 = np.float32(img1)
    12         1      72629.0  72629.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13904.0  13904.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      14341.0  14341.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5507.0   5507.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11572.0  11572.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21134.0  21134.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3062.0     65.1      0.0  	for variavel in corners1:
    21        46       7416.0    161.2      0.1  		array=np.array([variavel])
    22        46       2819.0     61.3      0.0  		matriz1.append(array)
    23         1       1260.0   1260.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13013.0  13013.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        272.0    272.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81337.0  81337.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27673.0  27673.0      0.3  	imagem2 = np.float32(img2)
    30         1     626444.0 626444.0      7.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96941.0  96941.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      83118.0  83118.0      1.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39560.0  39560.0      0.5  	dst2 = np.uint8(dst2)
    34         1      77504.0  77504.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     183248.0 183248.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       285      18684.0     65.6      0.2  	for variavel in corners2:
    39       284      48023.0    169.1      0.6  		array=np.array([variavel])
    40       284      18758.0     66.0      0.2  		matriz2.append(array)
    41         1       5793.0   5793.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      93890.0  93890.0      1.2  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       9805.0   9805.0      0.1  	matches = bf.match(des1,des2)

