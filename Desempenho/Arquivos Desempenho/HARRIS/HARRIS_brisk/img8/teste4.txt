Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.902 MiB   48.902 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.789 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.035 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.309 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.656 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.047 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.285 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.285 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.410 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.410 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.410 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.410 MiB    0.000 MiB   	matriz1=[]
    20   97.410 MiB    0.000 MiB   	for variavel in corners1:
    21   97.410 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.410 MiB    0.000 MiB   		matriz1.append(array)
    23   97.414 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.723 MiB    0.309 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.781 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.363 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.684 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.004 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.004 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.004 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.266 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.586 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.586 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.586 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.586 MiB    0.000 MiB   	matriz2=[]
    38  103.594 MiB    0.000 MiB   	for variavel in corners2:
    39  103.594 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.594 MiB    0.000 MiB   		matriz2.append(array)
    41  103.605 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.617 MiB    0.012 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.895 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 8.00225 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17375.0  17375.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6399903.0 6399903.0     80.0  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4016.0   4016.0      0.1  	imagem1 = np.float32(img1)
    12         1      74930.0  74930.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12953.0  12953.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      13401.0  13401.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4994.0   4994.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11669.0  11669.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         93.0     93.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22222.0  22222.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3085.0     65.6      0.0  	for variavel in corners1:
    21        46       7610.0    165.4      0.1  		array=np.array([variavel])
    22        46       2929.0     63.7      0.0  		matriz1.append(array)
    23         1       1223.0   1223.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13071.0  13071.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        272.0    272.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81888.0  81888.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26879.0  26879.0      0.3  	imagem2 = np.float32(img2)
    30         1     629291.0 629291.0      7.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97238.0  97238.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      83964.0  83964.0      1.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38797.0  38797.0      0.5  	dst2 = np.uint8(dst2)
    34         1      77398.0  77398.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     180980.0 180980.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       285      18386.0     64.5      0.2  	for variavel in corners2:
    39       284      49074.0    172.8      0.6  		array=np.array([variavel])
    40       284      18014.0     63.4      0.2  		matriz2.append(array)
    41         1       5856.0   5856.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      94721.0  94721.0      1.2  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       9822.0   9822.0      0.1  	matches = bf.match(des1,des2)

