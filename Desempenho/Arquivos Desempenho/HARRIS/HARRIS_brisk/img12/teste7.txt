Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.727 MiB   48.727 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.535 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.781 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.055 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.344 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.816 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.004 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.004 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.094 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.094 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.121 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.121 MiB    0.000 MiB   	matriz1=[]
    20   97.121 MiB    0.000 MiB   	for variavel in corners1:
    21   97.121 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.121 MiB    0.000 MiB   		matriz1.append(array)
    23   97.160 MiB    0.039 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.559 MiB    0.398 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.617 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.199 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.520 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.840 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.840 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.840 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.102 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.422 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.422 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.422 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.422 MiB    0.000 MiB   	matriz2=[]
    38  103.426 MiB    0.000 MiB   	for variavel in corners2:
    39  103.426 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.426 MiB    0.000 MiB   		matriz2.append(array)
    41  103.434 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.438 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.680 MiB    0.242 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.75295 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17847.0  17847.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6357573.0 6357573.0     82.0  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3920.0   3920.0      0.1  	imagem1 = np.float32(img1)
    12         1      73742.0  73742.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13238.0  13238.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12774.0  12774.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5107.0   5107.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11643.0  11643.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22677.0  22677.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       2948.0     62.7      0.0  	for variavel in corners1:
    21        46       7491.0    162.8      0.1  		array=np.array([variavel])
    22        46       2798.0     60.8      0.0  		matriz1.append(array)
    23         1       1212.0   1212.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13453.0  13453.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        285.0    285.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79386.0  79386.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27509.0  27509.0      0.4  	imagem2 = np.float32(img2)
    30         1     576144.0 576144.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96833.0  96833.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84785.0  84785.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37199.0  37199.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76275.0  76275.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100959.0 100959.0      1.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       165      10487.0     63.6      0.1  	for variavel in corners2:
    39       164      26005.0    158.6      0.3  		array=np.array([variavel])
    40       164       9937.0     60.6      0.1  		matriz2.append(array)
    41         1       3845.0   3845.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      70088.0  70088.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6511.0   6511.0      0.1  	matches = bf.match(des1,des2)

