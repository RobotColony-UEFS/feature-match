Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.676 MiB   48.676 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.426 MiB    0.750 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.648 MiB   45.223 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   94.922 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.211 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.633 MiB    0.422 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.820 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.820 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   96.914 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   96.914 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   96.945 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   96.945 MiB    0.000 MiB   	matriz1=[]
    20   96.945 MiB    0.000 MiB   	for variavel in corners1:
    21   96.945 MiB    0.000 MiB   		array=np.array([variavel])
    22   96.945 MiB    0.000 MiB   		matriz1.append(array)
    23   96.988 MiB    0.043 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.387 MiB    0.398 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.445 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.027 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.348 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.668 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.668 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.668 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  100.930 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.250 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.250 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.250 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.250 MiB    0.000 MiB   	matriz2=[]
    38  103.254 MiB    0.000 MiB   	for variavel in corners2:
    39  103.254 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.254 MiB    0.000 MiB   		matriz2.append(array)
    41  103.262 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.266 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.504 MiB    0.238 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.80712 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      18857.0  18857.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6364621.0 6364621.0     81.5  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4014.0   4014.0      0.1  	imagem1 = np.float32(img1)
    12         1      72876.0  72876.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      15606.0  15606.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      13382.0  13382.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5009.0   5009.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11704.0  11704.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21061.0  21061.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3047.0     64.8      0.0  	for variavel in corners1:
    21        46       7243.0    157.5      0.1  		array=np.array([variavel])
    22        46       2793.0     60.7      0.0  		matriz1.append(array)
    23         1       1197.0   1197.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12813.0  12813.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        271.0    271.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79766.0  79766.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29339.0  29339.0      0.4  	imagem2 = np.float32(img2)
    30         1     622974.0 622974.0      8.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96319.0  96319.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      82566.0  82566.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39670.0  39670.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76371.0  76371.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      98897.0  98897.0      1.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       165      10537.0     63.9      0.1  	for variavel in corners2:
    39       164      26062.0    158.9      0.3  		array=np.array([variavel])
    40       164      10008.0     61.0      0.1  		matriz2.append(array)
    41         1       3424.0   3424.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      70049.0  70049.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6364.0   6364.0      0.1  	matches = bf.match(des1,des2)

