Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.707 MiB   48.707 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.516 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.762 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.035 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.324 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.797 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.984 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.984 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.074 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.074 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.102 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.102 MiB    0.000 MiB   	matriz1=[]
    20   97.102 MiB    0.000 MiB   	for variavel in corners1:
    21   97.102 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.102 MiB    0.000 MiB   		matriz1.append(array)
    23   97.141 MiB    0.039 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.539 MiB    0.398 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.598 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.180 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.500 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.820 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.820 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.820 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.082 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.402 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.402 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.402 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.402 MiB    0.000 MiB   	matriz2=[]
    38  103.406 MiB    0.000 MiB   	for variavel in corners2:
    39  103.406 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.406 MiB    0.000 MiB   		matriz2.append(array)
    41  103.414 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.418 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.652 MiB    0.234 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.75736 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17205.0  17205.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6358683.0 6358683.0     82.0  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3966.0   3966.0      0.1  	imagem1 = np.float32(img1)
    12         1      75654.0  75654.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12962.0  12962.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12433.0  12433.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5680.0   5680.0      0.1  	dst1 = np.uint8(dst1)
    16         1      13523.0  13523.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20949.0  20949.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3235.0     68.8      0.0  	for variavel in corners1:
    21        46       7485.0    162.7      0.1  		array=np.array([variavel])
    22        46       2923.0     63.5      0.0  		matriz1.append(array)
    23         1       1228.0   1228.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12954.0  12954.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        276.0    276.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79533.0  79533.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27774.0  27774.0      0.4  	imagem2 = np.float32(img2)
    30         1     577953.0 577953.0      7.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96973.0  96973.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84761.0  84761.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37893.0  37893.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76157.0  76157.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      98697.0  98697.0      1.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1        136.0    136.0      0.0  	matriz2=[]
    38       165      11031.0     66.9      0.1  	for variavel in corners2:
    39       164      28627.0    174.6      0.4  		array=np.array([variavel])
    40       164      10390.0     63.4      0.1  		matriz2.append(array)
    41         1       3405.0   3405.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      67449.0  67449.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       7198.0   7198.0      0.1  	matches = bf.match(des1,des2)

