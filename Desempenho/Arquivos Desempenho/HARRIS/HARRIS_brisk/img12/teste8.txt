Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.195 MiB   49.195 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   50.117 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.422 MiB   45.305 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.695 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.906 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.297 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.480 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.480 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.641 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.641 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.691 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.691 MiB    0.000 MiB   	matriz1=[]
    20   97.691 MiB    0.000 MiB   	for variavel in corners1:
    21   97.691 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.691 MiB    0.000 MiB   		matriz1.append(array)
    23   97.695 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   98.047 MiB    0.352 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   98.105 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.688 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  101.008 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.328 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.328 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.328 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.590 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.910 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.910 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.910 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.910 MiB    0.000 MiB   	matriz2=[]
    38  103.914 MiB    0.000 MiB   	for variavel in corners2:
    39  103.914 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.914 MiB    0.000 MiB   		matriz2.append(array)
    41  103.922 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.926 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.223 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.81606 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17218.0  17218.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6367285.0 6367285.0     81.5  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3987.0   3987.0      0.1  	imagem1 = np.float32(img1)
    12         1      73704.0  73704.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14766.0  14766.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12411.0  12411.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4989.0   4989.0      0.1  	dst1 = np.uint8(dst1)
    16         1      13598.0  13598.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20947.0  20947.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3042.0     64.7      0.0  	for variavel in corners1:
    21        46       7279.0    158.2      0.1  		array=np.array([variavel])
    22        46       2711.0     58.9      0.0  		matriz1.append(array)
    23         1       1253.0   1253.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13329.0  13329.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        275.0    275.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79008.0  79008.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28470.0  28470.0      0.4  	imagem2 = np.float32(img2)
    30         1     625555.0 625555.0      8.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97223.0  97223.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85009.0  85009.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38063.0  38063.0      0.5  	dst2 = np.uint8(dst2)
    34         1      75466.0  75466.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     102084.0 102084.0      1.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       165      10523.0     63.8      0.1  	for variavel in corners2:
    39       164      27915.0    170.2      0.4  		array=np.array([variavel])
    40       164      10142.0     61.8      0.1  		matriz2.append(array)
    41         1       4204.0   4204.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      69027.0  69027.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6297.0   6297.0      0.1  	matches = bf.match(des1,des2)

