Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.777 MiB   48.777 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.586 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.828 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.105 MiB    0.277 MiB   	imagem1 = np.float32(img1)
    12   96.453 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.918 MiB    0.465 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.105 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.105 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.188 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.188 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.207 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.207 MiB    0.000 MiB   	matriz1=[]
    20   97.207 MiB    0.000 MiB   	for variavel in corners1:
    21   97.207 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.207 MiB    0.000 MiB   		matriz1.append(array)
    23   97.238 MiB    0.031 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.574 MiB    0.336 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.633 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.215 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.535 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.855 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.855 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.902 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.164 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.484 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.484 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.484 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.484 MiB    0.000 MiB   	matriz2=[]
    38  103.488 MiB    0.000 MiB   	for variavel in corners2:
    39  103.488 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.488 MiB    0.000 MiB   		matriz2.append(array)
    41  103.496 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.500 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.668 MiB    0.168 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.92678 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      19840.0  19840.0      0.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6474340.0 6474340.0     81.7  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4122.0   4122.0      0.1  	imagem1 = np.float32(img1)
    12         1      75292.0  75292.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14271.0  14271.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12452.0  12452.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4943.0   4943.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12788.0  12788.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22626.0  22626.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3142.0     66.9      0.0  	for variavel in corners1:
    21        46       7449.0    161.9      0.1  		array=np.array([variavel])
    22        46       3301.0     71.8      0.0  		matriz1.append(array)
    23         1       1345.0   1345.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12900.0  12900.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        272.0    272.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79231.0  79231.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26697.0  26697.0      0.3  	imagem2 = np.float32(img2)
    30         1     623524.0 623524.0      7.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97627.0  97627.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84694.0  84694.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38679.0  38679.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76729.0  76729.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     101399.0 101399.0      1.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       165      10645.0     64.5      0.1  	for variavel in corners2:
    39       164      27939.0    170.4      0.4  		array=np.array([variavel])
    40       164      10614.0     64.7      0.1  		matriz2.append(array)
    41         1       3610.0   3610.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      69761.0  69761.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6260.0   6260.0      0.1  	matches = bf.match(des1,des2)

