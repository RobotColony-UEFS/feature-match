Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.188 MiB   49.188 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   50.109 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.414 MiB   45.305 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.688 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.902 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.289 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.473 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.473 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.633 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.633 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.684 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.684 MiB    0.000 MiB   	matriz1=[]
    20   97.684 MiB    0.000 MiB   	for variavel in corners1:
    21   97.684 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.684 MiB    0.000 MiB   		matriz1.append(array)
    23   97.688 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   98.039 MiB    0.352 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   98.098 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.680 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  101.000 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.320 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.320 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.320 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.582 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.902 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.902 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.902 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.902 MiB    0.000 MiB   	matriz2=[]
    38  103.910 MiB    0.000 MiB   	for variavel in corners2:
    39  103.910 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.910 MiB    0.000 MiB   		matriz2.append(array)
    41  103.918 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.926 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.223 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.81305 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17961.0  17961.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6361635.0 6361635.0     81.4  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4200.0   4200.0      0.1  	imagem1 = np.float32(img1)
    12         1      74757.0  74757.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13221.0  13221.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12765.0  12765.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5097.0   5097.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11537.0  11537.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22933.0  22933.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3056.0     65.0      0.0  	for variavel in corners1:
    21        46       7415.0    161.2      0.1  		array=np.array([variavel])
    22        46       2844.0     61.8      0.0  		matriz1.append(array)
    23         1       1108.0   1108.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13256.0  13256.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        292.0    292.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81001.0  81001.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26802.0  26802.0      0.3  	imagem2 = np.float32(img2)
    30         1     577404.0 577404.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96455.0  96455.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85267.0  85267.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37634.0  37634.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76668.0  76668.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114668.0 114668.0      1.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       226      14866.0     65.8      0.2  	for variavel in corners2:
    39       225      38598.0    171.5      0.5  		array=np.array([variavel])
    40       225      14173.0     63.0      0.2  		matriz2.append(array)
    41         1       4831.0   4831.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      83915.0  83915.0      1.1  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       8402.0   8402.0      0.1  	matches = bf.match(des1,des2)

