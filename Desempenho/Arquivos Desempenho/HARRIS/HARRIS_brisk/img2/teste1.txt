Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.098 MiB   49.098 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   50.066 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.312 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.586 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.801 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.191 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.367 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.367 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.535 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.535 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.590 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.590 MiB    0.000 MiB   	matriz1=[]
    20   97.590 MiB    0.000 MiB   	for variavel in corners1:
    21   97.590 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.590 MiB    0.000 MiB   		matriz1.append(array)
    23   97.594 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   98.008 MiB    0.414 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   98.066 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.648 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.969 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.289 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.289 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.289 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.551 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.871 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.871 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.871 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.871 MiB    0.000 MiB   	matriz2=[]
    38  103.879 MiB    0.000 MiB   	for variavel in corners2:
    39  103.879 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.879 MiB    0.000 MiB   		matriz2.append(array)
    41  103.887 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.895 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.188 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.78503 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      19208.0  19208.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6332588.0 6332588.0     81.3  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4289.0   4289.0      0.1  	imagem1 = np.float32(img1)
    12         1      72727.0  72727.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12248.0  12248.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12875.0  12875.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6585.0   6585.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12549.0  12549.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21179.0  21179.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1        138.0    138.0      0.0  	matriz1=[]
    20        47       3007.0     64.0      0.0  	for variavel in corners1:
    21        46       7528.0    163.7      0.1  		array=np.array([variavel])
    22        46       3059.0     66.5      0.0  		matriz1.append(array)
    23         1       1307.0   1307.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13185.0  13185.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        389.0    389.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80778.0  80778.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26651.0  26651.0      0.3  	imagem2 = np.float32(img2)
    30         1     579311.0 579311.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96873.0  96873.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85037.0  85037.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37340.0  37340.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76433.0  76433.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     115763.0 115763.0      1.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       226      15443.0     68.3      0.2  	for variavel in corners2:
    39       225      37343.0    166.0      0.5  		array=np.array([variavel])
    40       225      13923.0     61.9      0.2  		matriz2.append(array)
    41         1       5019.0   5019.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      83550.0  83550.0      1.1  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       8477.0   8477.0      0.1  	matches = bf.match(des1,des2)

