Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.875 MiB   48.875 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.848 MiB    0.973 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.094 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.367 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.688 MiB    1.320 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.023 MiB    0.336 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.203 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.203 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.379 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.379 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.438 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.438 MiB    0.000 MiB   	matriz1=[]
    20   97.438 MiB    0.000 MiB   	for variavel in corners1:
    21   97.438 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.438 MiB    0.000 MiB   		matriz1.append(array)
    23   97.441 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.797 MiB    0.355 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.855 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.438 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.758 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.078 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.078 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.078 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.340 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.660 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.660 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.660 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.660 MiB    0.000 MiB   	matriz2=[]
    38  103.668 MiB    0.000 MiB   	for variavel in corners2:
    39  103.668 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.668 MiB    0.000 MiB   		matriz2.append(array)
    41  103.676 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.684 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.035 MiB    0.352 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.9782 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      19063.0  19063.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6472664.0 6472664.0     81.1  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3931.0   3931.0      0.0  	imagem1 = np.float32(img1)
    12         1      76855.0  76855.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13075.0  13075.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12583.0  12583.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5162.0   5162.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12390.0  12390.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22949.0  22949.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3142.0     66.9      0.0  	for variavel in corners1:
    21        46       8820.0    191.7      0.1  		array=np.array([variavel])
    22        46       2902.0     63.1      0.0  		matriz1.append(array)
    23         1       1298.0   1298.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12966.0  12966.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        285.0    285.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80377.0  80377.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27416.0  27416.0      0.3  	imagem2 = np.float32(img2)
    30         1     625918.0 625918.0      7.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96675.0  96675.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85514.0  85514.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38276.0  38276.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76241.0  76241.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         86.0     86.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     117257.0 117257.0      1.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       226      15710.0     69.5      0.2  	for variavel in corners2:
    39       225      36882.0    163.9      0.5  		array=np.array([variavel])
    40       225      14265.0     63.4      0.2  		matriz2.append(array)
    41         1       4771.0   4771.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      82216.0  82216.0      1.0  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       8311.0   8311.0      0.1  	matches = bf.match(des1,des2)

