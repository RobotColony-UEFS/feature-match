Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.133 MiB   49.133 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.949 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.227 MiB   45.277 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.500 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.785 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.160 MiB    0.375 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.344 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.344 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.445 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.445 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.484 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.484 MiB    0.000 MiB   	matriz1=[]
    20   97.484 MiB    0.000 MiB   	for variavel in corners1:
    21   97.484 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.484 MiB    0.000 MiB   		matriz1.append(array)
    23   97.488 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.816 MiB    0.328 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.938 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.520 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.840 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.160 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.160 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.160 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.422 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.742 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.742 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.742 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.742 MiB    0.000 MiB   	matriz2=[]
    38  103.750 MiB    0.000 MiB   	for variavel in corners2:
    39  103.750 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.750 MiB    0.000 MiB   		matriz2.append(array)
    41  103.758 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.766 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.004 MiB    0.238 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.87681 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      18356.0  18356.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6367791.0 6367791.0     80.8  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4518.0   4518.0      0.1  	imagem1 = np.float32(img1)
    12         1      79175.0  79175.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12967.0  12967.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12544.0  12544.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4993.0   4993.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11575.0  11575.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20832.0  20832.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3164.0     67.3      0.0  	for variavel in corners1:
    21        46      10233.0    222.5      0.1  		array=np.array([variavel])
    22        46       3213.0     69.8      0.0  		matriz1.append(array)
    23         1       1123.0   1123.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12939.0  12939.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        387.0    387.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80517.0  80517.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28379.0  28379.0      0.4  	imagem2 = np.float32(img2)
    30         1     625366.0 625366.0      7.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97296.0  97296.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84974.0  84974.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37048.0  37048.0      0.5  	dst2 = np.uint8(dst2)
    34         1      77184.0  77184.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114689.0 114689.0      1.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       226      15076.0     66.7      0.2  	for variavel in corners2:
    39       225      39426.0    175.2      0.5  		array=np.array([variavel])
    40       225      14623.0     65.0      0.2  		matriz2.append(array)
    41         1       4679.0   4679.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      85270.0  85270.0      1.1  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       8181.0   8181.0      0.1  	matches = bf.match(des1,des2)

