Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.598 MiB   48.598 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.473 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.715 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   94.988 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.281 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.738 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.926 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.926 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.066 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.066 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.082 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.082 MiB    0.000 MiB   	matriz1=[]
    20   97.082 MiB    0.000 MiB   	for variavel in corners1:
    21   97.082 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.082 MiB    0.000 MiB   		matriz1.append(array)
    23   97.109 MiB    0.027 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.445 MiB    0.336 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.504 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.086 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.406 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.727 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.727 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.777 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.039 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.359 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.359 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.359 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.359 MiB    0.000 MiB   	matriz2=[]
    38  103.367 MiB    0.000 MiB   	for variavel in corners2:
    39  103.367 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.367 MiB    0.000 MiB   		matriz2.append(array)
    41  103.379 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.391 MiB    0.012 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.555 MiB    0.164 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 8.0462 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      18823.0  18823.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6451335.0 6451335.0     80.2  	brisk = cv2.BRISK_create()
    10                                           
    11         1      10163.0  10163.0      0.1  	imagem1 = np.float32(img1)
    12         1      76436.0  76436.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13182.0  13182.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12427.0  12427.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5043.0   5043.0      0.1  	dst1 = np.uint8(dst1)
    16         1      13213.0  13213.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21122.0  21122.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       4006.0     85.2      0.0  	for variavel in corners1:
    21        46       7702.0    167.4      0.1  		array=np.array([variavel])
    22        46       2878.0     62.6      0.0  		matriz1.append(array)
    23         1       1291.0   1291.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12710.0  12710.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        283.0    283.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80997.0  80997.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26773.0  26773.0      0.3  	imagem2 = np.float32(img2)
    30         1     624294.0 624294.0      7.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96341.0  96341.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85073.0  85073.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37045.0  37045.0      0.5  	dst2 = np.uint8(dst2)
    34         1      77091.0  77091.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         88.0     88.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     171884.0 171884.0      2.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       287      19476.0     67.9      0.2  	for variavel in corners2:
    39       286      47106.0    164.7      0.6  		array=np.array([variavel])
    40       286      18130.0     63.4      0.2  		matriz2.append(array)
    41         1       5470.0   5470.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      95696.0  95696.0      1.2  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       9923.0   9923.0      0.1  	matches = bf.match(des1,des2)

