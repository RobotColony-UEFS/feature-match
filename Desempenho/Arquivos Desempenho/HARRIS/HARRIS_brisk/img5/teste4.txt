Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.941 MiB   48.941 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.828 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.074 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.348 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.699 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.086 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.324 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.324 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.449 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.449 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.449 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.449 MiB    0.000 MiB   	matriz1=[]
    20   97.449 MiB    0.000 MiB   	for variavel in corners1:
    21   97.449 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.449 MiB    0.000 MiB   		matriz1.append(array)
    23   97.453 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.762 MiB    0.309 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.820 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.402 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.723 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.043 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.043 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.043 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.305 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.625 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.625 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.625 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.625 MiB    0.000 MiB   	matriz2=[]
    38  103.633 MiB    0.000 MiB   	for variavel in corners2:
    39  103.633 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.633 MiB    0.000 MiB   		matriz2.append(array)
    41  103.637 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.645 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.922 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.92339 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      16917.0  16917.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6472031.0 6472031.0     81.7  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4905.0   4905.0      0.1  	imagem1 = np.float32(img1)
    12         1      74070.0  74070.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14099.0  14099.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      13960.0  13960.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4993.0   4993.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11506.0  11506.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         93.0     93.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21277.0  21277.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         62.0     62.0      0.0  	matriz1=[]
    20        47       3288.0     70.0      0.0  	for variavel in corners1:
    21        46       7929.0    172.4      0.1  		array=np.array([variavel])
    22        46       3772.0     82.0      0.0  		matriz1.append(array)
    23         1       1194.0   1194.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13372.0  13372.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        297.0    297.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78244.0  78244.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28398.0  28398.0      0.4  	imagem2 = np.float32(img2)
    30         1     630349.0 630349.0      8.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97397.0  97397.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84639.0  84639.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38095.0  38095.0      0.5  	dst2 = np.uint8(dst2)
    34         1      77327.0  77327.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      86157.0  86157.0      1.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       189      12672.0     67.0      0.2  	for variavel in corners2:
    39       188      33163.0    176.4      0.4  		array=np.array([variavel])
    40       188      12011.0     63.9      0.2  		matriz2.append(array)
    41         1       3954.0   3954.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      70703.0  70703.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6374.0   6374.0      0.1  	matches = bf.match(des1,des2)

