Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.980 MiB   48.980 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.887 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.188 MiB   45.301 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.461 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.809 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.199 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.500 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.500 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.688 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.688 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.688 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.688 MiB    0.000 MiB   	matriz1=[]
    20   97.688 MiB    0.000 MiB   	for variavel in corners1:
    21   97.688 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.688 MiB    0.000 MiB   		matriz1.append(array)
    23   97.691 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   98.055 MiB    0.363 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   98.113 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.695 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  101.016 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.336 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.336 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.336 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.598 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.918 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.918 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.918 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.918 MiB    0.000 MiB   	matriz2=[]
    38  103.926 MiB    0.000 MiB   	for variavel in corners2:
    39  103.926 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.926 MiB    0.000 MiB   		matriz2.append(array)
    41  103.930 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.938 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.215 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.83067 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17146.0  17146.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6383420.0 6383420.0     81.5  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3951.0   3951.0      0.1  	imagem1 = np.float32(img1)
    12         1      75626.0  75626.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12965.0  12965.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      13547.0  13547.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5464.0   5464.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11564.0  11564.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         94.0     94.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22372.0  22372.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3032.0     64.5      0.0  	for variavel in corners1:
    21        46       7668.0    166.7      0.1  		array=np.array([variavel])
    22        46       2862.0     62.2      0.0  		matriz1.append(array)
    23         1       1305.0   1305.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12964.0  12964.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        279.0    279.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79155.0  79155.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26544.0  26544.0      0.3  	imagem2 = np.float32(img2)
    30         1     628951.0 628951.0      8.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97148.0  97148.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84049.0  84049.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38678.0  38678.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76286.0  76286.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      85225.0  85225.0      1.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       189      12199.0     64.5      0.2  	for variavel in corners2:
    39       188      34345.0    182.7      0.4  		array=np.array([variavel])
    40       188      11664.0     62.0      0.1  		matriz2.append(array)
    41         1       4032.0   4032.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      71371.0  71371.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6560.0   6560.0      0.1  	matches = bf.match(des1,des2)

