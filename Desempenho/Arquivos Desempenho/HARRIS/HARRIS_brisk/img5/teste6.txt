Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.121 MiB   49.121 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.938 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.215 MiB   45.277 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.488 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.773 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.148 MiB    0.375 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.332 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.332 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.434 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.434 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.473 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.473 MiB    0.000 MiB   	matriz1=[]
    20   97.473 MiB    0.000 MiB   	for variavel in corners1:
    21   97.473 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.473 MiB    0.000 MiB   		matriz1.append(array)
    23   97.477 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.805 MiB    0.328 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.926 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.508 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.828 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.148 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.148 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.148 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.410 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.730 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.730 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.730 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.730 MiB    0.000 MiB   	matriz2=[]
    38  103.738 MiB    0.000 MiB   	for variavel in corners2:
    39  103.738 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.738 MiB    0.000 MiB   		matriz2.append(array)
    41  103.742 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.750 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.988 MiB    0.238 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.81562 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      19427.0  19427.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6368639.0 6368639.0     81.5  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3865.0   3865.0      0.0  	imagem1 = np.float32(img1)
    12         1      76115.0  76115.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12959.0  12959.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12471.0  12471.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5194.0   5194.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12407.0  12407.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23392.0  23392.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3097.0     65.9      0.0  	for variavel in corners1:
    21        46       7781.0    169.2      0.1  		array=np.array([variavel])
    22        46       2873.0     62.5      0.0  		matriz1.append(array)
    23         1       1243.0   1243.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12753.0  12753.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        438.0    438.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78942.0  78942.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26664.0  26664.0      0.3  	imagem2 = np.float32(img2)
    30         1     625916.0 625916.0      8.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97154.0  97154.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85316.0  85316.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38027.0  38027.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76176.0  76176.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      86763.0  86763.0      1.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       189      12514.0     66.2      0.2  	for variavel in corners2:
    39       188      31550.0    167.8      0.4  		array=np.array([variavel])
    40       188      12454.0     66.2      0.2  		matriz2.append(array)
    41         1       3903.0   3903.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      70865.0  70865.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6434.0   6434.0      0.1  	matches = bf.match(des1,des2)

