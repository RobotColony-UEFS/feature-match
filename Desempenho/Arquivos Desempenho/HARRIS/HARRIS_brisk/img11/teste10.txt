Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.715 MiB   48.715 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.684 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.930 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.203 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.473 MiB    1.270 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.852 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.152 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.152 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.336 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.336 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.398 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.398 MiB    0.000 MiB   	matriz1=[]
    20   97.398 MiB    0.000 MiB   	for variavel in corners1:
    21   97.398 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.398 MiB    0.000 MiB   		matriz1.append(array)
    23   97.461 MiB    0.062 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.883 MiB    0.422 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.941 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.523 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.844 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.164 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.164 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.164 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.426 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.746 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.746 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.746 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.746 MiB    0.000 MiB   	matriz2=[]
    38  103.750 MiB    0.000 MiB   	for variavel in corners2:
    39  103.750 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.750 MiB    0.000 MiB   		matriz2.append(array)
    41  103.754 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.758 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.031 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.6978 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      18864.0  18864.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6333148.0 6333148.0     82.3  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4024.0   4024.0      0.1  	imagem1 = np.float32(img1)
    12         1      76522.0  76522.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12972.0  12972.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12476.0  12476.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5085.0   5085.0      0.1  	dst1 = np.uint8(dst1)
    16         1      14146.0  14146.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         82.0     82.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21188.0  21188.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3116.0     66.3      0.0  	for variavel in corners1:
    21        46       7983.0    173.5      0.1  		array=np.array([variavel])
    22        46       2850.0     62.0      0.0  		matriz1.append(array)
    23         1       1136.0   1136.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12963.0  12963.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      75987.0  75987.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26901.0  26901.0      0.3  	imagem2 = np.float32(img2)
    30         1     577428.0 577428.0      7.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96675.0  96675.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85283.0  85283.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37413.0  37413.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76110.0  76110.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      87639.0  87639.0      1.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       129       8338.0     64.6      0.1  	for variavel in corners2:
    39       128      20584.0    160.8      0.3  		array=np.array([variavel])
    40       128       7970.0     62.3      0.1  		matriz2.append(array)
    41         1       2881.0   2881.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      62328.0  62328.0      0.8  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       5240.0   5240.0      0.1  	matches = bf.match(des1,des2)

