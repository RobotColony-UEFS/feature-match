Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.004 MiB   49.004 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.879 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.168 MiB   45.289 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.441 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.656 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.035 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.215 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.215 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.320 MiB    0.105 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.320 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.363 MiB    0.043 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.363 MiB    0.000 MiB   	matriz1=[]
    20   97.363 MiB    0.000 MiB   	for variavel in corners1:
    21   97.363 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.363 MiB    0.000 MiB   		matriz1.append(array)
    23   97.367 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.641 MiB    0.273 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.766 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.348 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.668 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.988 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.988 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.988 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.250 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.570 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.570 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.570 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.570 MiB    0.000 MiB   	matriz2=[]
    38  103.574 MiB    0.000 MiB   	for variavel in corners2:
    39  103.574 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.574 MiB    0.000 MiB   		matriz2.append(array)
    41  103.578 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.582 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.926 MiB    0.344 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.71974 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17052.0  17052.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6360365.0 6360365.0     82.4  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4018.0   4018.0      0.1  	imagem1 = np.float32(img1)
    12         1      75374.0  75374.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13054.0  13054.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12414.0  12414.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5149.0   5149.0      0.1  	dst1 = np.uint8(dst1)
    16         1      14158.0  14158.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21188.0  21188.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       2983.0     63.5      0.0  	for variavel in corners1:
    21        46       7620.0    165.7      0.1  		array=np.array([variavel])
    22        46       2799.0     60.8      0.0  		matriz1.append(array)
    23         1       1230.0   1230.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13084.0  13084.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        287.0    287.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76542.0  76542.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26821.0  26821.0      0.3  	imagem2 = np.float32(img2)
    30         1     574677.0 574677.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96907.0  96907.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84806.0  84806.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37186.0  37186.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76278.0  76278.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      88727.0  88727.0      1.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         94.0     94.0      0.0  	matriz2=[]
    38       129       8265.0     64.1      0.1  	for variavel in corners2:
    39       128      20911.0    163.4      0.3  		array=np.array([variavel])
    40       128       7639.0     59.7      0.1  		matriz2.append(array)
    41         1       2691.0   2691.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      62030.0  62030.0      0.8  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       5168.0   5168.0      0.1  	matches = bf.match(des1,des2)

