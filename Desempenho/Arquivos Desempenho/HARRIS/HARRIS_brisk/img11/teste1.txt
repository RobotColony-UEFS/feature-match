Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.703 MiB   48.703 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.512 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.758 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.031 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.320 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.793 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.980 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.980 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.070 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.070 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.098 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.098 MiB    0.000 MiB   	matriz1=[]
    20   97.098 MiB    0.000 MiB   	for variavel in corners1:
    21   97.098 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.098 MiB    0.000 MiB   		matriz1.append(array)
    23   97.137 MiB    0.039 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.535 MiB    0.398 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.594 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.176 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.496 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.816 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.816 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.816 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.078 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.398 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.398 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.398 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.398 MiB    0.000 MiB   	matriz2=[]
    38  103.402 MiB    0.000 MiB   	for variavel in corners2:
    39  103.402 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.402 MiB    0.000 MiB   		matriz2.append(array)
    41  103.406 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.410 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.645 MiB    0.234 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.78645 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17309.0  17309.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6373529.0 6373529.0     81.9  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3927.0   3927.0      0.1  	imagem1 = np.float32(img1)
    12         1      75519.0  75519.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12934.0  12934.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12714.0  12714.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4923.0   4923.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11636.0  11636.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      24205.0  24205.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         61.0     61.0      0.0  	matriz1=[]
    20        47       3054.0     65.0      0.0  	for variavel in corners1:
    21        46       7624.0    165.7      0.1  		array=np.array([variavel])
    22        46       2905.0     63.2      0.0  		matriz1.append(array)
    23         1       1179.0   1179.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12892.0  12892.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        283.0    283.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76638.0  76638.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27209.0  27209.0      0.3  	imagem2 = np.float32(img2)
    30         1     623537.0 623537.0      8.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97378.0  97378.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84967.0  84967.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37155.0  37155.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76642.0  76642.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      89670.0  89670.0      1.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       129       8332.0     64.6      0.1  	for variavel in corners2:
    39       128      21628.0    169.0      0.3  		array=np.array([variavel])
    40       128       9452.0     73.8      0.1  		matriz2.append(array)
    41         1       3943.0   3943.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      59659.0  59659.0      0.8  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       5313.0   5313.0      0.1  	matches = bf.match(des1,des2)

