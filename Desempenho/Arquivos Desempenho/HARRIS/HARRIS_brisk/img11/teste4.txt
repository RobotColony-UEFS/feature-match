Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.863 MiB   48.863 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.750 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.996 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.270 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.617 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.008 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.246 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.246 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.371 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.371 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.371 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.371 MiB    0.000 MiB   	matriz1=[]
    20   97.371 MiB    0.000 MiB   	for variavel in corners1:
    21   97.371 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.371 MiB    0.000 MiB   		matriz1.append(array)
    23   97.375 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.684 MiB    0.309 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.742 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.324 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.645 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.965 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.965 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.965 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.227 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.547 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.547 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.547 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.547 MiB    0.000 MiB   	matriz2=[]
    38  103.551 MiB    0.000 MiB   	for variavel in corners2:
    39  103.551 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.551 MiB    0.000 MiB   		matriz2.append(array)
    41  103.555 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.559 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.836 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.73492 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      16970.0  16970.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6368093.0 6368093.0     82.3  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4077.0   4077.0      0.1  	imagem1 = np.float32(img1)
    12         1      76450.0  76450.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13042.0  13042.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12344.0  12344.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5194.0   5194.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11547.0  11547.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23443.0  23443.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3189.0     67.9      0.0  	for variavel in corners1:
    21        46       7567.0    164.5      0.1  		array=np.array([variavel])
    22        46       2865.0     62.3      0.0  		matriz1.append(array)
    23         1       1089.0   1089.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12734.0  12734.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        282.0    282.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76521.0  76521.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27531.0  27531.0      0.4  	imagem2 = np.float32(img2)
    30         1     576105.0 576105.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97022.0  97022.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85029.0  85029.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38580.0  38580.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76395.0  76395.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      89863.0  89863.0      1.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       129       8167.0     63.3      0.1  	for variavel in corners2:
    39       128      21759.0    170.0      0.3  		array=np.array([variavel])
    40       128       8069.0     63.0      0.1  		matriz2.append(array)
    41         1       2888.0   2888.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      61779.0  61779.0      0.8  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6038.0   6038.0      0.1  	matches = bf.match(des1,des2)

