Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.672 MiB   48.672 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.551 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.793 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.066 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.355 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.816 MiB    0.461 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.004 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.004 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.145 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.145 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.160 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.160 MiB    0.000 MiB   	matriz1=[]
    20   97.160 MiB    0.000 MiB   	for variavel in corners1:
    21   97.160 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.160 MiB    0.000 MiB   		matriz1.append(array)
    23   97.188 MiB    0.027 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.523 MiB    0.336 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.582 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.164 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.484 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.805 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.805 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.855 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.117 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.438 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.438 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.438 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.438 MiB    0.000 MiB   	matriz2=[]
    38  103.445 MiB    0.000 MiB   	for variavel in corners2:
    39  103.445 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.445 MiB    0.000 MiB   		matriz2.append(array)
    41  103.457 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.469 MiB    0.012 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.633 MiB    0.164 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.89323 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17154.0  17154.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6345853.0 6345853.0     80.4  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3904.0   3904.0      0.0  	imagem1 = np.float32(img1)
    12         1      73123.0  73123.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12175.0  12175.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      14559.0  14559.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5163.0   5163.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11555.0  11555.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22288.0  22288.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3127.0     66.5      0.0  	for variavel in corners1:
    21        46       7412.0    161.1      0.1  		array=np.array([variavel])
    22        46       2919.0     63.5      0.0  		matriz1.append(array)
    23         1       1248.0   1248.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13288.0  13288.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        394.0    394.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82148.0  82148.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26826.0  26826.0      0.3  	imagem2 = np.float32(img2)
    30         1     579155.0 579155.0      7.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97028.0  97028.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85390.0  85390.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37192.0  37192.0      0.5  	dst2 = np.uint8(dst2)
    34         1      77710.0  77710.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     184774.0 184774.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       273      18534.0     67.9      0.2  	for variavel in corners2:
    39       272      47283.0    173.8      0.6  		array=np.array([variavel])
    40       272      17699.0     65.1      0.2  		matriz2.append(array)
    41         1       5350.0   5350.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      90235.0  90235.0      1.1  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       9458.0   9458.0      0.1  	matches = bf.match(des1,des2)

