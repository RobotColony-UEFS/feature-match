Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.992 MiB   48.992 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.922 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.219 MiB   45.297 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.492 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.711 MiB    1.219 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.094 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.270 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.270 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.379 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.379 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.426 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.426 MiB    0.000 MiB   	matriz1=[]
    20   97.426 MiB    0.000 MiB   	for variavel in corners1:
    21   97.426 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.426 MiB    0.000 MiB   		matriz1.append(array)
    23   97.430 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.703 MiB    0.273 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.828 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.410 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.730 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.051 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.051 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.051 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.312 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.633 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.633 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.633 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.633 MiB    0.000 MiB   	matriz2=[]
    38  103.641 MiB    0.000 MiB   	for variavel in corners2:
    39  103.641 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.641 MiB    0.000 MiB   		matriz2.append(array)
    41  103.652 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.664 MiB    0.012 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.004 MiB    0.340 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.89851 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17404.0  17404.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6355527.0 6355527.0     80.5  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4093.0   4093.0      0.1  	imagem1 = np.float32(img1)
    12         1      75163.0  75163.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12232.0  12232.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12800.0  12800.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5099.0   5099.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11904.0  11904.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1        841.0    841.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23053.0  23053.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       2941.0     62.6      0.0  	for variavel in corners1:
    21        46       7480.0    162.6      0.1  		array=np.array([variavel])
    22        46       2802.0     60.9      0.0  		matriz1.append(array)
    23         1       1089.0   1089.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13397.0  13397.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        385.0    385.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82043.0  82043.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26498.0  26498.0      0.3  	imagem2 = np.float32(img2)
    30         1     578081.0 578081.0      7.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96666.0  96666.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84915.0  84915.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37404.0  37404.0      0.5  	dst2 = np.uint8(dst2)
    34         1      77224.0  77224.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         75.0     75.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     183771.0 183771.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       273      17851.0     65.4      0.2  	for variavel in corners2:
    39       272      44945.0    165.2      0.6  		array=np.array([variavel])
    40       272      16396.0     60.3      0.2  		matriz2.append(array)
    41         1       5978.0   5978.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      90653.0  90653.0      1.1  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       9683.0   9683.0      0.1  	matches = bf.match(des1,des2)

