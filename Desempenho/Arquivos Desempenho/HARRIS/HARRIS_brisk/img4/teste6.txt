Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.184 MiB   49.184 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   50.105 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.410 MiB   45.305 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.684 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.895 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.285 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.469 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.469 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.629 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.629 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.680 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.680 MiB    0.000 MiB   	matriz1=[]
    20   97.680 MiB    0.000 MiB   	for variavel in corners1:
    21   97.680 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.680 MiB    0.000 MiB   		matriz1.append(array)
    23   97.684 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   98.035 MiB    0.352 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   98.094 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.676 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.996 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.316 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.316 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.316 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.578 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.898 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.898 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.898 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.898 MiB    0.000 MiB   	matriz2=[]
    38  103.906 MiB    0.000 MiB   	for variavel in corners2:
    39  103.906 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.906 MiB    0.000 MiB   		matriz2.append(array)
    41  103.918 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.930 MiB    0.012 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.227 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.89921 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      20389.0  20389.0      0.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6350196.0 6350196.0     80.4  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3908.0   3908.0      0.0  	imagem1 = np.float32(img1)
    12         1      75268.0  75268.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12993.0  12993.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      13460.0  13460.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5023.0   5023.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11616.0  11616.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21566.0  21566.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3377.0     71.9      0.0  	for variavel in corners1:
    21        46       9132.0    198.5      0.1  		array=np.array([variavel])
    22        46       3028.0     65.8      0.0  		matriz1.append(array)
    23         1       1575.0   1575.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12859.0  12859.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        287.0    287.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78903.0  78903.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28327.0  28327.0      0.4  	imagem2 = np.float32(img2)
    30         1     574107.0 574107.0      7.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97066.0  97066.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84769.0  84769.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39135.0  39135.0      0.5  	dst2 = np.uint8(dst2)
    34         1      75576.0  75576.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     185302.0 185302.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       273      18068.0     66.2      0.2  	for variavel in corners2:
    39       272      48109.0    176.9      0.6  		array=np.array([variavel])
    40       272      18089.0     66.5      0.2  		matriz2.append(array)
    41         1       7310.0   7310.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      88393.0  88393.0      1.1  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1      11098.0  11098.0      0.1  	matches = bf.match(des1,des2)

