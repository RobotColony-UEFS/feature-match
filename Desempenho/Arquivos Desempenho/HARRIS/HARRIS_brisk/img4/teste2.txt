Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.809 MiB   48.809 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.625 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.895 MiB   45.270 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.168 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.457 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.883 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.070 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.070 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.168 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.168 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.203 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.203 MiB    0.000 MiB   	matriz1=[]
    20   97.203 MiB    0.000 MiB   	for variavel in corners1:
    21   97.203 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.203 MiB    0.000 MiB   		matriz1.append(array)
    23   97.207 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.477 MiB    0.270 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.535 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.117 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.438 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.758 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.758 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.758 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.020 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.340 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.340 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.340 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.340 MiB    0.000 MiB   	matriz2=[]
    38  103.348 MiB    0.000 MiB   	for variavel in corners2:
    39  103.348 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.348 MiB    0.000 MiB   		matriz2.append(array)
    41  103.359 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.371 MiB    0.012 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.676 MiB    0.305 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.90727 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17277.0  17277.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6366517.0 6366517.0     80.5  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4051.0   4051.0      0.1  	imagem1 = np.float32(img1)
    12         1      72729.0  72729.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13183.0  13183.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      13718.0  13718.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4989.0   4989.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11642.0  11642.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21486.0  21486.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3087.0     65.7      0.0  	for variavel in corners1:
    21        46       7292.0    158.5      0.1  		array=np.array([variavel])
    22        46       2794.0     60.7      0.0  		matriz1.append(array)
    23         1       1200.0   1200.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      14437.0  14437.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        270.0    270.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80027.0  80027.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28851.0  28851.0      0.4  	imagem2 = np.float32(img2)
    30         1     575231.0 575231.0      7.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97524.0  97524.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85390.0  85390.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39414.0  39414.0      0.5  	dst2 = np.uint8(dst2)
    34         1      74996.0  74996.0      0.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     185455.0 185455.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       273      18383.0     67.3      0.2  	for variavel in corners2:
    39       272      45304.0    166.6      0.6  		array=np.array([variavel])
    40       272      16359.0     60.1      0.2  		matriz2.append(array)
    41         1       5635.0   5635.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      90363.0  90363.0      1.1  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       9388.0   9388.0      0.1  	matches = bf.match(des1,des2)

