Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.500 MiB   48.500 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.383 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.625 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   94.957 MiB    0.332 MiB   	imagem1 = np.float32(img1)
    12   96.250 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.660 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.902 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.902 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.027 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.027 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.039 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.039 MiB    0.000 MiB   	matriz1=[]
    20   97.039 MiB    0.000 MiB   	for variavel in corners1:
    21   97.039 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.039 MiB    0.000 MiB   		matriz1.append(array)
    23   97.043 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.355 MiB    0.312 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.414 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   97.996 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.316 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.637 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.637 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.691 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  100.953 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.273 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.273 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.273 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.273 MiB    0.000 MiB   	matriz2=[]
    38  103.277 MiB    0.000 MiB   	for variavel in corners2:
    39  103.277 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.277 MiB    0.000 MiB   		matriz2.append(array)
    41  103.285 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.289 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.570 MiB    0.281 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.82503 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17279.0  17279.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6460362.0 6460362.0     82.6  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3911.0   3911.0      0.0  	imagem1 = np.float32(img1)
    12         1      74206.0  74206.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13445.0  13445.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12753.0  12753.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5216.0   5216.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11567.0  11567.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21745.0  21745.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3046.0     64.8      0.0  	for variavel in corners1:
    21        46       7633.0    165.9      0.1  		array=np.array([variavel])
    22        46       2853.0     62.0      0.0  		matriz1.append(array)
    23         1       1063.0   1063.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      14339.0  14339.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80095.0  80095.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27999.0  27999.0      0.4  	imagem2 = np.float32(img2)
    30         1     578418.0 578418.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96817.0  96817.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84573.0  84573.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39273.0  39273.0      0.5  	dst2 = np.uint8(dst2)
    34         1      75476.0  75476.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      74402.0  74402.0      1.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       145      10099.0     69.6      0.1  	for variavel in corners2:
    39       144      24374.0    169.3      0.3  		array=np.array([variavel])
    40       144      10583.0     73.5      0.1  		matriz2.append(array)
    41         1       2979.0   2979.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      63893.0  63893.0      0.8  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6073.0   6073.0      0.1  	matches = bf.match(des1,des2)

