Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.664 MiB   48.664 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.414 MiB    0.750 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.637 MiB   45.223 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   94.910 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.199 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.621 MiB    0.422 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.809 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.809 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   96.902 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   96.902 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   96.934 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   96.934 MiB    0.000 MiB   	matriz1=[]
    20   96.934 MiB    0.000 MiB   	for variavel in corners1:
    21   96.934 MiB    0.000 MiB   		array=np.array([variavel])
    22   96.934 MiB    0.000 MiB   		matriz1.append(array)
    23   96.977 MiB    0.043 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.375 MiB    0.398 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.434 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.016 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.336 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.656 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.656 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.656 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  100.918 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.238 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.238 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.238 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.238 MiB    0.000 MiB   	matriz2=[]
    38  103.242 MiB    0.000 MiB   	for variavel in corners2:
    39  103.242 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.242 MiB    0.000 MiB   		matriz2.append(array)
    41  103.250 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.254 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.492 MiB    0.238 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.71977 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      18597.0  18597.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6360496.0 6360496.0     82.4  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4031.0   4031.0      0.1  	imagem1 = np.float32(img1)
    12         1      74627.0  74627.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12399.0  12399.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12591.0  12591.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5169.0   5169.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11588.0  11588.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21523.0  21523.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3053.0     65.0      0.0  	for variavel in corners1:
    21        46       7537.0    163.8      0.1  		array=np.array([variavel])
    22        46       2812.0     61.1      0.0  		matriz1.append(array)
    23         1       1301.0   1301.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16311.0  16311.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        286.0    286.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77198.0  77198.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29924.0  29924.0      0.4  	imagem2 = np.float32(img2)
    30         1     574025.0 574025.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97458.0  97458.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85968.0  85968.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38814.0  38814.0      0.5  	dst2 = np.uint8(dst2)
    34         1      74829.0  74829.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      74416.0  74416.0      1.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       145      10319.0     71.2      0.1  	for variavel in corners2:
    39       144      23186.0    161.0      0.3  		array=np.array([variavel])
    40       144      10585.0     73.5      0.1  		matriz2.append(array)
    41         1       3065.0   3065.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      61879.0  61879.0      0.8  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       5505.0   5505.0      0.1  	matches = bf.match(des1,des2)

