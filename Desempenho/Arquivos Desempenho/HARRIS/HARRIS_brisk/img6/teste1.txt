Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.793 MiB   48.793 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.609 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.879 MiB   45.270 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.152 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.441 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.867 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.055 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.055 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.152 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.152 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.188 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.188 MiB    0.000 MiB   	matriz1=[]
    20   97.188 MiB    0.000 MiB   	for variavel in corners1:
    21   97.188 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.188 MiB    0.000 MiB   		matriz1.append(array)
    23   97.191 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.461 MiB    0.270 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.520 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.102 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.422 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.742 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.742 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.742 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.004 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.324 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.324 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.324 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.324 MiB    0.000 MiB   	matriz2=[]
    38  103.328 MiB    0.000 MiB   	for variavel in corners2:
    39  103.328 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.328 MiB    0.000 MiB   		matriz2.append(array)
    41  103.336 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.344 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.648 MiB    0.305 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.84279 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17022.0  17022.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6382405.0 6382405.0     81.4  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4070.0   4070.0      0.1  	imagem1 = np.float32(img1)
    12         1      74244.0  74244.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14069.0  14069.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12651.0  12651.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6575.0   6575.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11573.0  11573.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         82.0     82.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20804.0  20804.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         53.0     53.0      0.0  	matriz1=[]
    20        47       3243.0     69.0      0.0  	for variavel in corners1:
    21        46       7450.0    162.0      0.1  		array=np.array([variavel])
    22        46       2757.0     59.9      0.0  		matriz1.append(array)
    23         1       1126.0   1126.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13663.0  13663.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        389.0    389.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79132.0  79132.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27783.0  27783.0      0.4  	imagem2 = np.float32(img2)
    30         1     629699.0 629699.0      8.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96390.0  96390.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      87413.0  87413.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38907.0  38907.0      0.5  	dst2 = np.uint8(dst2)
    34         1      75664.0  75664.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100658.0 100658.0      1.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       179      11666.0     65.2      0.1  	for variavel in corners2:
    39       178      28991.0    162.9      0.4  		array=np.array([variavel])
    40       178      10837.0     60.9      0.1  		matriz2.append(array)
    41         1       4269.0   4269.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      72059.0  72059.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       7010.0   7010.0      0.1  	matches = bf.match(des1,des2)

