Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.020 MiB   49.020 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.949 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.246 MiB   45.297 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.520 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.734 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.121 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.297 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.297 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.406 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.406 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.453 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.453 MiB    0.000 MiB   	matriz1=[]
    20   97.453 MiB    0.000 MiB   	for variavel in corners1:
    21   97.453 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.453 MiB    0.000 MiB   		matriz1.append(array)
    23   97.457 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.730 MiB    0.273 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.855 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.438 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.758 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.078 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.078 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.078 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.340 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.660 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.660 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.660 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.660 MiB    0.000 MiB   	matriz2=[]
    38  103.664 MiB    0.000 MiB   	for variavel in corners2:
    39  103.664 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.664 MiB    0.000 MiB   		matriz2.append(array)
    41  103.672 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.680 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.020 MiB    0.340 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.92556 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17248.0  17248.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6469807.0 6469807.0     81.6  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3981.0   3981.0      0.1  	imagem1 = np.float32(img1)
    12         1      76094.0  76094.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13302.0  13302.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12616.0  12616.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4992.0   4992.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12950.0  12950.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23446.0  23446.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       2996.0     63.7      0.0  	for variavel in corners1:
    21        46       7543.0    164.0      0.1  		array=np.array([variavel])
    22        46       2843.0     61.8      0.0  		matriz1.append(array)
    23         1       1078.0   1078.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12962.0  12962.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79583.0  79583.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26704.0  26704.0      0.3  	imagem2 = np.float32(img2)
    30         1     620682.0 620682.0      7.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96528.0  96528.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      84979.0  84979.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37102.0  37102.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76665.0  76665.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     102157.0 102157.0      1.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       179      13023.0     72.8      0.2  	for variavel in corners2:
    39       178      29049.0    163.2      0.4  		array=np.array([variavel])
    40       178      12168.0     68.4      0.2  		matriz2.append(array)
    41         1       3837.0   3837.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      73526.0  73526.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       7141.0   7141.0      0.1  	matches = bf.match(des1,des2)

