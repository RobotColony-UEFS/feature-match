Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.020 MiB   49.020 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.949 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.246 MiB   45.297 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.520 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.734 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.121 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.297 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.297 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.406 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.406 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.453 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.453 MiB    0.000 MiB   	matriz1=[]
    20   97.453 MiB    0.000 MiB   	for variavel in corners1:
    21   97.453 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.453 MiB    0.000 MiB   		matriz1.append(array)
    23   97.457 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.730 MiB    0.273 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.855 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.438 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.758 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.078 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.078 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.078 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.340 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.660 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.660 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.660 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.660 MiB    0.000 MiB   	matriz2=[]
    38  103.664 MiB    0.000 MiB   	for variavel in corners2:
    39  103.664 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.664 MiB    0.000 MiB   		matriz2.append(array)
    41  103.672 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.680 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.020 MiB    0.340 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.8267 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      16955.0  16955.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6374742.0 6374742.0     81.4  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3988.0   3988.0      0.1  	imagem1 = np.float32(img1)
    12         1      75947.0  75947.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13065.0  13065.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12415.0  12415.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       7568.0   7568.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11466.0  11466.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20959.0  20959.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3075.0     65.4      0.0  	for variavel in corners1:
    21        46       7364.0    160.1      0.1  		array=np.array([variavel])
    22        46       2977.0     64.7      0.0  		matriz1.append(array)
    23         1       1242.0   1242.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      12937.0  12937.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        391.0    391.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82051.0  82051.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26566.0  26566.0      0.3  	imagem2 = np.float32(img2)
    30         1     623549.0 623549.0      8.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96712.0  96712.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85480.0  85480.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39749.0  39749.0      0.5  	dst2 = np.uint8(dst2)
    34         1      73527.0  73527.0      0.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      92448.0  92448.0      1.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         62.0     62.0      0.0  	matriz2=[]
    38       184      11934.0     64.9      0.2  	for variavel in corners2:
    39       183      32804.0    179.3      0.4  		array=np.array([variavel])
    40       183      11730.0     64.1      0.1  		matriz2.append(array)
    41         1       3822.0   3822.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      74081.0  74081.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6861.0   6861.0      0.1  	matches = bf.match(des1,des2)

