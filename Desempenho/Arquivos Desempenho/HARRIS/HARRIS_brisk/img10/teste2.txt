Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.219 MiB   49.219 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   50.141 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   95.445 MiB   45.305 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.719 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.934 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   97.320 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   97.504 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   97.504 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.664 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.664 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.715 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.715 MiB    0.000 MiB   	matriz1=[]
    20   97.715 MiB    0.000 MiB   	for variavel in corners1:
    21   97.715 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.715 MiB    0.000 MiB   		matriz1.append(array)
    23   97.719 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   98.070 MiB    0.352 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   98.129 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.711 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  101.031 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  103.352 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  103.352 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  103.352 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.613 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.934 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.934 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.934 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.934 MiB    0.000 MiB   	matriz2=[]
    38  103.938 MiB    0.000 MiB   	for variavel in corners2:
    39  103.938 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.938 MiB    0.000 MiB   		matriz2.append(array)
    41  103.941 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.945 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  104.242 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.74523 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      18673.0  18673.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6366111.0 6366111.0     82.2  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4007.0   4007.0      0.1  	imagem1 = np.float32(img1)
    12         1      74203.0  74203.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14228.0  14228.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12502.0  12502.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5040.0   5040.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11712.0  11712.0      0.2  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21583.0  21583.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3113.0     66.2      0.0  	for variavel in corners1:
    21        46       7799.0    169.5      0.1  		array=np.array([variavel])
    22        46       2835.0     61.6      0.0  		matriz1.append(array)
    23         1       1151.0   1151.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15227.0  15227.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        289.0    289.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78886.0  78886.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29888.0  29888.0      0.4  	imagem2 = np.float32(img2)
    30         1     625112.0 625112.0      8.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97309.0  97309.0      1.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85202.0  85202.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37232.0  37232.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76127.0  76127.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         86.0     86.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      62860.0  62860.0      0.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       105       6958.0     66.3      0.1  	for variavel in corners2:
    39       104      18163.0    174.6      0.2  		array=np.array([variavel])
    40       104       6704.0     64.5      0.1  		matriz2.append(array)
    41         1       2359.0   2359.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      55177.0  55177.0      0.7  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       4490.0   4490.0      0.1  	matches = bf.match(des1,des2)

