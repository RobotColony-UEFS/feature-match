Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.602 MiB   48.602 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.477 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.719 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   94.992 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.285 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.742 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.930 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.930 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.070 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.070 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.086 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.086 MiB    0.000 MiB   	matriz1=[]
    20   97.086 MiB    0.000 MiB   	for variavel in corners1:
    21   97.086 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.086 MiB    0.000 MiB   		matriz1.append(array)
    23   97.113 MiB    0.027 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.449 MiB    0.336 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.508 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.090 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.410 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.730 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.730 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.781 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.043 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.363 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.363 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.363 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.363 MiB    0.000 MiB   	matriz2=[]
    38  103.367 MiB    0.000 MiB   	for variavel in corners2:
    39  103.367 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.367 MiB    0.000 MiB   		matriz2.append(array)
    41  103.371 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.375 MiB    0.004 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.539 MiB    0.164 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.73966 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      20365.0  20365.0      0.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6362481.0 6362481.0     82.2  	brisk = cv2.BRISK_create()
    10                                           
    11         1       4078.0   4078.0      0.1  	imagem1 = np.float32(img1)
    12         1      74745.0  74745.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13920.0  13920.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12348.0  12348.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5098.0   5098.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11470.0  11470.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21784.0  21784.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3074.0     65.4      0.0  	for variavel in corners1:
    21        46       8408.0    182.8      0.1  		array=np.array([variavel])
    22        46       4219.0     91.7      0.1  		matriz1.append(array)
    23         1       1098.0   1098.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13007.0  13007.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        380.0    380.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77863.0  77863.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29379.0  29379.0      0.4  	imagem2 = np.float32(img2)
    30         1     625555.0 625555.0      8.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96561.0  96561.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85110.0  85110.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37065.0  37065.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76626.0  76626.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      61320.0  61320.0      0.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       105       6908.0     65.8      0.1  	for variavel in corners2:
    39       104      17883.0    172.0      0.2  		array=np.array([variavel])
    40       104       6684.0     64.3      0.1  		matriz2.append(array)
    41         1       2218.0   2218.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      55631.0  55631.0      0.7  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       4086.0   4086.0      0.1  	matches = bf.match(des1,des2)

