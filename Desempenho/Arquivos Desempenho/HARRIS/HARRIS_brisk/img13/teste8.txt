Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.527 MiB   48.527 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.270 MiB    0.742 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.516 MiB   45.246 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   94.789 MiB    0.273 MiB   	imagem1 = np.float32(img1)
    12   96.129 MiB    1.340 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.605 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.793 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.793 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   96.879 MiB    0.086 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   96.879 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   96.902 MiB    0.023 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   96.902 MiB    0.000 MiB   	matriz1=[]
    20   96.902 MiB    0.000 MiB   	for variavel in corners1:
    21   96.902 MiB    0.000 MiB   		array=np.array([variavel])
    22   96.902 MiB    0.000 MiB   		matriz1.append(array)
    23   96.938 MiB    0.035 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.336 MiB    0.398 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.395 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   97.977 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.297 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.617 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.617 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.664 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  100.926 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.246 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.246 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.246 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.246 MiB    0.000 MiB   	matriz2=[]
    38  103.250 MiB    0.000 MiB   	for variavel in corners2:
    39  103.250 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.250 MiB    0.000 MiB   		matriz2.append(array)
    41  103.258 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.266 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.438 MiB    0.172 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.8512 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      16981.0  16981.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6383802.0 6383802.0     81.3  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3983.0   3983.0      0.1  	imagem1 = np.float32(img1)
    12         1      75133.0  75133.0      1.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14461.0  14461.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12669.0  12669.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5111.0   5111.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11584.0  11584.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21043.0  21043.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         53.0     53.0      0.0  	matriz1=[]
    20        47       3036.0     64.6      0.0  	for variavel in corners1:
    21        46       8318.0    180.8      0.1  		array=np.array([variavel])
    22        46       3686.0     80.1      0.0  		matriz1.append(array)
    23         1       1119.0   1119.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      13259.0  13259.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        395.0    395.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79208.0  79208.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28550.0  28550.0      0.4  	imagem2 = np.float32(img2)
    30         1     625708.0 625708.0      8.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96676.0  96676.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85556.0  85556.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37168.0  37168.0      0.5  	dst2 = np.uint8(dst2)
    34         1      76731.0  76731.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     112351.0 112351.0      1.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       180      11388.0     63.3      0.1  	for variavel in corners2:
    39       179      29038.0    162.2      0.4  		array=np.array([variavel])
    40       179      12604.0     70.4      0.2  		matriz2.append(array)
    41         1       3853.0   3853.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      70427.0  70427.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       7079.0   7079.0      0.1  	matches = bf.match(des1,des2)

