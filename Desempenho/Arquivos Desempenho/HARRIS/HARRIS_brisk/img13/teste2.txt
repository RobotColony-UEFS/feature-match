Filename: HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.551 MiB   48.551 MiB   @profile
     7                             def HARRIS_brisk(img):
     8   49.434 MiB    0.883 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   94.676 MiB   45.242 MiB   	brisk = cv2.BRISK_create()
    10                             
    11   95.008 MiB    0.332 MiB   	imagem1 = np.float32(img1)
    12   96.301 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   96.711 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   96.953 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   96.953 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   97.078 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   97.078 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   97.090 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   97.090 MiB    0.000 MiB   	matriz1=[]
    20   97.090 MiB    0.000 MiB   	for variavel in corners1:
    21   97.090 MiB    0.000 MiB   		array=np.array([variavel])
    22   97.090 MiB    0.000 MiB   		matriz1.append(array)
    23   97.094 MiB    0.004 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   97.406 MiB    0.312 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    25                             
    26   97.465 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   98.047 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29  100.367 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30  102.688 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  102.688 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  102.742 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  101.004 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34  103.324 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  103.324 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  103.324 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  103.324 MiB    0.000 MiB   	matriz2=[]
    38  103.328 MiB    0.000 MiB   	for variavel in corners2:
    39  103.328 MiB    0.004 MiB   		array=np.array([variavel])
    40  103.328 MiB    0.000 MiB   		matriz2.append(array)
    41  103.336 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  103.344 MiB    0.008 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    43                             
    44  103.625 MiB    0.281 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 7.79531 s
File: HARRIS_brisk.py
Function: HARRIS_brisk at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_brisk(img):
     8         1      17256.0  17256.0      0.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1    6368904.0 6368904.0     81.7  	brisk = cv2.BRISK_create()
    10                                           
    11         1       3900.0   3900.0      0.1  	imagem1 = np.float32(img1)
    12         1      73945.0  73945.0      0.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13610.0  13610.0      0.2  	dst1 = cv2.dilate(dst1,None)
    14         1      12712.0  12712.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5074.0   5074.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11688.0  11688.0      0.1  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22711.0  22711.0      0.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3107.0     66.1      0.0  	for variavel in corners1:
    21        46       7573.0    164.6      0.1  		array=np.array([variavel])
    22        46       2859.0     62.2      0.0  		matriz1.append(array)
    23         1       1093.0   1093.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      14283.0  14283.0      0.2  	kp1, des1 = brisk.compute(img1, kp1)
    25                                           
    26         1        397.0    397.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79519.0  79519.0      1.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27970.0  27970.0      0.4  	imagem2 = np.float32(img2)
    30         1     577639.0 577639.0      7.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97395.0  97395.0      1.2  	dst2 = cv2.dilate(dst2,None)
    32         1      85494.0  85494.0      1.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38365.0  38365.0      0.5  	dst2 = np.uint8(dst2)
    34         1      75680.0  75680.0      1.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     117196.0 117196.0      1.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       180      12818.0     71.2      0.2  	for variavel in corners2:
    39       179      30387.0    169.8      0.4  		array=np.array([variavel])
    40       179      11592.0     64.8      0.1  		matriz2.append(array)
    41         1       3560.0   3560.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      71421.0  71421.0      0.9  	kp2, des2 = brisk.compute(img2, kp2)
    43                                           
    44         1       6869.0   6869.0      0.1  	matches = bf.match(des1,des2)

