Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.523 MiB   48.523 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.270 MiB    0.746 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.332 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.566 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   50.906 MiB    1.340 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.383 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.570 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.570 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.656 MiB    0.086 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.656 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.680 MiB    0.023 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.680 MiB    0.000 MiB   	matriz1=[]
    20   51.680 MiB    0.000 MiB   	for variavel in corners1:
    21   51.680 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.680 MiB    0.000 MiB   		matriz1.append(array)
    23   51.777 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.688 MiB    3.910 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.746 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.746 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.746 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.066 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.066 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.066 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.746 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.066 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.066 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.066 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.066 MiB    0.000 MiB   	matriz2=[]
    38   58.078 MiB    0.000 MiB   	for variavel in corners2:
    39   58.078 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.078 MiB    0.000 MiB   		matriz2.append(array)
    41   58.086 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.098 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.332 MiB    0.234 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.9583 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      16897.0  16897.0      0.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        259.0    259.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3987.0   3987.0      0.1  	imagem1 = np.float32(img1)
    12         1      75353.0  75353.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13187.0  13187.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12502.0  12502.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5094.0   5094.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11635.0  11635.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23453.0  23453.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3080.0     65.5      0.1  	for variavel in corners1:
    21        46       7423.0    161.4      0.2  		array=np.array([variavel])
    22        46       2817.0     61.2      0.1  		matriz1.append(array)
    23         1       1353.0   1353.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     233614.0 233614.0      5.9  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        282.0    282.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      75712.0  75712.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21763.0  21763.0      0.5  	imagem2 = np.float32(img2)
    30         1     624992.0 624992.0     15.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96894.0  96894.0      2.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85208.0  85208.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37659.0  37659.0      1.0  	dst2 = np.uint8(dst2)
    34         1      74384.0  74384.0      1.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     169814.0 169814.0      4.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       287      18436.0     64.2      0.5  	for variavel in corners2:
    39       286      46259.0    161.7      1.2  		array=np.array([variavel])
    40       286      17728.0     62.0      0.4  		matriz2.append(array)
    41         1       6270.0   6270.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2226575.0 2226575.0     56.3  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      45389.0  45389.0      1.1  	matches = bf.match(des1,des2)

