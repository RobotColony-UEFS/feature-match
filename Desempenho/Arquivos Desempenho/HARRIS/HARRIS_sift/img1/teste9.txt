Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.762 MiB   48.762 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.578 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.699 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.934 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.219 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.648 MiB    0.430 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.836 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.836 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.934 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.934 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.969 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.969 MiB    0.000 MiB   	matriz1=[]
    20   51.969 MiB    0.000 MiB   	for variavel in corners1:
    21   51.969 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.969 MiB    0.000 MiB   		matriz1.append(array)
    23   52.074 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.801 MiB    3.727 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.859 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.859 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.859 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.180 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.180 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.180 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.859 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.180 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.180 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.180 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.180 MiB    0.000 MiB   	matriz2=[]
    38   58.191 MiB    0.000 MiB   	for variavel in corners2:
    39   58.191 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.191 MiB    0.000 MiB   		matriz2.append(array)
    41   58.199 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.211 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.559 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.95081 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17114.0  17114.0      0.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        331.0    331.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4040.0   4040.0      0.1  	imagem1 = np.float32(img1)
    12         1      75873.0  75873.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13201.0  13201.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12352.0  12352.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4981.0   4981.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12800.0  12800.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21776.0  21776.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3105.0     66.1      0.1  	for variavel in corners1:
    21        46       7581.0    164.8      0.2  		array=np.array([variavel])
    22        46       3059.0     66.5      0.1  		matriz1.append(array)
    23         1       1270.0   1270.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     232254.0 232254.0      5.9  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        379.0    379.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      75303.0  75303.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21808.0  21808.0      0.6  	imagem2 = np.float32(img2)
    30         1     624114.0 624114.0     15.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97137.0  97137.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84915.0  84915.0      2.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35923.0  35923.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76401.0  76401.0      1.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     171441.0 171441.0      4.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       287      18865.0     65.7      0.5  	for variavel in corners2:
    39       286      49838.0    174.3      1.3  		array=np.array([variavel])
    40       286      17812.0     62.3      0.5  		matriz2.append(array)
    41         1       5656.0   5656.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2216642.0 2216642.0     56.1  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      44554.0  44554.0      1.1  	matches = bf.match(des1,des2)

