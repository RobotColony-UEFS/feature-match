Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.820 MiB   48.820 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.633 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.754 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.988 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.277 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.703 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.891 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.891 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.988 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.988 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.023 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.023 MiB    0.000 MiB   	matriz1=[]
    20   52.023 MiB    0.000 MiB   	for variavel in corners1:
    21   52.023 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.023 MiB    0.000 MiB   		matriz1.append(array)
    23   52.129 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.855 MiB    3.727 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.914 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.914 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.914 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.234 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.234 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.234 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.914 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.234 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.234 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.234 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.234 MiB    0.000 MiB   	matriz2=[]
    38   58.246 MiB    0.000 MiB   	for variavel in corners2:
    39   58.246 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.246 MiB    0.000 MiB   		matriz2.append(array)
    41   58.254 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.266 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.613 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.94934 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18759.0  18759.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        349.0    349.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4023.0   4023.0      0.1  	imagem1 = np.float32(img1)
    12         1      73993.0  73993.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13048.0  13048.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      15012.0  15012.0      0.4  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4990.0   4990.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11631.0  11631.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21054.0  21054.0      0.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         53.0     53.0      0.0  	matriz1=[]
    20        47       3106.0     66.1      0.1  	for variavel in corners1:
    21        46       7384.0    160.5      0.2  		array=np.array([variavel])
    22        46       2830.0     61.5      0.1  		matriz1.append(array)
    23         1       1293.0   1293.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     231460.0 231460.0      5.9  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        389.0    389.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      76274.0  76274.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21783.0  21783.0      0.6  	imagem2 = np.float32(img2)
    30         1     627295.0 627295.0     15.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95978.0  95978.0      2.4  	dst2 = cv2.dilate(dst2,None)
    32         1      82055.0  82055.0      2.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38329.0  38329.0      1.0  	dst2 = np.uint8(dst2)
    34         1      77003.0  77003.0      1.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         76.0     76.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     170123.0 170123.0      4.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       287      18673.0     65.1      0.5  	for variavel in corners2:
    39       286      45549.0    159.3      1.2  		array=np.array([variavel])
    40       286      18415.0     64.4      0.5  		matriz2.append(array)
    41         1       5848.0   5848.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2219058.0 2219058.0     56.2  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      43358.0  43358.0      1.1  	matches = bf.match(des1,des2)

