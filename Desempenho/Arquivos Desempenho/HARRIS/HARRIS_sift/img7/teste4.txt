Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.645 MiB   48.645 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.457 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.520 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.754 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.039 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.516 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.703 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.703 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.793 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.793 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.820 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.820 MiB    0.000 MiB   	matriz1=[]
    20   51.820 MiB    0.000 MiB   	for variavel in corners1:
    21   51.820 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.820 MiB    0.000 MiB   		matriz1.append(array)
    23   51.918 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.781 MiB    3.863 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.840 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.840 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.840 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.160 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.160 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.160 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.840 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.160 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.160 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.160 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.160 MiB    0.000 MiB   	matriz2=[]
    38   58.164 MiB    0.000 MiB   	for variavel in corners2:
    39   58.164 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.164 MiB    0.000 MiB   		matriz2.append(array)
    41   58.172 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.176 MiB    0.004 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.473 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.80096 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17460.0  17460.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        361.0    361.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       5001.0   5001.0      0.1  	imagem1 = np.float32(img1)
    12         1      73584.0  73584.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14239.0  14239.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      13261.0  13261.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5207.0   5207.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11524.0  11524.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21389.0  21389.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3089.0     65.7      0.1  	for variavel in corners1:
    21        46       7625.0    165.8      0.2  		array=np.array([variavel])
    22        46       2956.0     64.3      0.1  		matriz1.append(array)
    23         1       1242.0   1242.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     236838.0 236838.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        279.0    279.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      73987.0  73987.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22917.0  22917.0      0.6  	imagem2 = np.float32(img2)
    30         1     627779.0 627779.0     16.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96980.0  96980.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85187.0  85187.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35378.0  35378.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76700.0  76700.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      76861.0  76861.0      2.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       145      10550.0     72.8      0.3  	for variavel in corners2:
    39       144      23718.0    164.7      0.6  		array=np.array([variavel])
    40       144       8927.0     62.0      0.2  		matriz2.append(array)
    41         1       3092.0   3092.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2221039.0 2221039.0     58.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      23513.0  23513.0      0.6  	matches = bf.match(des1,des2)

