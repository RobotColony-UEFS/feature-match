Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.770 MiB   48.770 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.586 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.707 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.941 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.227 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.656 MiB    0.430 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.844 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.844 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.941 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.941 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.977 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.977 MiB    0.000 MiB   	matriz1=[]
    20   51.977 MiB    0.000 MiB   	for variavel in corners1:
    21   51.977 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.977 MiB    0.000 MiB   		matriz1.append(array)
    23   52.082 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.809 MiB    3.727 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.867 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.867 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.867 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.188 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.188 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.188 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.867 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.188 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.188 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.188 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.188 MiB    0.000 MiB   	matriz2=[]
    38   58.191 MiB    0.000 MiB   	for variavel in corners2:
    39   58.191 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.191 MiB    0.000 MiB   		matriz2.append(array)
    41   58.199 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.203 MiB    0.004 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.551 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.71609 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17333.0  17333.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        337.0    337.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3963.0   3963.0      0.1  	imagem1 = np.float32(img1)
    12         1      75345.0  75345.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13089.0  13089.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12302.0  12302.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5128.0   5128.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11619.0  11619.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23571.0  23571.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3041.0     64.7      0.1  	for variavel in corners1:
    21        46       7672.0    166.8      0.2  		array=np.array([variavel])
    22        46       2874.0     62.5      0.1  		matriz1.append(array)
    23         1       1485.0   1485.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     232619.0 232619.0      6.3  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      75888.0  75888.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21824.0  21824.0      0.6  	imagem2 = np.float32(img2)
    30         1     624453.0 624453.0     16.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96161.0  96161.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84564.0  84564.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36813.0  36813.0      1.0  	dst2 = np.uint8(dst2)
    34         1      75157.0  75157.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      75506.0  75506.0      2.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       145       9553.0     65.9      0.3  	for variavel in corners2:
    39       144      25055.0    174.0      0.7  		array=np.array([variavel])
    40       144       8897.0     61.8      0.2  		matriz2.append(array)
    41         1       3049.0   3049.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2146634.0 2146634.0     57.8  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      21596.0  21596.0      0.6  	matches = bf.match(des1,des2)

