Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.781 MiB   48.781 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.531 MiB    0.750 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.594 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.828 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.117 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.539 MiB    0.422 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.727 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.727 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.820 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.820 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.852 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.852 MiB    0.000 MiB   	matriz1=[]
    20   51.852 MiB    0.000 MiB   	for variavel in corners1:
    21   51.852 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.852 MiB    0.000 MiB   		matriz1.append(array)
    23   51.953 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.789 MiB    3.836 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.848 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.848 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.848 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.168 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.168 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.168 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.848 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.168 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.168 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.168 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.168 MiB    0.000 MiB   	matriz2=[]
    38   58.172 MiB    0.000 MiB   	for variavel in corners2:
    39   58.172 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.172 MiB    0.000 MiB   		matriz2.append(array)
    41   58.176 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.184 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.461 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.75348 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17923.0  17923.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        256.0    256.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3946.0   3946.0      0.1  	imagem1 = np.float32(img1)
    12         1      75709.0  75709.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13145.0  13145.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12436.0  12436.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5094.0   5094.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11543.0  11543.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22764.0  22764.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1        100.0    100.0      0.0  	matriz1=[]
    20        47       3135.0     66.7      0.1  	for variavel in corners1:
    21        46       7602.0    165.3      0.2  		array=np.array([variavel])
    22        46       2860.0     62.2      0.1  		matriz1.append(array)
    23         1       1205.0   1205.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     238321.0 238321.0      6.3  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        285.0    285.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      72511.0  72511.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21973.0  21973.0      0.6  	imagem2 = np.float32(img2)
    30         1     625512.0 625512.0     16.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96909.0  96909.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84706.0  84706.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37010.0  37010.0      1.0  	dst2 = np.uint8(dst2)
    34         1      75457.0  75457.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         86.0     86.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      87918.0  87918.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         62.0     62.0      0.0  	matriz2=[]
    38       129       8895.0     69.0      0.2  	for variavel in corners2:
    39       128      22071.0    172.4      0.6  		array=np.array([variavel])
    40       128       9231.0     72.1      0.2  		matriz2.append(array)
    41         1       2720.0   2720.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2171234.0 2171234.0     57.8  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      20770.0  20770.0      0.6  	matches = bf.match(des1,des2)

