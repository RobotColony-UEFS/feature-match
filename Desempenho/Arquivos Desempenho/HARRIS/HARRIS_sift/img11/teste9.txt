Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.707 MiB   48.707 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.516 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.578 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.812 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.102 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.574 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.762 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.762 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.852 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.852 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.879 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.879 MiB    0.000 MiB   	matriz1=[]
    20   51.879 MiB    0.000 MiB   	for variavel in corners1:
    21   51.879 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.879 MiB    0.000 MiB   		matriz1.append(array)
    23   51.977 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.840 MiB    3.863 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.898 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.898 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.898 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.219 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.219 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.219 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.898 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.219 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.219 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.219 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.219 MiB    0.000 MiB   	matriz2=[]
    38   58.223 MiB    0.000 MiB   	for variavel in corners2:
    39   58.223 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.223 MiB    0.000 MiB   		matriz2.append(array)
    41   58.227 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.234 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.531 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.74182 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      16851.0  16851.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        250.0    250.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4029.0   4029.0      0.1  	imagem1 = np.float32(img1)
    12         1      76074.0  76074.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13514.0  13514.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12284.0  12284.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5118.0   5118.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12474.0  12474.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1        138.0    138.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22526.0  22526.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3291.0     70.0      0.1  	for variavel in corners1:
    21        46       7494.0    162.9      0.2  		array=np.array([variavel])
    22        46       3663.0     79.6      0.1  		matriz1.append(array)
    23         1       1238.0   1238.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     233039.0 233039.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        281.0    281.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      73348.0  73348.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22276.0  22276.0      0.6  	imagem2 = np.float32(img2)
    30         1     626098.0 626098.0     16.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96588.0  96588.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84535.0  84535.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35224.0  35224.0      0.9  	dst2 = np.uint8(dst2)
    34         1      77100.0  77100.0      2.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      86941.0  86941.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       129       9721.0     75.4      0.3  	for variavel in corners2:
    39       128      21386.0    167.1      0.6  		array=np.array([variavel])
    40       128       8085.0     63.2      0.2  		matriz2.append(array)
    41         1       3813.0   3813.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2164969.0 2164969.0     57.9  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      19271.0  19271.0      0.5  	matches = bf.match(des1,des2)

