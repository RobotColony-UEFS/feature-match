Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.176 MiB   49.176 MiB   @profile
     7                             def HARRIS_sift(img):
     8   50.094 MiB    0.918 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.211 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.445 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.660 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.047 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.230 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.230 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.391 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.391 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.441 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.441 MiB    0.000 MiB   	matriz1=[]
    20   52.441 MiB    0.000 MiB   	for variavel in corners1:
    21   52.441 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.441 MiB    0.000 MiB   		matriz1.append(array)
    23   52.562 MiB    0.121 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.383 MiB    3.820 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.441 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.441 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.441 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.762 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.762 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.762 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.441 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.762 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.762 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.762 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.762 MiB    0.000 MiB   	matriz2=[]
    38   58.766 MiB    0.000 MiB   	for variavel in corners2:
    39   58.766 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.766 MiB    0.000 MiB   		matriz2.append(array)
    41   58.770 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.777 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.074 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.72866 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17006.0  17006.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        344.0    344.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3986.0   3986.0      0.1  	imagem1 = np.float32(img1)
    12         1      75387.0  75387.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13041.0  13041.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12285.0  12285.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4994.0   4994.0      0.1  	dst1 = np.uint8(dst1)
    16         1      14227.0  14227.0      0.4  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20880.0  20880.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3053.0     65.0      0.1  	for variavel in corners1:
    21        46       7388.0    160.6      0.2  		array=np.array([variavel])
    22        46       2914.0     63.3      0.1  		matriz1.append(array)
    23         1       1265.0   1265.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     233588.0 233588.0      6.3  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        390.0    390.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      71337.0  71337.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21718.0  21718.0      0.6  	imagem2 = np.float32(img2)
    30         1     623565.0 623565.0     16.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96178.0  96178.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84975.0  84975.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37528.0  37528.0      1.0  	dst2 = np.uint8(dst2)
    34         1      74207.0  74207.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      87704.0  87704.0      2.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       129       8719.0     67.6      0.2  	for variavel in corners2:
    39       128      21477.0    167.8      0.6  		array=np.array([variavel])
    40       128       8222.0     64.2      0.2  		matriz2.append(array)
    41         1       2651.0   2651.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2159221.0 2159221.0     57.9  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      20128.0  20128.0      0.5  	matches = bf.match(des1,des2)

