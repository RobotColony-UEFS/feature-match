Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.582 MiB   48.582 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.461 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.586 MiB    0.125 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.879 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.172 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.582 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.824 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.824 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.949 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.949 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.961 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.961 MiB    0.000 MiB   	matriz1=[]
    20   51.961 MiB    0.000 MiB   	for variavel in corners1:
    21   51.961 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.961 MiB    0.000 MiB   		matriz1.append(array)
    23   52.027 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.109 MiB    4.082 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.168 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.168 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.168 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.488 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.488 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.488 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.168 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.488 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.488 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.488 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.488 MiB    0.000 MiB   	matriz2=[]
    38   58.492 MiB    0.000 MiB   	for variavel in corners2:
    39   58.492 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.492 MiB    0.000 MiB   		matriz2.append(array)
    41   58.496 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.504 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.781 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.74377 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18437.0  18437.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        334.0    334.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3971.0   3971.0      0.1  	imagem1 = np.float32(img1)
    12         1      74599.0  74599.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13752.0  13752.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12654.0  12654.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5877.0   5877.0      0.2  	dst1 = np.uint8(dst1)
    16         1      11573.0  11573.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21077.0  21077.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3098.0     65.9      0.1  	for variavel in corners1:
    21        46       7431.0    161.5      0.2  		array=np.array([variavel])
    22        46       2986.0     64.9      0.1  		matriz1.append(array)
    23         1       1434.0   1434.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     235400.0 235400.0      6.3  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        273.0    273.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      70541.0  70541.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22358.0  22358.0      0.6  	imagem2 = np.float32(img2)
    30         1     629378.0 629378.0     16.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96891.0  96891.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84425.0  84425.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36451.0  36451.0      1.0  	dst2 = np.uint8(dst2)
    34         1      76579.0  76579.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      87288.0  87288.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       129       8320.0     64.5      0.2  	for variavel in corners2:
    39       128      21227.0    165.8      0.6  		array=np.array([variavel])
    40       128       8137.0     63.6      0.2  		matriz2.append(array)
    41         1       2619.0   2619.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2165904.0 2165904.0     57.9  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      20478.0  20478.0      0.5  	matches = bf.match(des1,des2)

