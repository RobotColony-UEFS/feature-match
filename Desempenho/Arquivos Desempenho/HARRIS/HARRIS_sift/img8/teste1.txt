Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.613 MiB   48.613 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.355 MiB    0.742 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.418 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.652 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   50.996 MiB    1.344 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.469 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.656 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.656 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.742 MiB    0.086 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.742 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.766 MiB    0.023 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.766 MiB    0.000 MiB   	matriz1=[]
    20   51.766 MiB    0.000 MiB   	for variavel in corners1:
    21   51.766 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.766 MiB    0.000 MiB   		matriz1.append(array)
    23   51.863 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.773 MiB    3.910 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.832 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.832 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.832 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.152 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.152 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.152 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.832 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.152 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.152 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.152 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.152 MiB    0.000 MiB   	matriz2=[]
    38   58.164 MiB    0.000 MiB   	for variavel in corners2:
    39   58.164 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.164 MiB    0.000 MiB   		matriz2.append(array)
    41   58.172 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.184 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.418 MiB    0.234 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.91686 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17983.0  17983.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        370.0    370.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3771.0   3771.0      0.1  	imagem1 = np.float32(img1)
    12         1      76201.0  76201.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13186.0  13186.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      13422.0  13422.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5106.0   5106.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11565.0  11565.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21162.0  21162.0      0.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3183.0     67.7      0.1  	for variavel in corners1:
    21        46       8451.0    183.7      0.2  		array=np.array([variavel])
    22        46       2964.0     64.4      0.1  		matriz1.append(array)
    23         1       1314.0   1314.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     232755.0 232755.0      5.9  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        276.0    276.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74626.0  74626.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      23120.0  23120.0      0.6  	imagem2 = np.float32(img2)
    30         1     624497.0 624497.0     15.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96573.0  96573.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      83542.0  83542.0      2.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35878.0  35878.0      0.9  	dst2 = np.uint8(dst2)
    34         1      77429.0  77429.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     182029.0 182029.0      4.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       285      20857.0     73.2      0.5  	for variavel in corners2:
    39       284      47271.0    166.4      1.2  		array=np.array([variavel])
    40       284      19111.0     67.3      0.5  		matriz2.append(array)
    41         1       5389.0   5389.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2171983.0 2171983.0     55.5  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      42562.0  42562.0      1.1  	matches = bf.match(des1,des2)

