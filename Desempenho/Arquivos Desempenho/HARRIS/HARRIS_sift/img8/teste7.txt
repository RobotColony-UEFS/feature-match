Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.074 MiB   49.074 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.891 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.012 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.246 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.527 MiB    1.281 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.906 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.090 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.090 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.191 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.191 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.230 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.230 MiB    0.000 MiB   	matriz1=[]
    20   52.230 MiB    0.000 MiB   	for variavel in corners1:
    21   52.230 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.230 MiB    0.000 MiB   		matriz1.append(array)
    23   52.340 MiB    0.109 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.113 MiB    3.773 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.234 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.234 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.234 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.555 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.555 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.555 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.234 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.555 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.555 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.555 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.555 MiB    0.000 MiB   	matriz2=[]
    38   58.566 MiB    0.000 MiB   	for variavel in corners2:
    39   58.566 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.566 MiB    0.000 MiB   		matriz2.append(array)
    41   58.574 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.586 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.871 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.91684 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18180.0  18180.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        248.0    248.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4038.0   4038.0      0.1  	imagem1 = np.float32(img1)
    12         1      75074.0  75074.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13264.0  13264.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      13786.0  13786.0      0.4  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5330.0   5330.0      0.1  	dst1 = np.uint8(dst1)
    16         1      13280.0  13280.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21261.0  21261.0      0.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3105.0     66.1      0.1  	for variavel in corners1:
    21        46       7443.0    161.8      0.2  		array=np.array([variavel])
    22        46       2891.0     62.8      0.1  		matriz1.append(array)
    23         1       1249.0   1249.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     233023.0 233023.0      5.9  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74892.0  74892.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21752.0  21752.0      0.6  	imagem2 = np.float32(img2)
    30         1     627917.0 627917.0     16.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96135.0  96135.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      81924.0  81924.0      2.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37640.0  37640.0      1.0  	dst2 = np.uint8(dst2)
    34         1      75997.0  75997.0      1.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1        149.0    149.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     190038.0 190038.0      4.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       285      19456.0     68.3      0.5  	for variavel in corners2:
    39       284      48105.0    169.4      1.2  		array=np.array([variavel])
    40       284      17917.0     63.1      0.5  		matriz2.append(array)
    41         1       5695.0   5695.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2162773.0 2162773.0     55.2  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      43800.0  43800.0      1.1  	matches = bf.match(des1,des2)

