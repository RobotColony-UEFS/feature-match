Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.746 MiB   48.746 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.562 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.625 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.859 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.207 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.676 MiB    0.469 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.863 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.863 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.945 MiB    0.082 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.945 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.965 MiB    0.020 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.965 MiB    0.000 MiB   	matriz1=[]
    20   51.965 MiB    0.000 MiB   	for variavel in corners1:
    21   51.965 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.965 MiB    0.000 MiB   		matriz1.append(array)
    23   52.059 MiB    0.094 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.031 MiB    3.973 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.090 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.090 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.090 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.410 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.410 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.410 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.090 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.410 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.410 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.410 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.410 MiB    0.000 MiB   	matriz2=[]
    38   58.418 MiB    0.000 MiB   	for variavel in corners2:
    39   58.418 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.418 MiB    0.000 MiB   		matriz2.append(array)
    41   58.422 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.430 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.594 MiB    0.164 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 4.05645 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      16938.0  16938.0      0.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        360.0    360.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3861.0   3861.0      0.1  	imagem1 = np.float32(img1)
    12         1      75449.0  75449.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12082.0  12082.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12697.0  12697.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5171.0   5171.0      0.1  	dst1 = np.uint8(dst1)
    16         1      13245.0  13245.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22621.0  22621.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3086.0     65.7      0.1  	for variavel in corners1:
    21        46       7447.0    161.9      0.2  		array=np.array([variavel])
    22        46       2825.0     61.4      0.1  		matriz1.append(array)
    23         1       1432.0   1432.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     233184.0 233184.0      5.7  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        389.0    389.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74169.0  74169.0      1.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21835.0  21835.0      0.5  	imagem2 = np.float32(img2)
    30         1     631893.0 631893.0     15.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97895.0  97895.0      2.4  	dst2 = cv2.dilate(dst2,None)
    32         1      83565.0  83565.0      2.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37554.0  37554.0      0.9  	dst2 = np.uint8(dst2)
    34         1      73893.0  73893.0      1.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     112698.0 112698.0      2.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       180      11614.0     64.5      0.3  	for variavel in corners2:
    39       179      30338.0    169.5      0.7  		array=np.array([variavel])
    40       179      11172.0     62.4      0.3  		matriz2.append(array)
    41         1       3626.0   3626.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2425894.0 2425894.0     59.8  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      29230.0  29230.0      0.7  	matches = bf.match(des1,des2)

