Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.016 MiB   49.016 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.941 MiB    0.926 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.059 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.293 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.512 MiB    1.219 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.895 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.070 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.070 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.180 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.180 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.227 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.227 MiB    0.000 MiB   	matriz1=[]
    20   52.227 MiB    0.000 MiB   	for variavel in corners1:
    21   52.227 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.227 MiB    0.000 MiB   		matriz1.append(array)
    23   52.344 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.121 MiB    3.777 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.246 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.246 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.246 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.566 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.566 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.566 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.246 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.566 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.566 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.566 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.566 MiB    0.000 MiB   	matriz2=[]
    38   58.574 MiB    0.000 MiB   	for variavel in corners2:
    39   58.574 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.574 MiB    0.000 MiB   		matriz2.append(array)
    41   58.578 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.586 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.922 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.89544 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17389.0  17389.0      0.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        347.0    347.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3879.0   3879.0      0.1  	imagem1 = np.float32(img1)
    12         1      77272.0  77272.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12186.0  12186.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      13562.0  13562.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5106.0   5106.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12487.0  12487.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21198.0  21198.0      0.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         61.0     61.0      0.0  	matriz1=[]
    20        47       3745.0     79.7      0.1  	for variavel in corners1:
    21        46       7865.0    171.0      0.2  		array=np.array([variavel])
    22        46       3109.0     67.6      0.1  		matriz1.append(array)
    23         1       1232.0   1232.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     236075.0 236075.0      6.1  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        278.0    278.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74639.0  74639.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21680.0  21680.0      0.6  	imagem2 = np.float32(img2)
    30         1     628401.0 628401.0     16.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96760.0  96760.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84120.0  84120.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35924.0  35924.0      0.9  	dst2 = np.uint8(dst2)
    34         1      75939.0  75939.0      1.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114580.0 114580.0      2.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         62.0     62.0      0.0  	matriz2=[]
    38       180      12752.0     70.8      0.3  	for variavel in corners2:
    39       179      31162.0    174.1      0.8  		array=np.array([variavel])
    40       179      11942.0     66.7      0.3  		matriz2.append(array)
    41         1       3536.0   3536.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2260085.0 2260085.0     58.0  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      27893.0  27893.0      0.7  	matches = bf.match(des1,des2)

