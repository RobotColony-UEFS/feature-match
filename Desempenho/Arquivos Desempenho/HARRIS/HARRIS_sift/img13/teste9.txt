Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.707 MiB   48.707 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.516 MiB    0.809 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.578 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.812 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.102 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.574 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.762 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.762 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.852 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.852 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.879 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.879 MiB    0.000 MiB   	matriz1=[]
    20   51.879 MiB    0.000 MiB   	for variavel in corners1:
    21   51.879 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.879 MiB    0.000 MiB   		matriz1.append(array)
    23   51.977 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.840 MiB    3.863 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.898 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.898 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.898 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.219 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.219 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.219 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.898 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.219 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.219 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.219 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.219 MiB    0.000 MiB   	matriz2=[]
    38   58.227 MiB    0.000 MiB   	for variavel in corners2:
    39   58.227 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.227 MiB    0.000 MiB   		matriz2.append(array)
    41   58.230 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.238 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.535 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.85853 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18581.0  18581.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        339.0    339.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3958.0   3958.0      0.1  	imagem1 = np.float32(img1)
    12         1      74821.0  74821.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      17365.0  17365.0      0.5  	dst1 = cv2.dilate(dst1,None)
    14         1      14519.0  14519.0      0.4  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5105.0   5105.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11718.0  11718.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         93.0     93.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21648.0  21648.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3786.0     80.6      0.1  	for variavel in corners1:
    21        46       7699.0    167.4      0.2  		array=np.array([variavel])
    22        46       2977.0     64.7      0.1  		matriz1.append(array)
    23         1       1330.0   1330.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     236769.0 236769.0      6.1  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        275.0    275.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      71138.0  71138.0      1.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22940.0  22940.0      0.6  	imagem2 = np.float32(img2)
    30         1     634482.0 634482.0     16.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98585.0  98585.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85016.0  85016.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      34978.0  34978.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76843.0  76843.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     113499.0 113499.0      2.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       180      11845.0     65.8      0.3  	for variavel in corners2:
    39       179      30389.0    169.8      0.8  		array=np.array([variavel])
    40       179      11424.0     63.8      0.3  		matriz2.append(array)
    41         1       3568.0   3568.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2216136.0 2216136.0     57.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      26512.0  26512.0      0.7  	matches = bf.match(des1,des2)

