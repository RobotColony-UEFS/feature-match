Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.699 MiB   48.699 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.512 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.574 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.809 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.094 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.570 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.758 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.758 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.848 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.848 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.875 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.875 MiB    0.000 MiB   	matriz1=[]
    20   51.875 MiB    0.000 MiB   	for variavel in corners1:
    21   51.875 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.875 MiB    0.000 MiB   		matriz1.append(array)
    23   51.973 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.836 MiB    3.863 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.895 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.895 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.895 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.215 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.215 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.215 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.895 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.215 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.215 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.215 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.215 MiB    0.000 MiB   	matriz2=[]
    38   58.219 MiB    0.000 MiB   	for variavel in corners2:
    39   58.219 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.219 MiB    0.000 MiB   		matriz2.append(array)
    41   58.227 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.234 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.531 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.78001 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18709.0  18709.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        354.0    354.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3765.0   3765.0      0.1  	imagem1 = np.float32(img1)
    12         1      74618.0  74618.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14049.0  14049.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12888.0  12888.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5118.0   5118.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11559.0  11559.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21467.0  21467.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3188.0     67.8      0.1  	for variavel in corners1:
    21        46       7379.0    160.4      0.2  		array=np.array([variavel])
    22        46       2919.0     63.5      0.1  		matriz1.append(array)
    23         1       1560.0   1560.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234705.0 234705.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        383.0    383.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74080.0  74080.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      23197.0  23197.0      0.6  	imagem2 = np.float32(img2)
    30         1     626111.0 626111.0     16.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96789.0  96789.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84705.0  84705.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35310.0  35310.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76738.0  76738.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     104545.0 104545.0      2.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       179      12092.0     67.6      0.3  	for variavel in corners2:
    39       178      29720.0    167.0      0.8  		array=np.array([variavel])
    40       178      13451.0     75.6      0.4  		matriz2.append(array)
    41         1       3819.0   3819.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2160061.0 2160061.0     57.1  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      26449.0  26449.0      0.7  	matches = bf.match(des1,des2)

