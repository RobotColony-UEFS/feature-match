Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.695 MiB   48.695 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.660 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.777 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.012 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.281 MiB    1.270 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.660 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.961 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.961 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.145 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.145 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.207 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.207 MiB    0.000 MiB   	matriz1=[]
    20   52.207 MiB    0.000 MiB   	for variavel in corners1:
    21   52.207 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.207 MiB    0.000 MiB   		matriz1.append(array)
    23   52.332 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.281 MiB    3.949 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.340 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.340 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.340 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.660 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.660 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.660 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.340 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.660 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.660 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.660 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.660 MiB    0.000 MiB   	matriz2=[]
    38   58.668 MiB    0.000 MiB   	for variavel in corners2:
    39   58.668 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.668 MiB    0.000 MiB   		matriz2.append(array)
    41   58.672 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.680 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.949 MiB    0.270 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.77205 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17145.0  17145.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        350.0    350.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4073.0   4073.0      0.1  	imagem1 = np.float32(img1)
    12         1      76142.0  76142.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12896.0  12896.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12441.0  12441.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4962.0   4962.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11591.0  11591.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20870.0  20870.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3184.0     67.7      0.1  	for variavel in corners1:
    21        46       7575.0    164.7      0.2  		array=np.array([variavel])
    22        46       4646.0    101.0      0.1  		matriz1.append(array)
    23         1       1365.0   1365.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     232564.0 232564.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        515.0    515.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      72921.0  72921.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21830.0  21830.0      0.6  	imagem2 = np.float32(img2)
    30         1     626105.0 626105.0     16.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96099.0  96099.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85334.0  85334.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35533.0  35533.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76541.0  76541.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      86700.0  86700.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       189      12583.0     66.6      0.3  	for variavel in corners2:
    39       188      31632.0    168.3      0.8  		array=np.array([variavel])
    40       188      12869.0     68.5      0.3  		matriz2.append(array)
    41         1       4292.0   4292.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2169135.0 2169135.0     57.5  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      29875.0  29875.0      0.8  	matches = bf.match(des1,des2)

