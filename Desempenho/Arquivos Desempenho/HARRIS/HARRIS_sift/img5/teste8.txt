Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.887 MiB   48.887 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.789 MiB    0.902 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.910 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.145 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.496 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.883 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.184 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.184 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.371 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.371 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.371 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.371 MiB    0.000 MiB   	matriz1=[]
    20   52.371 MiB    0.000 MiB   	for variavel in corners1:
    21   52.371 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.371 MiB    0.000 MiB   		matriz1.append(array)
    23   52.438 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.512 MiB    4.074 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.570 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.570 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.570 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.891 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.891 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.891 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.570 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.891 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.891 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.891 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.891 MiB    0.000 MiB   	matriz2=[]
    38   58.898 MiB    0.000 MiB   	for variavel in corners2:
    39   58.898 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.898 MiB    0.000 MiB   		matriz2.append(array)
    41   58.902 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.910 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.184 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.76635 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17400.0  17400.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        334.0    334.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3952.0   3952.0      0.1  	imagem1 = np.float32(img1)
    12         1      74228.0  74228.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13118.0  13118.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12559.0  12559.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5223.0   5223.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12163.0  12163.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22446.0  22446.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3157.0     67.2      0.1  	for variavel in corners1:
    21        46       7632.0    165.9      0.2  		array=np.array([variavel])
    22        46       2987.0     64.9      0.1  		matriz1.append(array)
    23         1       1271.0   1271.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     235152.0 235152.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        388.0    388.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      72391.0  72391.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22559.0  22559.0      0.6  	imagem2 = np.float32(img2)
    30         1     626591.0 626591.0     16.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96789.0  96789.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85240.0  85240.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36831.0  36831.0      1.0  	dst2 = np.uint8(dst2)
    34         1      74702.0  74702.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         91.0     91.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      86398.0  86398.0      2.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       189      12605.0     66.7      0.3  	for variavel in corners2:
    39       188      32435.0    172.5      0.9  		array=np.array([variavel])
    40       188      12050.0     64.1      0.3  		matriz2.append(array)
    41         1       3747.0   3747.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2163493.0 2163493.0     57.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      28202.0  28202.0      0.7  	matches = bf.match(des1,des2)

