Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.574 MiB   48.574 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.449 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.512 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.746 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.039 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.496 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.684 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.684 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.824 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.824 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.840 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.840 MiB    0.000 MiB   	matriz1=[]
    20   51.840 MiB    0.000 MiB   	for variavel in corners1:
    21   51.840 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.840 MiB    0.000 MiB   		matriz1.append(array)
    23   51.930 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.965 MiB    4.035 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.023 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.023 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.023 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.344 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.344 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.344 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.023 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.344 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.344 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.344 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.344 MiB    0.000 MiB   	matriz2=[]
    38   58.352 MiB    0.000 MiB   	for variavel in corners2:
    39   58.352 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.352 MiB    0.000 MiB   		matriz2.append(array)
    41   58.355 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.363 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.523 MiB    0.160 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.79795 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17085.0  17085.0      0.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        252.0    252.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4074.0   4074.0      0.1  	imagem1 = np.float32(img1)
    12         1      75479.0  75479.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13118.0  13118.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      13108.0  13108.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4942.0   4942.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11779.0  11779.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22296.0  22296.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         63.0     63.0      0.0  	matriz1=[]
    20        47       3110.0     66.2      0.1  	for variavel in corners1:
    21        46       7851.0    170.7      0.2  		array=np.array([variavel])
    22        46       3021.0     65.7      0.1  		matriz1.append(array)
    23         1       1358.0   1358.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     233265.0 233265.0      6.1  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        285.0    285.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      76714.0  76714.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21793.0  21793.0      0.6  	imagem2 = np.float32(img2)
    30         1     625807.0 625807.0     16.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97234.0  97234.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84734.0  84734.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35934.0  35934.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76414.0  76414.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     105466.0 105466.0      2.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       190      12670.0     66.7      0.3  	for variavel in corners2:
    39       189      33160.0    175.4      0.9  		array=np.array([variavel])
    40       189      11780.0     62.3      0.3  		matriz2.append(array)
    41         1       4059.0   4059.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2172772.0 2172772.0     57.2  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      28097.0  28097.0      0.7  	matches = bf.match(des1,des2)

