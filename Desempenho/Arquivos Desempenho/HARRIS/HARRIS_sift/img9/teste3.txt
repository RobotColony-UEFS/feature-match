Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.676 MiB   48.676 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.430 MiB    0.754 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.492 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.727 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.012 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.438 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.625 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.625 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.719 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.719 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.750 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.750 MiB    0.000 MiB   	matriz1=[]
    20   51.750 MiB    0.000 MiB   	for variavel in corners1:
    21   51.750 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.750 MiB    0.000 MiB   		matriz1.append(array)
    23   51.852 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.688 MiB    3.836 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.746 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.746 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.746 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.066 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.066 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.066 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.746 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.066 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.066 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.066 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.066 MiB    0.000 MiB   	matriz2=[]
    38   58.074 MiB    0.000 MiB   	for variavel in corners2:
    39   58.074 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.074 MiB    0.000 MiB   		matriz2.append(array)
    41   58.078 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.086 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.363 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.79508 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17222.0  17222.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        322.0    322.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4288.0   4288.0      0.1  	imagem1 = np.float32(img1)
    12         1      75714.0  75714.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13207.0  13207.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12256.0  12256.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5073.0   5073.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12310.0  12310.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23898.0  23898.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3147.0     67.0      0.1  	for variavel in corners1:
    21        46       8597.0    186.9      0.2  		array=np.array([variavel])
    22        46       3021.0     65.7      0.1  		matriz1.append(array)
    23         1       1323.0   1323.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     233141.0 233141.0      6.1  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        281.0    281.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      76600.0  76600.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21822.0  21822.0      0.6  	imagem2 = np.float32(img2)
    30         1     623510.0 623510.0     16.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      99607.0  99607.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84506.0  84506.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36848.0  36848.0      1.0  	dst2 = np.uint8(dst2)
    34         1      75354.0  75354.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     106761.0 106761.0      2.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         62.0     62.0      0.0  	matriz2=[]
    38       190      13223.0     69.6      0.3  	for variavel in corners2:
    39       189      33964.0    179.7      0.9  		array=np.array([variavel])
    40       189      12390.0     65.6      0.3  		matriz2.append(array)
    41         1       3919.0   3919.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2164381.0 2164381.0     57.0  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      28100.0  28100.0      0.7  	matches = bf.match(des1,des2)

