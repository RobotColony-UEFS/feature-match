Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.066 MiB   49.066 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.879 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.000 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.234 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.520 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.895 MiB    0.375 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.078 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.078 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.180 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.180 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.219 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.219 MiB    0.000 MiB   	matriz1=[]
    20   52.219 MiB    0.000 MiB   	for variavel in corners1:
    21   52.219 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.219 MiB    0.000 MiB   		matriz1.append(array)
    23   52.328 MiB    0.109 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.102 MiB    3.773 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.223 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.223 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.223 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.543 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.543 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.543 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.223 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.543 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.543 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.543 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.543 MiB    0.000 MiB   	matriz2=[]
    38   58.551 MiB    0.000 MiB   	for variavel in corners2:
    39   58.551 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.551 MiB    0.000 MiB   		matriz2.append(array)
    41   58.555 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.562 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.848 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.81732 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18311.0  18311.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        355.0    355.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4177.0   4177.0      0.1  	imagem1 = np.float32(img1)
    12         1      76187.0  76187.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13242.0  13242.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12875.0  12875.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4995.0   4995.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11735.0  11735.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21240.0  21240.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3127.0     66.5      0.1  	for variavel in corners1:
    21        46       9057.0    196.9      0.2  		array=np.array([variavel])
    22        46       2986.0     64.9      0.1  		matriz1.append(array)
    23         1       2194.0   2194.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     233943.0 233943.0      6.1  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        276.0    276.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      76460.0  76460.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22751.0  22751.0      0.6  	imagem2 = np.float32(img2)
    30         1     628920.0 628920.0     16.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97121.0  97121.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84987.0  84987.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      34982.0  34982.0      0.9  	dst2 = np.uint8(dst2)
    34         1      77460.0  77460.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     107894.0 107894.0      2.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       190      13310.0     70.1      0.3  	for variavel in corners2:
    39       189      33741.0    178.5      0.9  		array=np.array([variavel])
    40       189      12263.0     64.9      0.3  		matriz2.append(array)
    41         1       3918.0   3918.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2180067.0 2180067.0     57.1  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      28451.0  28451.0      0.7  	matches = bf.match(des1,des2)

