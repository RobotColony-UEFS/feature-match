Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.781 MiB   48.781 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.594 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.715 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.949 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.238 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.664 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.852 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.852 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.949 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.949 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.984 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.984 MiB    0.000 MiB   	matriz1=[]
    20   51.984 MiB    0.000 MiB   	for variavel in corners1:
    21   51.984 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.984 MiB    0.000 MiB   		matriz1.append(array)
    23   52.090 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.816 MiB    3.727 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.875 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.875 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.875 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.195 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.195 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.195 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.875 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.195 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.195 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.195 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.195 MiB    0.000 MiB   	matriz2=[]
    38   58.203 MiB    0.000 MiB   	for variavel in corners2:
    39   58.203 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.203 MiB    0.000 MiB   		matriz2.append(array)
    41   58.207 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.215 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.562 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.78439 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17235.0  17235.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        356.0    356.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3880.0   3880.0      0.1  	imagem1 = np.float32(img1)
    12         1      76332.0  76332.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13342.0  13342.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12454.0  12454.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5105.0   5105.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11497.0  11497.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21177.0  21177.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3301.0     70.2      0.1  	for variavel in corners1:
    21        46       8655.0    188.2      0.2  		array=np.array([variavel])
    22        46       2954.0     64.2      0.1  		matriz1.append(array)
    23         1       1370.0   1370.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     232593.0 232593.0      6.1  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        281.0    281.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      76397.0  76397.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21902.0  21902.0      0.6  	imagem2 = np.float32(img2)
    30         1     624585.0 624585.0     16.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96734.0  96734.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84450.0  84450.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35046.0  35046.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76846.0  76846.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     104171.0 104171.0      2.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       190      12411.0     65.3      0.3  	for variavel in corners2:
    39       189      32561.0    172.3      0.9  		array=np.array([variavel])
    40       189      11672.0     61.8      0.3  		matriz2.append(array)
    41         1       3984.0   3984.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2163661.0 2163661.0     57.2  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      29146.0  29146.0      0.8  	matches = bf.match(des1,des2)

