Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.934 MiB   48.934 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.840 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.961 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.195 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.543 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.934 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.234 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.234 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.422 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.422 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.422 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.422 MiB    0.000 MiB   	matriz1=[]
    20   52.422 MiB    0.000 MiB   	for variavel in corners1:
    21   52.422 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.422 MiB    0.000 MiB   		matriz1.append(array)
    23   52.488 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.562 MiB    4.074 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.621 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.621 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.621 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.941 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.941 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.941 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.621 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.941 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.941 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.941 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.941 MiB    0.000 MiB   	matriz2=[]
    38   58.949 MiB    0.000 MiB   	for variavel in corners2:
    39   58.949 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.949 MiB    0.000 MiB   		matriz2.append(array)
    41   58.953 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.961 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.234 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.80312 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      16835.0  16835.0      0.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        251.0    251.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       4964.0   4964.0      0.1  	imagem1 = np.float32(img1)
    12         1      75065.0  75065.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12238.0  12238.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      13423.0  13423.0      0.4  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5403.0   5403.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12602.0  12602.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         94.0     94.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20991.0  20991.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1        155.0    155.0      0.0  	matriz1=[]
    20        47       3056.0     65.0      0.1  	for variavel in corners1:
    21        46       8631.0    187.6      0.2  		array=np.array([variavel])
    22        46       2930.0     63.7      0.1  		matriz1.append(array)
    23         1       1293.0   1293.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     232862.0 232862.0      6.1  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      77507.0  77507.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21791.0  21791.0      0.6  	imagem2 = np.float32(img2)
    30         1     629572.0 629572.0     16.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96548.0  96548.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      83360.0  83360.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36249.0  36249.0      1.0  	dst2 = np.uint8(dst2)
    34         1      76958.0  76958.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     106855.0 106855.0      2.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       190      12556.0     66.1      0.3  	for variavel in corners2:
    39       189      31384.0    166.1      0.8  		array=np.array([variavel])
    40       189      12381.0     65.5      0.3  		matriz2.append(array)
    41         1       4430.0   4430.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2173383.0 2173383.0     57.1  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      28940.0  28940.0      0.8  	matches = bf.match(des1,des2)

