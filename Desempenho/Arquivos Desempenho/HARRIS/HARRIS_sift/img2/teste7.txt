Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.766 MiB   48.766 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.520 MiB    0.754 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.582 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.816 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.102 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.527 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.715 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.715 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.809 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.809 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.840 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.840 MiB    0.000 MiB   	matriz1=[]
    20   51.840 MiB    0.000 MiB   	for variavel in corners1:
    21   51.840 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.840 MiB    0.000 MiB   		matriz1.append(array)
    23   51.941 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.777 MiB    3.836 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.836 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.836 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.836 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.156 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.156 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.156 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.836 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.156 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.156 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.156 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.156 MiB    0.000 MiB   	matriz2=[]
    38   58.164 MiB    0.000 MiB   	for variavel in corners2:
    39   58.164 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.164 MiB    0.000 MiB   		matriz2.append(array)
    41   58.172 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.180 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.457 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.83511 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18673.0  18673.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        268.0    268.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3931.0   3931.0      0.1  	imagem1 = np.float32(img1)
    12         1      74285.0  74285.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13535.0  13535.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12742.0  12742.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5190.0   5190.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12307.0  12307.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22662.0  22662.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         62.0     62.0      0.0  	matriz1=[]
    20        47       3141.0     66.8      0.1  	for variavel in corners1:
    21        46       7770.0    168.9      0.2  		array=np.array([variavel])
    22        46       3088.0     67.1      0.1  		matriz1.append(array)
    23         1       1250.0   1250.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234108.0 234108.0      6.1  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        291.0    291.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74270.0  74270.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      23176.0  23176.0      0.6  	imagem2 = np.float32(img2)
    30         1     627260.0 627260.0     16.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96488.0  96488.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84047.0  84047.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36908.0  36908.0      1.0  	dst2 = np.uint8(dst2)
    34         1      75995.0  75995.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     117499.0 117499.0      3.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       226      15309.0     67.7      0.4  	for variavel in corners2:
    39       225      41019.0    182.3      1.1  		array=np.array([variavel])
    40       225      14821.0     65.9      0.4  		matriz2.append(array)
    41         1       5397.0   5397.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2173467.0 2173467.0     56.7  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      35924.0  35924.0      0.9  	matches = bf.match(des1,des2)

