Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.141 MiB   49.141 MiB   @profile
     7                             def HARRIS_sift(img):
     8   50.105 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.223 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.457 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.672 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.062 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.238 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.238 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.406 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.406 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.461 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.461 MiB    0.000 MiB   	matriz1=[]
    20   52.461 MiB    0.000 MiB   	for variavel in corners1:
    21   52.461 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.461 MiB    0.000 MiB   		matriz1.append(array)
    23   52.586 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.469 MiB    3.883 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.527 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.527 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.527 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.848 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.848 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.848 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.527 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.848 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.848 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.848 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.848 MiB    0.000 MiB   	matriz2=[]
    38   58.852 MiB    0.000 MiB   	for variavel in corners2:
    39   58.852 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.852 MiB    0.000 MiB   		matriz2.append(array)
    41   58.855 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.859 MiB    0.004 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.152 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.70286 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18358.0  18358.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        342.0    342.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3847.0   3847.0      0.1  	imagem1 = np.float32(img1)
    12         1      74200.0  74200.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13127.0  13127.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12977.0  12977.0      0.4  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5099.0   5099.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11686.0  11686.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22517.0  22517.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3062.0     65.1      0.1  	for variavel in corners1:
    21        46       7323.0    159.2      0.2  		array=np.array([variavel])
    22        46       3233.0     70.3      0.1  		matriz1.append(array)
    23         1       1487.0   1487.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     235422.0 235422.0      6.4  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        276.0    276.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      73280.0  73280.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22642.0  22642.0      0.6  	imagem2 = np.float32(img2)
    30         1     625051.0 625051.0     16.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96529.0  96529.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85660.0  85660.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35020.0  35020.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76204.0  76204.0      2.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      62392.0  62392.0      1.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       105       6799.0     64.8      0.2  	for variavel in corners2:
    39       104      17231.0    165.7      0.5  		array=np.array([variavel])
    40       104       6632.0     63.8      0.2  		matriz2.append(array)
    41         1       2267.0   2267.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2163650.0 2163650.0     58.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      16259.0  16259.0      0.4  	matches = bf.match(des1,des2)

