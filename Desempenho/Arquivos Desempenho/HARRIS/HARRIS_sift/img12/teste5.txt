Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.141 MiB   49.141 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.957 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.078 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.312 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.594 MiB    1.281 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.973 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.156 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.156 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.258 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.258 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.297 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.297 MiB    0.000 MiB   	matriz1=[]
    20   52.297 MiB    0.000 MiB   	for variavel in corners1:
    21   52.297 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.297 MiB    0.000 MiB   		matriz1.append(array)
    23   52.406 MiB    0.109 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.180 MiB    3.773 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.301 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.301 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.301 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.621 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.621 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.621 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.301 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.621 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.621 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.621 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.621 MiB    0.000 MiB   	matriz2=[]
    38   58.625 MiB    0.000 MiB   	for variavel in corners2:
    39   58.625 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.625 MiB    0.000 MiB   		matriz2.append(array)
    41   58.633 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.641 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.926 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.76525 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      19156.0  19156.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        328.0    328.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3982.0   3982.0      0.1  	imagem1 = np.float32(img1)
    12         1      74388.0  74388.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      15082.0  15082.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12208.0  12208.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5211.0   5211.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11666.0  11666.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         94.0     94.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21120.0  21120.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3215.0     68.4      0.1  	for variavel in corners1:
    21        46       8456.0    183.8      0.2  		array=np.array([variavel])
    22        46       2868.0     62.3      0.1  		matriz1.append(array)
    23         1       1359.0   1359.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234699.0 234699.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        276.0    276.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      71826.0  71826.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      23399.0  23399.0      0.6  	imagem2 = np.float32(img2)
    30         1     625494.0 625494.0     16.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96624.0  96624.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85097.0  85097.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35727.0  35727.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76463.0  76463.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100921.0 100921.0      2.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       165      10756.0     65.2      0.3  	for variavel in corners2:
    39       164      28178.0    171.8      0.7  		array=np.array([variavel])
    40       164      10114.0     61.7      0.3  		matriz2.append(array)
    41         1       3695.0   3695.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2158138.0 2158138.0     57.3  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      24515.0  24515.0      0.7  	matches = bf.match(des1,des2)

