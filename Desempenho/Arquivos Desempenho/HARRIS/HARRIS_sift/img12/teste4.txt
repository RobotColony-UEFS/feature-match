Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.906 MiB   48.906 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.805 MiB    0.898 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.926 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.160 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.508 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.898 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.137 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.137 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.262 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.262 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.262 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.262 MiB    0.000 MiB   	matriz1=[]
    20   52.262 MiB    0.000 MiB   	for variavel in corners1:
    21   52.262 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.262 MiB    0.000 MiB   		matriz1.append(array)
    23   52.328 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.414 MiB    4.086 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.473 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.473 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.473 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.793 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.793 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.793 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.473 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.793 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.793 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.793 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.793 MiB    0.000 MiB   	matriz2=[]
    38   58.797 MiB    0.000 MiB   	for variavel in corners2:
    39   58.797 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.797 MiB    0.000 MiB   		matriz2.append(array)
    41   58.805 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.812 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.086 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.7587 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17451.0  17451.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        353.0    353.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3857.0   3857.0      0.1  	imagem1 = np.float32(img1)
    12         1      74637.0  74637.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13143.0  13143.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12740.0  12740.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5090.0   5090.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11717.0  11717.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         94.0     94.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20950.0  20950.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3081.0     65.6      0.1  	for variavel in corners1:
    21        46       7328.0    159.3      0.2  		array=np.array([variavel])
    22        46       2955.0     64.2      0.1  		matriz1.append(array)
    23         1       1201.0   1201.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     237411.0 237411.0      6.3  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        279.0    279.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      71443.0  71443.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      23776.0  23776.0      0.6  	imagem2 = np.float32(img2)
    30         1     625882.0 625882.0     16.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97439.0  97439.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84961.0  84961.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35041.0  35041.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76938.0  76938.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100403.0 100403.0      2.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       165      11040.0     66.9      0.3  	for variavel in corners2:
    39       164      26931.0    164.2      0.7  		array=np.array([variavel])
    40       164      11235.0     68.5      0.3  		matriz2.append(array)
    41         1       4371.0   4371.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2152127.0 2152127.0     57.3  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      24633.0  24633.0      0.7  	matches = bf.match(des1,des2)

