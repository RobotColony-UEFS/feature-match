Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.086 MiB   49.086 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.902 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.023 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.258 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.539 MiB    1.281 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.918 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.102 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.102 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.203 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.203 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.242 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.242 MiB    0.000 MiB   	matriz1=[]
    20   52.242 MiB    0.000 MiB   	for variavel in corners1:
    21   52.242 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.242 MiB    0.000 MiB   		matriz1.append(array)
    23   52.352 MiB    0.109 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.125 MiB    3.773 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.246 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.246 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.246 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.566 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.566 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.566 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.246 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.566 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.566 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.566 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.566 MiB    0.000 MiB   	matriz2=[]
    38   58.570 MiB    0.000 MiB   	for variavel in corners2:
    39   58.570 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.570 MiB    0.000 MiB   		matriz2.append(array)
    41   58.578 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.586 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.871 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.78227 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18272.0  18272.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        337.0    337.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3909.0   3909.0      0.1  	imagem1 = np.float32(img1)
    12         1      74499.0  74499.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12174.0  12174.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      13585.0  13585.0      0.4  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5172.0   5172.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11647.0  11647.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22213.0  22213.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3215.0     68.4      0.1  	for variavel in corners1:
    21        46       8094.0    176.0      0.2  		array=np.array([variavel])
    22        46       3286.0     71.4      0.1  		matriz1.append(array)
    23         1       1310.0   1310.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     236026.0 236026.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        283.0    283.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      73148.0  73148.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      22648.0  22648.0      0.6  	imagem2 = np.float32(img2)
    30         1     627348.0 627348.0     16.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97483.0  97483.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85586.0  85586.0      2.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35167.0  35167.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76601.0  76601.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100369.0 100369.0      2.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         62.0     62.0      0.0  	matriz2=[]
    38       165      11353.0     68.8      0.3  	for variavel in corners2:
    39       164      29030.0    177.0      0.8  		array=np.array([variavel])
    40       164      10750.0     65.5      0.3  		matriz2.append(array)
    41         1       3389.0   3389.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2169499.0 2169499.0     57.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      25578.0  25578.0      0.7  	matches = bf.match(des1,des2)

