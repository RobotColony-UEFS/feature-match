Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.938 MiB   48.938 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.910 MiB    0.973 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.027 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.262 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.582 MiB    1.320 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.918 MiB    0.336 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.098 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.098 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.273 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.273 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.332 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.332 MiB    0.000 MiB   	matriz1=[]
    20   52.332 MiB    0.000 MiB   	for variavel in corners1:
    21   52.332 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.332 MiB    0.000 MiB   		matriz1.append(array)
    23   52.457 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.277 MiB    3.820 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.336 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.336 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.336 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.656 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.656 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.656 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.336 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.656 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.656 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.656 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.656 MiB    0.000 MiB   	matriz2=[]
    38   58.660 MiB    0.000 MiB   	for variavel in corners2:
    39   58.660 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.660 MiB    0.000 MiB   		matriz2.append(array)
    41   58.668 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.676 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.027 MiB    0.352 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.82325 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17344.0  17344.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        332.0    332.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3947.0   3947.0      0.1  	imagem1 = np.float32(img1)
    12         1      76033.0  76033.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13290.0  13290.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12466.0  12466.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4980.0   4980.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11689.0  11689.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         93.0     93.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23313.0  23313.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3155.0     67.1      0.1  	for variavel in corners1:
    21        46       7450.0    162.0      0.2  		array=np.array([variavel])
    22        46       2867.0     62.3      0.1  		matriz1.append(array)
    23         1       1463.0   1463.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     231501.0 231501.0      6.1  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        400.0    400.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      73726.0  73726.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21706.0  21706.0      0.6  	imagem2 = np.float32(img2)
    30         1     627112.0 627112.0     16.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96763.0  96763.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84527.0  84527.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      34868.0  34868.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76842.0  76842.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100192.0 100192.0      2.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       165      11027.0     66.8      0.3  	for variavel in corners2:
    39       164      27442.0    167.3      0.7  		array=np.array([variavel])
    40       164      10299.0     62.8      0.3  		matriz2.append(array)
    41         1       3521.0   3521.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2220205.0 2220205.0     58.1  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      24488.0  24488.0      0.6  	matches = bf.match(des1,des2)

