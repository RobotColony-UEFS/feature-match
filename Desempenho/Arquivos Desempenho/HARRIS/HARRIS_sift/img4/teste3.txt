Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.660 MiB   48.660 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.473 MiB    0.812 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.535 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.770 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.055 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.531 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.719 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.719 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.809 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.809 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.836 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.836 MiB    0.000 MiB   	matriz1=[]
    20   51.836 MiB    0.000 MiB   	for variavel in corners1:
    21   51.836 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.836 MiB    0.000 MiB   		matriz1.append(array)
    23   51.934 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   55.797 MiB    3.863 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   55.855 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   55.855 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.855 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.176 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.176 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.176 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.855 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.176 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.176 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.176 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.176 MiB    0.000 MiB   	matriz2=[]
    38   58.184 MiB    0.000 MiB   	for variavel in corners2:
    39   58.184 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.184 MiB    0.000 MiB   		matriz2.append(array)
    41   58.195 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.207 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.504 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.92426 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      17120.0  17120.0      0.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        255.0    255.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3851.0   3851.0      0.1  	imagem1 = np.float32(img1)
    12         1      75969.0  75969.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13103.0  13103.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12637.0  12637.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5599.0   5599.0      0.1  	dst1 = np.uint8(dst1)
    16         1      13160.0  13160.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21855.0  21855.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3062.0     65.1      0.1  	for variavel in corners1:
    21        46       7547.0    164.1      0.2  		array=np.array([variavel])
    22        46       2879.0     62.6      0.1  		matriz1.append(array)
    23         1       1391.0   1391.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     232584.0 232584.0      5.9  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        283.0    283.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      75311.0  75311.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21876.0  21876.0      0.6  	imagem2 = np.float32(img2)
    30         1     629178.0 629178.0     16.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1     100509.0 100509.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      82933.0  82933.0      2.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37761.0  37761.0      1.0  	dst2 = np.uint8(dst2)
    34         1      76046.0  76046.0      1.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         75.0     75.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     181098.0 181098.0      4.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       273      17806.0     65.2      0.5  	for variavel in corners2:
    39       272      49474.0    181.9      1.3  		array=np.array([variavel])
    40       272      17369.0     63.9      0.4  		matriz2.append(array)
    41         1       5580.0   5580.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2176061.0 2176061.0     55.5  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      41690.0  41690.0      1.1  	matches = bf.match(des1,des2)

