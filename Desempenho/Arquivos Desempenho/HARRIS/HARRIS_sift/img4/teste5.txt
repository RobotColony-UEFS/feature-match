Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.059 MiB   49.059 MiB   @profile
     7                             def HARRIS_sift(img):
     8   50.027 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.145 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.379 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.590 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.984 MiB    0.395 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.160 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.160 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.328 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.328 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.383 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.383 MiB    0.000 MiB   	matriz1=[]
    20   52.383 MiB    0.000 MiB   	for variavel in corners1:
    21   52.383 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.383 MiB    0.000 MiB   		matriz1.append(array)
    23   52.508 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.391 MiB    3.883 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.449 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.449 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.449 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.770 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.770 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.770 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.449 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.770 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.770 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.770 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.770 MiB    0.000 MiB   	matriz2=[]
    38   58.777 MiB    0.000 MiB   	for variavel in corners2:
    39   58.777 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.777 MiB    0.000 MiB   		matriz2.append(array)
    41   58.789 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.801 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.094 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.90385 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      16983.0  16983.0      0.4  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        253.0    253.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3940.0   3940.0      0.1  	imagem1 = np.float32(img1)
    12         1      75620.0  75620.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13374.0  13374.0      0.3  	dst1 = cv2.dilate(dst1,None)
    14         1      12443.0  12443.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5032.0   5032.0      0.1  	dst1 = np.uint8(dst1)
    16         1      13250.0  13250.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21801.0  21801.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3232.0     68.8      0.1  	for variavel in corners1:
    21        46       7405.0    161.0      0.2  		array=np.array([variavel])
    22        46       2806.0     61.0      0.1  		matriz1.append(array)
    23         1       1245.0   1245.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     233720.0 233720.0      6.0  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        337.0    337.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74907.0  74907.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      21963.0  21963.0      0.6  	imagem2 = np.float32(img2)
    30         1     624947.0 624947.0     16.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96356.0  96356.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85156.0  85156.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37511.0  37511.0      1.0  	dst2 = np.uint8(dst2)
    34         1      74816.0  74816.0      1.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     185969.0 185969.0      4.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       273      17381.0     63.7      0.4  	for variavel in corners2:
    39       272      46201.0    169.9      1.2  		array=np.array([variavel])
    40       272      17687.0     65.0      0.5  		matriz2.append(array)
    41         1       5318.0   5318.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2164391.0 2164391.0     55.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      39523.0  39523.0      1.0  	matches = bf.match(des1,des2)

