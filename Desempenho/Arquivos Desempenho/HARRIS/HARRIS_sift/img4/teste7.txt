Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.918 MiB   48.918 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.891 MiB    0.973 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.008 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.242 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.562 MiB    1.320 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.898 MiB    0.336 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.078 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.078 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.254 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.254 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.312 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.312 MiB    0.000 MiB   	matriz1=[]
    20   52.312 MiB    0.000 MiB   	for variavel in corners1:
    21   52.312 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.312 MiB    0.000 MiB   		matriz1.append(array)
    23   52.438 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.258 MiB    3.820 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.316 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.316 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.316 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.637 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.637 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.637 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.316 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.637 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.637 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.637 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.637 MiB    0.000 MiB   	matriz2=[]
    38   58.645 MiB    0.000 MiB   	for variavel in corners2:
    39   58.645 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.645 MiB    0.000 MiB   		matriz2.append(array)
    41   58.656 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.668 MiB    0.012 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.020 MiB    0.352 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.91246 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18922.0  18922.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        357.0    357.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3939.0   3939.0      0.1  	imagem1 = np.float32(img1)
    12         1      74095.0  74095.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14993.0  14993.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12493.0  12493.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5055.0   5055.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12577.0  12577.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21509.0  21509.0      0.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3156.0     67.1      0.1  	for variavel in corners1:
    21        46       7437.0    161.7      0.2  		array=np.array([variavel])
    22        46       3064.0     66.6      0.1  		matriz1.append(array)
    23         1       1326.0   1326.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234389.0 234389.0      6.0  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        277.0    277.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      73287.0  73287.0      1.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      23444.0  23444.0      0.6  	imagem2 = np.float32(img2)
    30         1     628664.0 628664.0     16.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95401.0  95401.0      2.4  	dst2 = cv2.dilate(dst2,None)
    32         1      84727.0  84727.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36039.0  36039.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76041.0  76041.0      1.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     182322.0 182322.0      4.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       273      19719.0     72.2      0.5  	for variavel in corners2:
    39       272      45856.0    168.6      1.2  		array=np.array([variavel])
    40       272      17586.0     64.7      0.4  		matriz2.append(array)
    41         1       6505.0   6505.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2167145.0 2167145.0     55.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      41851.0  41851.0      1.1  	matches = bf.match(des1,des2)

