Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.090 MiB   49.090 MiB   @profile
     7                             def HARRIS_sift(img):
     8   50.059 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.176 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.410 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.621 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.016 MiB    0.395 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.191 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.191 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.359 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.359 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.414 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.414 MiB    0.000 MiB   	matriz1=[]
    20   52.414 MiB    0.000 MiB   	for variavel in corners1:
    21   52.414 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.414 MiB    0.000 MiB   		matriz1.append(array)
    23   52.539 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.422 MiB    3.883 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.480 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.480 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.480 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.801 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.801 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.801 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.480 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.801 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.801 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.801 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.801 MiB    0.000 MiB   	matriz2=[]
    38   58.809 MiB    0.000 MiB   	for variavel in corners2:
    39   58.809 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.809 MiB    0.000 MiB   		matriz2.append(array)
    41   58.812 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.820 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   59.113 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.77894 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18890.0  18890.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        629.0    629.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3971.0   3971.0      0.1  	imagem1 = np.float32(img1)
    12         1      74558.0  74558.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      15027.0  15027.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12326.0  12326.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5119.0   5119.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11476.0  11476.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21223.0  21223.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3951.0     84.1      0.1  	for variavel in corners1:
    21        46       7606.0    165.3      0.2  		array=np.array([variavel])
    22        46       3561.0     77.4      0.1  		matriz1.append(array)
    23         1       1274.0   1274.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     234898.0 234898.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        282.0    282.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74596.0  74596.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      23890.0  23890.0      0.6  	imagem2 = np.float32(img2)
    30         1     625062.0 625062.0     16.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96703.0  96703.0      2.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84416.0  84416.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35216.0  35216.0      0.9  	dst2 = np.uint8(dst2)
    34         1      77342.0  77342.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      92139.0  92139.0      2.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       184      11714.0     63.7      0.3  	for variavel in corners2:
    39       183      29859.0    163.2      0.8  		array=np.array([variavel])
    40       183      11313.0     61.8      0.3  		matriz2.append(array)
    41         1       5362.0   5362.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2167794.0 2167794.0     57.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      28467.0  28467.0      0.8  	matches = bf.match(des1,des2)

