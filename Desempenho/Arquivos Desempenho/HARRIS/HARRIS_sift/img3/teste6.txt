Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.621 MiB   48.621 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.586 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.703 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   49.938 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.207 MiB    1.270 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.586 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.887 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.887 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.070 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.070 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.133 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.133 MiB    0.000 MiB   	matriz1=[]
    20   52.133 MiB    0.000 MiB   	for variavel in corners1:
    21   52.133 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.133 MiB    0.000 MiB   		matriz1.append(array)
    23   52.258 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.207 MiB    3.949 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.266 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.266 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.266 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.586 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.586 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.586 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.266 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.586 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.586 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.586 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.586 MiB    0.000 MiB   	matriz2=[]
    38   58.594 MiB    0.000 MiB   	for variavel in corners2:
    39   58.594 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.594 MiB    0.000 MiB   		matriz2.append(array)
    41   58.598 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.605 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.875 MiB    0.270 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.80511 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18037.0  18037.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        325.0    325.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3811.0   3811.0      0.1  	imagem1 = np.float32(img1)
    12         1      75514.0  75514.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13546.0  13546.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12432.0  12432.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5116.0   5116.0      0.1  	dst1 = np.uint8(dst1)
    16         1      11588.0  11588.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20964.0  20964.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3530.0     75.1      0.1  	for variavel in corners1:
    21        46       7405.0    161.0      0.2  		array=np.array([variavel])
    22        46       2870.0     62.4      0.1  		matriz1.append(array)
    23         1       1425.0   1425.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     233807.0 233807.0      6.1  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        258.0    258.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74506.0  74506.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      23978.0  23978.0      0.6  	imagem2 = np.float32(img2)
    30         1     626848.0 626848.0     16.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96785.0  96785.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84041.0  84041.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      35914.0  35914.0      0.9  	dst2 = np.uint8(dst2)
    34         1      76703.0  76703.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      90715.0  90715.0      2.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       184      12253.0     66.6      0.3  	for variavel in corners2:
    39       183      30266.0    165.4      0.8  		array=np.array([variavel])
    40       183      11391.0     62.2      0.3  		matriz2.append(array)
    41         1       5547.0   5547.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2195864.0 2195864.0     57.7  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      29390.0  29390.0      0.8  	matches = bf.match(des1,des2)

