Filename: HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.055 MiB   49.055 MiB   @profile
     7                             def HARRIS_sift(img):
     8   49.926 MiB    0.871 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.043 MiB    0.117 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    10                             
    11   50.277 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.492 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.871 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.051 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.051 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.156 MiB    0.105 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.156 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.199 MiB    0.043 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.199 MiB    0.000 MiB   	matriz1=[]
    20   52.199 MiB    0.000 MiB   	for variavel in corners1:
    21   52.199 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.199 MiB    0.000 MiB   		matriz1.append(array)
    23   52.312 MiB    0.113 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   56.152 MiB    3.840 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   56.277 MiB    0.125 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                             	
    28   56.277 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   56.277 MiB    0.000 MiB   	imagem2 = np.float32(img2)
    30   58.598 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.598 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.598 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.277 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.598 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.598 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.598 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.598 MiB    0.000 MiB   	matriz2=[]
    38   58.605 MiB    0.000 MiB   	for variavel in corners2:
    39   58.605 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.605 MiB    0.000 MiB   		matriz2.append(array)
    41   58.609 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.617 MiB    0.008 MiB   	kp2, des2 = sift.compute(img2, kp2)
    43                             
    44   58.953 MiB    0.336 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 3.76322 s
File: HARRIS_sift.py
Function: HARRIS_sift at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_sift(img):
     8         1      18670.0  18670.0      0.5  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        338.0    338.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    10                                           
    11         1       3947.0   3947.0      0.1  	imagem1 = np.float32(img1)
    12         1      74196.0  74196.0      2.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14553.0  14553.0      0.4  	dst1 = cv2.dilate(dst1,None)
    14         1      12293.0  12293.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5087.0   5087.0      0.1  	dst1 = np.uint8(dst1)
    16         1      12679.0  12679.0      0.3  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20923.0  20923.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3080.0     65.5      0.1  	for variavel in corners1:
    21        46       7372.0    160.3      0.2  		array=np.array([variavel])
    22        46       2811.0     61.1      0.1  		matriz1.append(array)
    23         1       1389.0   1389.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1     232863.0 232863.0      6.2  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        384.0    384.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27                                           	
    28         1      74863.0  74863.0      2.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      23263.0  23263.0      0.6  	imagem2 = np.float32(img2)
    30         1     624373.0 624373.0     16.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95922.0  95922.0      2.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84627.0  84627.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      36259.0  36259.0      1.0  	dst2 = np.uint8(dst2)
    34         1      75677.0  75677.0      2.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      91972.0  91972.0      2.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       184      12078.0     65.6      0.3  	for variavel in corners2:
    39       183      29684.0    162.2      0.8  		array=np.array([variavel])
    40       183      11348.0     62.0      0.3  		matriz2.append(array)
    41         1       3755.0   3755.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1    2161164.0 2161164.0     57.4  	kp2, des2 = sift.compute(img2, kp2)
    43                                           
    44         1      27368.0  27368.0      0.7  	matches = bf.match(des1,des2)

