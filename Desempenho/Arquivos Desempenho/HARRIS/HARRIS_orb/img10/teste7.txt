Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.051 MiB   49.051 MiB   @profile
     7                             def HARRIS_orb(img):
     8   50.020 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.082 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.316 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.527 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.918 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.094 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.094 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.262 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.262 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.316 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.316 MiB    0.000 MiB   	matriz1=[]
    20   52.316 MiB    0.000 MiB   	for variavel in corners1:
    21   52.316 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.316 MiB    0.000 MiB   		matriz1.append(array)
    23   52.441 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.641 MiB    0.199 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.641 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.223 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.543 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.863 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.863 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.863 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.125 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.445 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.445 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.445 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.445 MiB    0.000 MiB   	matriz2=[]
    38   58.449 MiB    0.000 MiB   	for variavel in corners2:
    39   58.449 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.449 MiB    0.000 MiB   		matriz2.append(array)
    41   58.453 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.453 MiB    0.000 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.742 MiB    0.289 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.45779 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18830.0  18830.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        246.0    246.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4992.0   4992.0      0.3  	imagem1 = np.float32(img1)
    12         1      72635.0  72635.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12982.0  12982.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      14996.0  14996.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5098.0   5098.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11454.0  11454.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         91.0     91.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21411.0  21411.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3065.0     65.2      0.2  	for variavel in corners1:
    21        46       7640.0    166.1      0.5  		array=np.array([variavel])
    22        46       2861.0     62.2      0.2  		matriz1.append(array)
    23         1       1523.0   1523.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15294.0  15294.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        289.0    289.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79249.0  79249.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26718.0  26718.0      1.8  	imagem2 = np.float32(img2)
    30         1     630644.0 630644.0     43.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96425.0  96425.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      83816.0  83816.0      5.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38163.0  38163.0      2.6  	dst2 = np.uint8(dst2)
    34         1      75257.0  75257.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      60658.0  60658.0      4.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         62.0     62.0      0.0  	matriz2=[]
    38       105       6801.0     64.8      0.5  	for variavel in corners2:
    39       104      20375.0    195.9      1.4  		array=np.array([variavel])
    40       104       6795.0     65.3      0.5  		matriz2.append(array)
    41         1       2288.0   2288.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     134561.0 134561.0      9.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       2434.0   2434.0      0.2  	matches = bf.match(des1,des2)

