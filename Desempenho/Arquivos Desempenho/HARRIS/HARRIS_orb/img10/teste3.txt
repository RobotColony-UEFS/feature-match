Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.066 MiB   49.066 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.883 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.945 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.180 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.461 MiB    1.281 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.836 MiB    0.375 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.020 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.020 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.121 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.121 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.160 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.160 MiB    0.000 MiB   	matriz1=[]
    20   52.160 MiB    0.000 MiB   	for variavel in corners1:
    21   52.160 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.160 MiB    0.000 MiB   		matriz1.append(array)
    23   52.270 MiB    0.109 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.508 MiB    0.238 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.570 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.152 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.473 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.793 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.793 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.793 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.055 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.375 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.375 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.375 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.375 MiB    0.000 MiB   	matriz2=[]
    38   58.379 MiB    0.000 MiB   	for variavel in corners2:
    39   58.379 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.379 MiB    0.000 MiB   		matriz2.append(array)
    41   58.383 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.383 MiB    0.000 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.605 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.4626 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18954.0  18954.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1       1354.0   1354.0      0.1  	orb = cv2.ORB_create()
    10                                           
    11         1       4071.0   4071.0      0.3  	imagem1 = np.float32(img1)
    12         1      72700.0  72700.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14098.0  14098.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      14127.0  14127.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5042.0   5042.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11990.0  11990.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         97.0     97.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20843.0  20843.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3114.0     66.3      0.2  	for variavel in corners1:
    21        46       7267.0    158.0      0.5  		array=np.array([variavel])
    22        46       2772.0     60.3      0.2  		matriz1.append(array)
    23         1       1401.0   1401.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15197.0  15197.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        298.0    298.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80047.0  80047.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27047.0  27047.0      1.8  	imagem2 = np.float32(img2)
    30         1     635377.0 635377.0     43.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96966.0  96966.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84112.0  84112.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38640.0  38640.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76581.0  76581.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         76.0     76.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      60289.0  60289.0      4.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         54.0     54.0      0.0  	matriz2=[]
    38       105       7215.0     68.7      0.5  	for variavel in corners2:
    39       104      19252.0    185.1      1.3  		array=np.array([variavel])
    40       104       6426.0     61.8      0.4  		matriz2.append(array)
    41         1       2220.0   2220.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     132475.0 132475.0      9.1  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       2445.0   2445.0      0.2  	matches = bf.match(des1,des2)

