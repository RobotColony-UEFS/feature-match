Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.902 MiB   48.902 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.789 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.910 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.145 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.492 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.883 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.121 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.121 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.246 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.246 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.246 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.246 MiB    0.000 MiB   	matriz1=[]
    20   52.246 MiB    0.000 MiB   	for variavel in corners1:
    21   52.246 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.246 MiB    0.000 MiB   		matriz1.append(array)
    23   52.312 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.590 MiB    0.277 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.590 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.172 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.492 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.812 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.812 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.812 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.074 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.395 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.395 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.395 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.395 MiB    0.000 MiB   	matriz2=[]
    38   58.398 MiB    0.000 MiB   	for variavel in corners2:
    39   58.398 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.398 MiB    0.000 MiB   		matriz2.append(array)
    41   58.402 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.402 MiB    0.000 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.676 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.41628 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      19107.0  19107.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        339.0    339.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4740.0   4740.0      0.3  	imagem1 = np.float32(img1)
    12         1      72534.0  72534.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      15019.0  15019.0      1.1  	dst1 = cv2.dilate(dst1,None)
    14         1      13364.0  13364.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5104.0   5104.0      0.4  	dst1 = np.uint8(dst1)
    16         1      12008.0  12008.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20839.0  20839.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         53.0     53.0      0.0  	matriz1=[]
    20        47       3021.0     64.3      0.2  	for variavel in corners1:
    21        46       7798.0    169.5      0.6  		array=np.array([variavel])
    22        46       2827.0     61.5      0.2  		matriz1.append(array)
    23         1       1227.0   1227.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15484.0  15484.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        182.0    182.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79449.0  79449.0      5.6  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28545.0  28545.0      2.0  	imagem2 = np.float32(img2)
    30         1     584882.0 584882.0     41.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96868.0  96868.0      6.8  	dst2 = cv2.dilate(dst2,None)
    32         1      84964.0  84964.0      6.0  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38744.0  38744.0      2.7  	dst2 = np.uint8(dst2)
    34         1      75048.0  75048.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      63961.0  63961.0      4.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       105       6807.0     64.8      0.5  	for variavel in corners2:
    39       104      16727.0    160.8      1.2  		array=np.array([variavel])
    40       104       6493.0     62.4      0.5  		matriz2.append(array)
    41         1       2197.0   2197.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     134258.0 134258.0      9.5  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3468.0   3468.0      0.2  	matches = bf.match(des1,des2)

