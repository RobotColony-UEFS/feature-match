Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.559 MiB   48.559 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.297 MiB    0.738 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.418 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.652 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   50.996 MiB    1.344 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.469 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.656 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.656 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.742 MiB    0.086 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.742 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.766 MiB    0.023 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.766 MiB    0.000 MiB   	matriz1=[]
    20   51.766 MiB    0.000 MiB   	for variavel in corners1:
    21   51.766 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.766 MiB    0.000 MiB   		matriz1.append(array)
    23   51.863 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.172 MiB    0.309 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.230 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.812 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.133 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.453 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.453 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.500 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.762 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.082 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.082 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.082 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.082 MiB    0.000 MiB   	matriz2=[]
    38   58.086 MiB    0.000 MiB   	for variavel in corners2:
    39   58.086 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.086 MiB    0.000 MiB   		matriz2.append(array)
    41   58.090 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.090 MiB    0.000 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.324 MiB    0.234 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.4593 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18146.0  18146.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        289.0    289.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3993.0   3993.0      0.3  	imagem1 = np.float32(img1)
    12         1      74809.0  74809.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14626.0  14626.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12348.0  12348.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4987.0   4987.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11675.0  11675.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22762.0  22762.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3158.0     67.2      0.2  	for variavel in corners1:
    21        46       7397.0    160.8      0.5  		array=np.array([variavel])
    22        46       2872.0     62.4      0.2  		matriz1.append(array)
    23         1       1309.0   1309.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15374.0  15374.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        304.0    304.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80322.0  80322.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27581.0  27581.0      1.9  	imagem2 = np.float32(img2)
    30         1     628946.0 628946.0     43.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97265.0  97265.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      85925.0  85925.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38159.0  38159.0      2.6  	dst2 = np.uint8(dst2)
    34         1      75875.0  75875.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      60983.0  60983.0      4.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       105       6820.0     65.0      0.5  	for variavel in corners2:
    39       104      17602.0    169.2      1.2  		array=np.array([variavel])
    40       104       6845.0     65.8      0.5  		matriz2.append(array)
    41         1       2203.0   2203.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     134092.0 134092.0      9.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       2342.0   2342.0      0.2  	matches = bf.match(des1,des2)

