Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.996 MiB   48.996 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.922 MiB    0.926 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.984 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.219 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.438 MiB    1.219 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.820 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.996 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.996 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.105 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.105 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.152 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.152 MiB    0.000 MiB   	matriz1=[]
    20   52.152 MiB    0.000 MiB   	for variavel in corners1:
    21   52.152 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.152 MiB    0.000 MiB   		matriz1.append(array)
    23   52.270 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.500 MiB    0.230 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.562 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.145 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.465 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.785 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.785 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.785 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.047 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.367 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.367 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.367 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.367 MiB    0.000 MiB   	matriz2=[]
    38   58.371 MiB    0.000 MiB   	for variavel in corners2:
    39   58.371 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.371 MiB    0.000 MiB   		matriz2.append(array)
    41   58.375 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.375 MiB    0.000 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.664 MiB    0.289 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.47279 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17327.0  17327.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        241.0    241.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4063.0   4063.0      0.3  	imagem1 = np.float32(img1)
    12         1      76026.0  76026.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13143.0  13143.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12501.0  12501.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6618.0   6618.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11623.0  11623.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22025.0  22025.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3076.0     65.4      0.2  	for variavel in corners1:
    21        46       7423.0    161.4      0.5  		array=np.array([variavel])
    22        46       2850.0     62.0      0.2  		matriz1.append(array)
    23         1       1276.0   1276.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15352.0  15352.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        182.0    182.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79526.0  79526.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27019.0  27019.0      1.8  	imagem2 = np.float32(img2)
    30         1     646596.0 646596.0     43.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97752.0  97752.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85348.0  85348.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38155.0  38155.0      2.6  	dst2 = np.uint8(dst2)
    34         1      75522.0  75522.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      59690.0  59690.0      4.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       105       8220.0     78.3      0.6  	for variavel in corners2:
    39       104      17198.0    165.4      1.2  		array=np.array([variavel])
    40       104       6949.0     66.8      0.5  		matriz2.append(array)
    41         1       2138.0   2138.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     132121.0 132121.0      9.0  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       2545.0   2545.0      0.2  	matches = bf.match(des1,des2)

