Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.066 MiB   49.066 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.996 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.059 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.293 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.508 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.891 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.066 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.066 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.176 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.176 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.223 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.223 MiB    0.000 MiB   	matriz1=[]
    20   52.223 MiB    0.000 MiB   	for variavel in corners1:
    21   52.223 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.223 MiB    0.000 MiB   		matriz1.append(array)
    23   52.340 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.570 MiB    0.230 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.633 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.215 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.535 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.855 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.855 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.855 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.117 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.438 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.438 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.438 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.438 MiB    0.000 MiB   	matriz2=[]
    38   58.441 MiB    0.000 MiB   	for variavel in corners2:
    39   58.441 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.441 MiB    0.000 MiB   		matriz2.append(array)
    41   58.449 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.457 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.746 MiB    0.289 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.47725 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      16839.0  16839.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        321.0    321.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3994.0   3994.0      0.3  	imagem1 = np.float32(img1)
    12         1      75700.0  75700.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13619.0  13619.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12400.0  12400.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5110.0   5110.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11541.0  11541.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23176.0  23176.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3209.0     68.3      0.2  	for variavel in corners1:
    21        46       8504.0    184.9      0.6  		array=np.array([variavel])
    22        46       2979.0     64.8      0.2  		matriz1.append(array)
    23         1       1434.0   1434.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15734.0  15734.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        297.0    297.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78841.0  78841.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27724.0  27724.0      1.9  	imagem2 = np.float32(img2)
    30         1     578467.0 578467.0     39.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97066.0  97066.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85142.0  85142.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38673.0  38673.0      2.6  	dst2 = np.uint8(dst2)
    34         1      75928.0  75928.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         86.0     86.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     101499.0 101499.0      6.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       179      12655.0     70.7      0.9  	for variavel in corners2:
    39       178      31332.0    176.0      2.1  		array=np.array([variavel])
    40       178      11486.0     64.5      0.8  		matriz2.append(array)
    41         1       3940.0   3940.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     135712.0 135712.0      9.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3630.0   3630.0      0.2  	matches = bf.match(des1,des2)

