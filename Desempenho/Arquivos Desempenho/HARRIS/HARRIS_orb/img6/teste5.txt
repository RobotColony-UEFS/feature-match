Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.887 MiB   48.887 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.859 MiB    0.973 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.922 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.156 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.477 MiB    1.320 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.809 MiB    0.332 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.988 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.988 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.164 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.164 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.223 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.223 MiB    0.000 MiB   	matriz1=[]
    20   52.223 MiB    0.000 MiB   	for variavel in corners1:
    21   52.223 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.223 MiB    0.000 MiB   		matriz1.append(array)
    23   52.348 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.551 MiB    0.203 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.551 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.133 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.453 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.773 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.773 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.773 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.035 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.355 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.355 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.355 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.355 MiB    0.000 MiB   	matriz2=[]
    38   58.359 MiB    0.000 MiB   	for variavel in corners2:
    39   58.359 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.359 MiB    0.000 MiB   		matriz2.append(array)
    41   58.367 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.375 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.723 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.47531 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      16960.0  16960.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        333.0    333.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4083.0   4083.0      0.3  	imagem1 = np.float32(img1)
    12         1      75495.0  75495.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13537.0  13537.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13077.0  13077.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       6859.0   6859.0      0.5  	dst1 = np.uint8(dst1)
    16         1      11476.0  11476.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20984.0  20984.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3070.0     65.3      0.2  	for variavel in corners1:
    21        46       7599.0    165.2      0.5  		array=np.array([variavel])
    22        46       2886.0     62.7      0.2  		matriz1.append(array)
    23         1       1301.0   1301.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15536.0  15536.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        295.0    295.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79840.0  79840.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26902.0  26902.0      1.8  	imagem2 = np.float32(img2)
    30         1     578090.0 578090.0     39.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97066.0  97066.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84068.0  84068.0      5.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38003.0  38003.0      2.6  	dst2 = np.uint8(dst2)
    34         1      77266.0  77266.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100946.0 100946.0      6.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       179      11429.0     63.8      0.8  	for variavel in corners2:
    39       178      30292.0    170.2      2.1  		array=np.array([variavel])
    40       178      11116.0     62.4      0.8  		matriz2.append(array)
    41         1       3695.0   3695.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     139147.0 139147.0      9.4  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3676.0   3676.0      0.2  	matches = bf.match(des1,des2)

