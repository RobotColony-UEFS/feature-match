Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.852 MiB   48.852 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.738 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.859 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.094 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.441 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.832 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.070 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.070 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.195 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.195 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.195 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.195 MiB    0.000 MiB   	matriz1=[]
    20   52.195 MiB    0.000 MiB   	for variavel in corners1:
    21   52.195 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.195 MiB    0.000 MiB   		matriz1.append(array)
    23   52.262 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.539 MiB    0.277 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.539 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.121 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.441 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.762 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.762 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.762 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.023 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.344 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.344 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.344 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.344 MiB    0.000 MiB   	matriz2=[]
    38   58.348 MiB    0.000 MiB   	for variavel in corners2:
    39   58.348 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.348 MiB    0.000 MiB   		matriz2.append(array)
    41   58.355 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.363 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.637 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.48172 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17306.0  17306.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        242.0    242.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3901.0   3901.0      0.3  	imagem1 = np.float32(img1)
    12         1      74552.0  74552.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14014.0  14014.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12253.0  12253.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5175.0   5175.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11476.0  11476.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21403.0  21403.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3084.0     65.6      0.2  	for variavel in corners1:
    21        46       7489.0    162.8      0.5  		array=np.array([variavel])
    22        46       2929.0     63.7      0.2  		matriz1.append(array)
    23         1       1390.0   1390.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16536.0  16536.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        290.0    290.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78504.0  78504.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28042.0  28042.0      1.9  	imagem2 = np.float32(img2)
    30         1     587616.0 587616.0     39.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96563.0  96563.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      83220.0  83220.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39726.0  39726.0      2.7  	dst2 = np.uint8(dst2)
    34         1      75259.0  75259.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100963.0 100963.0      6.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       179      11737.0     65.6      0.8  	for variavel in corners2:
    39       178      28954.0    162.7      2.0  		array=np.array([variavel])
    40       178      11718.0     65.8      0.8  		matriz2.append(array)
    41         1       3728.0   3728.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     139753.0 139753.0      9.4  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3617.0   3617.0      0.2  	matches = bf.match(des1,des2)

