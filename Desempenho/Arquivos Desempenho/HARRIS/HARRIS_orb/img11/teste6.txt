Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.734 MiB   48.734 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.699 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.762 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.996 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.266 MiB    1.270 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.645 MiB    0.379 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.945 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.945 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.129 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.129 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.191 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.191 MiB    0.000 MiB   	matriz1=[]
    20   52.191 MiB    0.000 MiB   	for variavel in corners1:
    21   52.191 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.191 MiB    0.000 MiB   		matriz1.append(array)
    23   52.316 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.582 MiB    0.266 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.582 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.164 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.484 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.805 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.805 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.805 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.066 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.387 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.387 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.387 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.387 MiB    0.000 MiB   	matriz2=[]
    38   58.391 MiB    0.000 MiB   	for variavel in corners2:
    39   58.391 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.391 MiB    0.000 MiB   		matriz2.append(array)
    41   58.395 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.398 MiB    0.004 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.668 MiB    0.270 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.4874 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      16886.0  16886.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        236.0    236.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3909.0   3909.0      0.3  	imagem1 = np.float32(img1)
    12         1      75736.0  75736.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13022.0  13022.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12287.0  12287.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5776.0   5776.0      0.4  	dst1 = np.uint8(dst1)
    16         1      12790.0  12790.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21130.0  21130.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         55.0     55.0      0.0  	matriz1=[]
    20        47       3027.0     64.4      0.2  	for variavel in corners1:
    21        46       7524.0    163.6      0.5  		array=np.array([variavel])
    22        46       2835.0     61.6      0.2  		matriz1.append(array)
    23         1       1443.0   1443.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15286.0  15286.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        300.0    300.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      76549.0  76549.0      5.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27331.0  27331.0      1.8  	imagem2 = np.float32(img2)
    30         1     630073.0 630073.0     42.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96873.0  96873.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84469.0  84469.0      5.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39173.0  39173.0      2.6  	dst2 = np.uint8(dst2)
    34         1      74907.0  74907.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      86977.0  86977.0      5.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       129       8489.0     65.8      0.6  	for variavel in corners2:
    39       128      21627.0    169.0      1.5  		array=np.array([variavel])
    40       128       7827.0     61.1      0.5  		matriz2.append(array)
    41         1       2993.0   2993.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     134818.0 134818.0      9.1  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       2827.0   2827.0      0.2  	matches = bf.match(des1,des2)

