Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.773 MiB   48.773 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.590 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.652 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.887 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.172 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.598 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.785 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.785 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.883 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.883 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.918 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.918 MiB    0.000 MiB   	matriz1=[]
    20   51.918 MiB    0.000 MiB   	for variavel in corners1:
    21   51.918 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.918 MiB    0.000 MiB   		matriz1.append(array)
    23   52.023 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.266 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.266 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.848 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.168 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.488 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.488 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.488 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.750 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.070 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.070 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.070 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.070 MiB    0.000 MiB   	matriz2=[]
    38   58.074 MiB    0.000 MiB   	for variavel in corners2:
    39   58.074 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.074 MiB    0.000 MiB   		matriz2.append(array)
    41   58.078 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.082 MiB    0.004 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.367 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.47756 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18403.0  18403.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        334.0    334.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3993.0   3993.0      0.3  	imagem1 = np.float32(img1)
    12         1      71306.0  71306.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13077.0  13077.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13253.0  13253.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5083.0   5083.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11511.0  11511.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21257.0  21257.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         53.0     53.0      0.0  	matriz1=[]
    20        47       2981.0     63.4      0.2  	for variavel in corners1:
    21        46       7511.0    163.3      0.5  		array=np.array([variavel])
    22        46       2871.0     62.4      0.2  		matriz1.append(array)
    23         1       1953.0   1953.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16842.0  16842.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        171.0    171.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      73550.0  73550.0      5.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29313.0  29313.0      2.0  	imagem2 = np.float32(img2)
    30         1     619150.0 619150.0     41.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97622.0  97622.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85453.0  85453.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38248.0  38248.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76112.0  76112.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      88969.0  88969.0      6.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       129       8300.0     64.3      0.6  	for variavel in corners2:
    39       128      21289.0    166.3      1.4  		array=np.array([variavel])
    40       128       7942.0     62.0      0.5  		matriz2.append(array)
    41         1       2609.0   2609.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     135112.0 135112.0      9.1  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3067.0   3067.0      0.2  	matches = bf.match(des1,des2)

