Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.621 MiB   48.621 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.590 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.652 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.887 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.152 MiB    1.266 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.535 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.836 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.836 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.020 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.020 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.082 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.082 MiB    0.000 MiB   	matriz1=[]
    20   52.082 MiB    0.000 MiB   	for variavel in corners1:
    21   52.082 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.082 MiB    0.000 MiB   		matriz1.append(array)
    23   52.207 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.473 MiB    0.266 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.473 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.055 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.375 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.695 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.695 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.695 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.957 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.277 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.277 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.277 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.277 MiB    0.000 MiB   	matriz2=[]
    38   58.281 MiB    0.000 MiB   	for variavel in corners2:
    39   58.281 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.281 MiB    0.000 MiB   		matriz2.append(array)
    41   58.289 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.297 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.566 MiB    0.270 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.4486 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17524.0  17524.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        225.0    225.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3842.0   3842.0      0.3  	imagem1 = np.float32(img1)
    12         1      75218.0  75218.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12885.0  12885.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12321.0  12321.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5100.0   5100.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11705.0  11705.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20848.0  20848.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3084.0     65.6      0.2  	for variavel in corners1:
    21        46       7625.0    165.8      0.5  		array=np.array([variavel])
    22        46       3879.0     84.3      0.3  		matriz1.append(array)
    23         1       1386.0   1386.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15467.0  15467.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        182.0    182.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81871.0  81871.0      5.7  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26715.0  26715.0      1.8  	imagem2 = np.float32(img2)
    30         1     577225.0 577225.0     39.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97348.0  97348.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      85067.0  85067.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38179.0  38179.0      2.6  	dst2 = np.uint8(dst2)
    34         1      75461.0  75461.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      92138.0  92138.0      6.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       184      11848.0     64.4      0.8  	for variavel in corners2:
    39       183      30403.0    166.1      2.1  		array=np.array([variavel])
    40       183      11265.0     61.6      0.8  		matriz2.append(array)
    41         1       4091.0   4091.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     121569.0 121569.0      8.4  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3846.0   3846.0      0.3  	matches = bf.match(des1,des2)

