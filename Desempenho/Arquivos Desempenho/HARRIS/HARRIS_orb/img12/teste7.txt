Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.941 MiB   48.941 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.863 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.984 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.219 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.566 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.953 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.254 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.254 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.441 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.441 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.441 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.441 MiB    0.000 MiB   	matriz1=[]
    20   52.441 MiB    0.000 MiB   	for variavel in corners1:
    21   52.441 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.441 MiB    0.000 MiB   		matriz1.append(array)
    23   52.508 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.777 MiB    0.270 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.777 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.359 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.680 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.000 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.000 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.000 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.262 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.582 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.582 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.582 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.582 MiB    0.000 MiB   	matriz2=[]
    38   58.586 MiB    0.000 MiB   	for variavel in corners2:
    39   58.586 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.586 MiB    0.000 MiB   		matriz2.append(array)
    41   58.594 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.598 MiB    0.004 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.871 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.51404 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      16802.0  16802.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        340.0    340.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3936.0   3936.0      0.3  	imagem1 = np.float32(img1)
    12         1      76099.0  76099.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14103.0  14103.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12620.0  12620.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5081.0   5081.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11509.0  11509.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21682.0  21682.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1        783.0    783.0      0.1  	matriz1=[]
    20        47       3167.0     67.4      0.2  	for variavel in corners1:
    21        46       7530.0    163.7      0.5  		array=np.array([variavel])
    22        46       2873.0     62.5      0.2  		matriz1.append(array)
    23         1       1266.0   1266.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16310.0  16310.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        406.0    406.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78074.0  78074.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27565.0  27565.0      1.8  	imagem2 = np.float32(img2)
    30         1     640673.0 640673.0     42.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98539.0  98539.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85480.0  85480.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39071.0  39071.0      2.6  	dst2 = np.uint8(dst2)
    34         1      74716.0  74716.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     100739.0 100739.0      6.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       165      11134.0     67.5      0.7  	for variavel in corners2:
    39       164      27405.0    167.1      1.8  		array=np.array([variavel])
    40       164      10633.0     64.8      0.7  		matriz2.append(array)
    41         1       3566.0   3566.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     117903.0 117903.0      7.8  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3807.0   3807.0      0.3  	matches = bf.match(des1,des2)

