Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.102 MiB   49.102 MiB   @profile
     7                             def HARRIS_orb(img):
     8   50.070 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.133 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.367 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.578 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.973 MiB    0.395 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.148 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.148 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.316 MiB    0.168 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.316 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.371 MiB    0.055 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.371 MiB    0.000 MiB   	matriz1=[]
    20   52.371 MiB    0.000 MiB   	for variavel in corners1:
    21   52.371 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.371 MiB    0.000 MiB   		matriz1.append(array)
    23   52.496 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.695 MiB    0.199 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.695 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.277 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.598 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.918 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.918 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.918 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.180 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.500 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.500 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.500 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.500 MiB    0.000 MiB   	matriz2=[]
    38   58.504 MiB    0.000 MiB   	for variavel in corners2:
    39   58.504 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.504 MiB    0.000 MiB   		matriz2.append(array)
    41   58.512 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.516 MiB    0.004 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.805 MiB    0.289 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.51032 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18223.0  18223.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        221.0    221.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4007.0   4007.0      0.3  	imagem1 = np.float32(img1)
    12         1      71519.0  71519.0      4.7  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14179.0  14179.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12158.0  12158.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5383.0   5383.0      0.4  	dst1 = np.uint8(dst1)
    16         1      13274.0  13274.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1        199.0    199.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20959.0  20959.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3224.0     68.6      0.2  	for variavel in corners1:
    21        46       7369.0    160.2      0.5  		array=np.array([variavel])
    22        46       2964.0     64.4      0.2  		matriz1.append(array)
    23         1       1289.0   1289.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15757.0  15757.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        182.0    182.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79039.0  79039.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26565.0  26565.0      1.8  	imagem2 = np.float32(img2)
    30         1     619286.0 619286.0     41.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98645.0  98645.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      83866.0  83866.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39935.0  39935.0      2.6  	dst2 = np.uint8(dst2)
    34         1      74817.0  74817.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     101468.0 101468.0      6.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       165      10700.0     64.8      0.7  	for variavel in corners2:
    39       164      29370.0    179.1      1.9  		array=np.array([variavel])
    40       164      11007.0     67.1      0.7  		matriz2.append(array)
    41         1       3466.0   3466.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     136033.0 136033.0      9.0  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       5018.0   5018.0      0.3  	matches = bf.match(des1,des2)

