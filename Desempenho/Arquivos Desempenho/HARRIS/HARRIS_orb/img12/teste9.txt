Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.980 MiB   48.980 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.883 MiB    0.902 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.004 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.238 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.590 MiB    1.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.977 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.277 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.277 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.465 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.465 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.465 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.465 MiB    0.000 MiB   	matriz1=[]
    20   52.465 MiB    0.000 MiB   	for variavel in corners1:
    21   52.465 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.465 MiB    0.000 MiB   		matriz1.append(array)
    23   52.531 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.801 MiB    0.270 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.801 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.383 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.703 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.023 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.023 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.023 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.285 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.605 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.605 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.605 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.605 MiB    0.000 MiB   	matriz2=[]
    38   58.609 MiB    0.000 MiB   	for variavel in corners2:
    39   58.609 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.609 MiB    0.000 MiB   		matriz2.append(array)
    41   58.617 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.621 MiB    0.004 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.895 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.46349 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18893.0  18893.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        543.0    543.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4817.0   4817.0      0.3  	imagem1 = np.float32(img1)
    12         1      72714.0  72714.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13011.0  13011.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      14968.0  14968.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5185.0   5185.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11464.0  11464.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         93.0     93.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21152.0  21152.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3034.0     64.6      0.2  	for variavel in corners1:
    21        46       7424.0    161.4      0.5  		array=np.array([variavel])
    22        46       3113.0     67.7      0.2  		matriz1.append(array)
    23         1       1327.0   1327.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15528.0  15528.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        286.0    286.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77939.0  77939.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26768.0  26768.0      1.8  	imagem2 = np.float32(img2)
    30         1     577189.0 577189.0     39.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97008.0  97008.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      84516.0  84516.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37217.0  37217.0      2.5  	dst2 = np.uint8(dst2)
    34         1      76523.0  76523.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         85.0     85.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      99811.0  99811.0      6.8  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         61.0     61.0      0.0  	matriz2=[]
    38       165      12002.0     72.7      0.8  	for variavel in corners2:
    39       164      28402.0    173.2      1.9  		array=np.array([variavel])
    40       164      10390.0     63.4      0.7  		matriz2.append(array)
    41         1       3409.0   3409.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     135252.0 135252.0      9.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3309.0   3309.0      0.2  	matches = bf.match(des1,des2)

