Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.867 MiB   48.867 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.836 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.898 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.133 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.457 MiB    1.324 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.789 MiB    0.332 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.969 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.969 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.145 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.145 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.203 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.203 MiB    0.000 MiB   	matriz1=[]
    20   52.203 MiB    0.000 MiB   	for variavel in corners1:
    21   52.203 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.203 MiB    0.000 MiB   		matriz1.append(array)
    23   52.328 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.531 MiB    0.203 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.531 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.113 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.434 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.754 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.754 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.754 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.016 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.336 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.336 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.336 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.336 MiB    0.000 MiB   	matriz2=[]
    38   58.344 MiB    0.000 MiB   	for variavel in corners2:
    39   58.344 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.344 MiB    0.000 MiB   		matriz2.append(array)
    41   58.352 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.359 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.707 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.55082 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      16902.0  16902.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        330.0    330.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4162.0   4162.0      0.3  	imagem1 = np.float32(img1)
    12         1      71382.0  71382.0      4.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14091.0  14091.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12320.0  12320.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5078.0   5078.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11523.0  11523.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         93.0     93.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21028.0  21028.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3474.0     73.9      0.2  	for variavel in corners1:
    21        46       7591.0    165.0      0.5  		array=np.array([variavel])
    22        46       3084.0     67.0      0.2  		matriz1.append(array)
    23         1       2917.0   2917.0      0.2  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16317.0  16317.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        171.0    171.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77264.0  77264.0      5.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29609.0  29609.0      1.9  	imagem2 = np.float32(img2)
    30         1     623565.0 623565.0     40.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97501.0  97501.0      6.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84993.0  84993.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37068.0  37068.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76779.0  76779.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     117582.0 117582.0      7.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       226      15074.0     66.7      1.0  	for variavel in corners2:
    39       225      38557.0    171.4      2.5  		array=np.array([variavel])
    40       225      14524.0     64.6      0.9  		matriz2.append(array)
    41         1       4683.0   4683.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     137233.0 137233.0      8.8  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       5723.0   5723.0      0.4  	matches = bf.match(des1,des2)

