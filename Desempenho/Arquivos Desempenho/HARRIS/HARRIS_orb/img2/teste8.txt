Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.824 MiB   48.824 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.641 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.703 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.938 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.223 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.648 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.836 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.836 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.934 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.934 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.969 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.969 MiB    0.000 MiB   	matriz1=[]
    20   51.969 MiB    0.000 MiB   	for variavel in corners1:
    21   51.969 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.969 MiB    0.000 MiB   		matriz1.append(array)
    23   52.074 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.316 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.316 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.898 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.219 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.539 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.539 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.539 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.801 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.121 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.121 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.121 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.121 MiB    0.000 MiB   	matriz2=[]
    38   58.129 MiB    0.000 MiB   	for variavel in corners2:
    39   58.129 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.129 MiB    0.000 MiB   		matriz2.append(array)
    41   58.137 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.145 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.430 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.49183 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      19185.0  19185.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        338.0    338.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3835.0   3835.0      0.3  	imagem1 = np.float32(img1)
    12         1      73727.0  73727.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13125.0  13125.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      14195.0  14195.0      1.0  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5096.0   5096.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12963.0  12963.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21084.0  21084.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3066.0     65.2      0.2  	for variavel in corners1:
    21        46       7595.0    165.1      0.5  		array=np.array([variavel])
    22        46       3088.0     67.1      0.2  		matriz1.append(array)
    23         1       1226.0   1226.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15559.0  15559.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        181.0    181.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80383.0  80383.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26696.0  26696.0      1.8  	imagem2 = np.float32(img2)
    30         1     581563.0 581563.0     39.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96295.0  96295.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84954.0  84954.0      5.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37144.0  37144.0      2.5  	dst2 = np.uint8(dst2)
    34         1      76949.0  76949.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         84.0     84.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114103.0 114103.0      7.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       226      16379.0     72.5      1.1  	for variavel in corners2:
    39       225      37613.0    167.2      2.5  		array=np.array([variavel])
    40       225      14301.0     63.6      1.0  		matriz2.append(array)
    41         1       4540.0   4540.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     121746.0 121746.0      8.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4611.0   4611.0      0.3  	matches = bf.match(des1,des2)

