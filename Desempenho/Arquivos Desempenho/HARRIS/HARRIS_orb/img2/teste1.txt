Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.887 MiB   48.887 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.773 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.895 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.129 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.477 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.863 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.102 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.102 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.227 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.227 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.227 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.227 MiB    0.000 MiB   	matriz1=[]
    20   52.227 MiB    0.000 MiB   	for variavel in corners1:
    21   52.227 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.227 MiB    0.000 MiB   		matriz1.append(array)
    23   52.293 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.570 MiB    0.277 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.570 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.152 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.473 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.793 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.793 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.793 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.055 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.375 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.375 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.375 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.375 MiB    0.000 MiB   	matriz2=[]
    38   58.383 MiB    0.000 MiB   	for variavel in corners2:
    39   58.383 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.383 MiB    0.000 MiB   		matriz2.append(array)
    41   58.391 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.398 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.672 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.5124 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      19086.0  19086.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        227.0    227.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4007.0   4007.0      0.3  	imagem1 = np.float32(img1)
    12         1      73144.0  73144.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14775.0  14775.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12462.0  12462.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4939.0   4939.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11714.0  11714.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22103.0  22103.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3760.0     80.0      0.2  	for variavel in corners1:
    21        46       7332.0    159.4      0.5  		array=np.array([variavel])
    22        46       2838.0     61.7      0.2  		matriz1.append(array)
    23         1       1348.0   1348.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15367.0  15367.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        181.0    181.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79540.0  79540.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      29026.0  29026.0      1.9  	imagem2 = np.float32(img2)
    30         1     578636.0 578636.0     38.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96937.0  96937.0      6.4  	dst2 = cv2.dilate(dst2,None)
    32         1      88020.0  88020.0      5.8  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39135.0  39135.0      2.6  	dst2 = np.uint8(dst2)
    34         1      75672.0  75672.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     116136.0 116136.0      7.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         63.0     63.0      0.0  	matriz2=[]
    38       226      14468.0     64.0      1.0  	for variavel in corners2:
    39       225      38978.0    173.2      2.6  		array=np.array([variavel])
    40       225      13820.0     61.4      0.9  		matriz2.append(array)
    41         1       5036.0   5036.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     138930.0 138930.0      9.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4495.0   4495.0      0.3  	matches = bf.match(des1,des2)

