Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.070 MiB   49.070 MiB   @profile
     7                             def HARRIS_orb(img):
     8   50.000 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.062 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.297 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.512 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.895 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.070 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.070 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.180 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.180 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.227 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.227 MiB    0.000 MiB   	matriz1=[]
    20   52.227 MiB    0.000 MiB   	for variavel in corners1:
    21   52.227 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.227 MiB    0.000 MiB   		matriz1.append(array)
    23   52.344 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.574 MiB    0.230 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.637 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.219 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.539 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.859 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.859 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.859 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.121 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.441 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.441 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.441 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.441 MiB    0.000 MiB   	matriz2=[]
    38   58.449 MiB    0.000 MiB   	for variavel in corners2:
    39   58.449 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.449 MiB    0.000 MiB   		matriz2.append(array)
    41   58.457 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.465 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.754 MiB    0.289 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.55937 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17209.0  17209.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        342.0    342.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3956.0   3956.0      0.3  	imagem1 = np.float32(img1)
    12         1      75674.0  75674.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13028.0  13028.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12951.0  12951.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5935.0   5935.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11615.0  11615.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21021.0  21021.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         61.0     61.0      0.0  	matriz1=[]
    20        47       3426.0     72.9      0.2  	for variavel in corners1:
    21        46       9218.0    200.4      0.6  		array=np.array([variavel])
    22        46       2918.0     63.4      0.2  		matriz1.append(array)
    23         1       1472.0   1472.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15463.0  15463.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        191.0    191.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80496.0  80496.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26786.0  26786.0      1.7  	imagem2 = np.float32(img2)
    30         1     631833.0 631833.0     40.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95626.0  95626.0      6.1  	dst2 = cv2.dilate(dst2,None)
    32         1      84834.0  84834.0      5.4  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38557.0  38557.0      2.5  	dst2 = np.uint8(dst2)
    34         1      76285.0  76285.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     114208.0 114208.0      7.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         59.0     59.0      0.0  	matriz2=[]
    38       226      15161.0     67.1      1.0  	for variavel in corners2:
    39       225      38376.0    170.6      2.5  		array=np.array([variavel])
    40       225      15288.0     67.9      1.0  		matriz2.append(array)
    41         1       4586.0   4586.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     138231.0 138231.0      8.9  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4394.0   4394.0      0.3  	matches = bf.match(des1,des2)

