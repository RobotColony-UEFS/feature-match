Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.879 MiB   48.879 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.852 MiB    0.973 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.914 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.148 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.469 MiB    1.320 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.801 MiB    0.332 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.980 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.980 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.156 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.156 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.215 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.215 MiB    0.000 MiB   	matriz1=[]
    20   52.215 MiB    0.000 MiB   	for variavel in corners1:
    21   52.215 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.215 MiB    0.000 MiB   		matriz1.append(array)
    23   52.340 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.543 MiB    0.203 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.543 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.125 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.445 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.766 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.766 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.766 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.027 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.348 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.348 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.348 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.348 MiB    0.000 MiB   	matriz2=[]
    38   58.355 MiB    0.000 MiB   	for variavel in corners2:
    39   58.355 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.355 MiB    0.000 MiB   		matriz2.append(array)
    41   58.367 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.379 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.727 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.60294 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      19070.0  19070.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        246.0    246.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3905.0   3905.0      0.2  	imagem1 = np.float32(img1)
    12         1      73110.0  73110.0      4.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14616.0  14616.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13777.0  13777.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5144.0   5144.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11491.0  11491.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21495.0  21495.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3074.0     65.4      0.2  	for variavel in corners1:
    21        46       7745.0    168.4      0.5  		array=np.array([variavel])
    22        46       2840.0     61.7      0.2  		matriz1.append(array)
    23         1       1318.0   1318.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16401.0  16401.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        412.0    412.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79990.0  79990.0      5.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27984.0  27984.0      1.7  	imagem2 = np.float32(img2)
    30         1     583327.0 583327.0     36.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96545.0  96545.0      6.0  	dst2 = cv2.dilate(dst2,None)
    32         1      84987.0  84987.0      5.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38319.0  38319.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76496.0  76496.0      4.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     182909.0 182909.0     11.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       285      18093.0     63.5      1.1  	for variavel in corners2:
    39       284      48066.0    169.2      3.0  		array=np.array([variavel])
    40       284      17340.0     61.1      1.1  		matriz2.append(array)
    41         1       6653.0   6653.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     142234.0 142234.0      8.9  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       5074.0   5074.0      0.3  	matches = bf.match(des1,des2)

