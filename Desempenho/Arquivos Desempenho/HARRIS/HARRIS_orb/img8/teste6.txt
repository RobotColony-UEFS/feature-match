Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.617 MiB   48.617 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.586 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.648 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.883 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.148 MiB    1.266 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.531 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.832 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.832 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.016 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.016 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.078 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.078 MiB    0.000 MiB   	matriz1=[]
    20   52.078 MiB    0.000 MiB   	for variavel in corners1:
    21   52.078 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.078 MiB    0.000 MiB   		matriz1.append(array)
    23   52.203 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.469 MiB    0.266 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.469 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.051 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.371 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.691 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.691 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.691 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.953 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.273 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.273 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.273 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.273 MiB    0.000 MiB   	matriz2=[]
    38   58.281 MiB    0.000 MiB   	for variavel in corners2:
    39   58.281 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.281 MiB    0.000 MiB   		matriz2.append(array)
    41   58.293 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.305 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.574 MiB    0.270 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.67551 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      19766.0  19766.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        338.0    338.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4112.0   4112.0      0.2  	imagem1 = np.float32(img1)
    12         1      73460.0  73460.0      4.4  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      15549.0  15549.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12348.0  12348.0      0.7  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5137.0   5137.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11584.0  11584.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21514.0  21514.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3026.0     64.4      0.2  	for variavel in corners1:
    21        46       7384.0    160.5      0.4  		array=np.array([variavel])
    22        46       2765.0     60.1      0.2  		matriz1.append(array)
    23         1       1398.0   1398.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16177.0  16177.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        180.0    180.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80967.0  80967.0      4.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27232.0  27232.0      1.6  	imagem2 = np.float32(img2)
    30         1     655175.0 655175.0     39.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96866.0  96866.0      5.8  	dst2 = cv2.dilate(dst2,None)
    32         1      84713.0  84713.0      5.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37479.0  37479.0      2.2  	dst2 = np.uint8(dst2)
    34         1      77799.0  77799.0      4.6  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     185697.0 185697.0     11.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       285      18465.0     64.8      1.1  	for variavel in corners2:
    39       284      47250.0    166.4      2.8  		array=np.array([variavel])
    40       284      18043.0     63.5      1.1  		matriz2.append(array)
    41         1       6034.0   6034.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     139993.0 139993.0      8.4  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4783.0   4783.0      0.3  	matches = bf.match(des1,des2)

