Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.734 MiB   48.734 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.484 MiB    0.750 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.605 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.840 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.125 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.547 MiB    0.422 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.734 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.734 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.828 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.828 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.859 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.859 MiB    0.000 MiB   	matriz1=[]
    20   51.859 MiB    0.000 MiB   	for variavel in corners1:
    21   51.859 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.859 MiB    0.000 MiB   		matriz1.append(array)
    23   51.961 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.270 MiB    0.309 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.270 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.852 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.172 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.492 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.492 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.492 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.754 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.074 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.074 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.074 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.074 MiB    0.000 MiB   	matriz2=[]
    38   58.082 MiB    0.000 MiB   	for variavel in corners2:
    39   58.082 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.082 MiB    0.000 MiB   		matriz2.append(array)
    41   58.094 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.105 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.383 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.6495 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      16957.0  16957.0      1.0  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        335.0    335.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4022.0   4022.0      0.2  	imagem1 = np.float32(img1)
    12         1      75806.0  75806.0      4.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13202.0  13202.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12688.0  12688.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5096.0   5096.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11999.0  11999.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1        580.0    580.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23006.0  23006.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3092.0     65.8      0.2  	for variavel in corners1:
    21        46       7295.0    158.6      0.4  		array=np.array([variavel])
    22        46       2795.0     60.8      0.2  		matriz1.append(array)
    23         1       1325.0   1325.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15803.0  15803.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        433.0    433.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81193.0  81193.0      4.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27266.0  27266.0      1.7  	imagem2 = np.float32(img2)
    30         1     629050.0 629050.0     38.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97106.0  97106.0      5.9  	dst2 = cv2.dilate(dst2,None)
    32         1      85274.0  85274.0      5.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      40087.0  40087.0      2.4  	dst2 = np.uint8(dst2)
    34         1      74322.0  74322.0      4.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     184226.0 184226.0     11.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       285      19772.0     69.4      1.2  	for variavel in corners2:
    39       284      46677.0    164.4      2.8  		array=np.array([variavel])
    40       284      17114.0     60.3      1.0  		matriz2.append(array)
    41         1       6988.0   6988.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     140923.0 140923.0      8.5  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4877.0   4877.0      0.3  	matches = bf.match(des1,des2)

