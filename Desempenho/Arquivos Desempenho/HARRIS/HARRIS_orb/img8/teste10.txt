Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.668 MiB   48.668 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.414 MiB    0.746 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.535 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.770 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.059 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.480 MiB    0.422 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.668 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.668 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.762 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.762 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.793 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.793 MiB    0.000 MiB   	matriz1=[]
    20   51.793 MiB    0.000 MiB   	for variavel in corners1:
    21   51.793 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.793 MiB    0.000 MiB   		matriz1.append(array)
    23   51.895 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.203 MiB    0.309 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.203 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.785 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.105 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.426 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.426 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.426 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.688 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.008 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.008 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.008 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.008 MiB    0.000 MiB   	matriz2=[]
    38   58.016 MiB    0.000 MiB   	for variavel in corners2:
    39   58.016 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.016 MiB    0.000 MiB   		matriz2.append(array)
    41   58.027 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.039 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.316 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.60624 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      19090.0  19090.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        238.0    238.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4037.0   4037.0      0.3  	imagem1 = np.float32(img1)
    12         1      73965.0  73965.0      4.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13333.0  13333.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      14277.0  14277.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5134.0   5134.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11867.0  11867.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22397.0  22397.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3123.0     66.4      0.2  	for variavel in corners1:
    21        46       7514.0    163.3      0.5  		array=np.array([variavel])
    22        46       2878.0     62.6      0.2  		matriz1.append(array)
    23         1       1362.0   1362.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15440.0  15440.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        185.0    185.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80974.0  80974.0      5.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27172.0  27172.0      1.7  	imagem2 = np.float32(img2)
    30         1     581079.0 581079.0     36.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97554.0  97554.0      6.1  	dst2 = cv2.dilate(dst2,None)
    32         1      85326.0  85326.0      5.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37252.0  37252.0      2.3  	dst2 = np.uint8(dst2)
    34         1      78577.0  78577.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     186265.0 186265.0     11.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       285      18087.0     63.5      1.1  	for variavel in corners2:
    39       284      46602.0    164.1      2.9  		array=np.array([variavel])
    40       284      18902.0     66.6      1.2  		matriz2.append(array)
    41         1       5987.0   5987.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     141632.0 141632.0      8.8  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       5707.0   5707.0      0.4  	matches = bf.match(des1,des2)

