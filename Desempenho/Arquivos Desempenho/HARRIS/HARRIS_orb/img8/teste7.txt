Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.973 MiB   48.973 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.902 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.965 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.199 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.414 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.801 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.977 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.977 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.086 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.086 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.133 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.133 MiB    0.000 MiB   	matriz1=[]
    20   52.133 MiB    0.000 MiB   	for variavel in corners1:
    21   52.133 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.133 MiB    0.000 MiB   		matriz1.append(array)
    23   52.250 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.480 MiB    0.230 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.543 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.125 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.445 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.766 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.766 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.766 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.027 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.348 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.348 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.348 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.348 MiB    0.000 MiB   	matriz2=[]
    38   58.355 MiB    0.000 MiB   	for variavel in corners2:
    39   58.355 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.355 MiB    0.000 MiB   		matriz2.append(array)
    41   58.367 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.379 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.668 MiB    0.289 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.6008 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17148.0  17148.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        232.0    232.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3981.0   3981.0      0.2  	imagem1 = np.float32(img1)
    12         1      75609.0  75609.0      4.7  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13043.0  13043.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      13727.0  13727.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5313.0   5313.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12050.0  12050.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         92.0     92.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20966.0  20966.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3181.0     67.7      0.2  	for variavel in corners1:
    21        46       8668.0    188.4      0.5  		array=np.array([variavel])
    22        46       2997.0     65.2      0.2  		matriz1.append(array)
    23         1       1355.0   1355.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15492.0  15492.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        183.0    183.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80358.0  80358.0      5.0  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26731.0  26731.0      1.7  	imagem2 = np.float32(img2)
    30         1     579952.0 579952.0     36.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98193.0  98193.0      6.1  	dst2 = cv2.dilate(dst2,None)
    32         1      84201.0  84201.0      5.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38046.0  38046.0      2.4  	dst2 = np.uint8(dst2)
    34         1      77038.0  77038.0      4.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     182306.0 182306.0     11.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       285      20747.0     72.8      1.3  	for variavel in corners2:
    39       284      49395.0    173.9      3.1  		array=np.array([variavel])
    40       284      18586.0     65.4      1.2  		matriz2.append(array)
    41         1       5799.0   5799.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     140181.0 140181.0      8.8  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       5029.0   5029.0      0.3  	matches = bf.match(des1,des2)

