Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.621 MiB   48.621 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.590 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.652 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.887 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.152 MiB    1.266 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.535 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.836 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.836 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.020 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.020 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.082 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.082 MiB    0.000 MiB   	matriz1=[]
    20   52.082 MiB    0.000 MiB   	for variavel in corners1:
    21   52.082 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.082 MiB    0.000 MiB   		matriz1.append(array)
    23   52.207 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.473 MiB    0.266 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.473 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.055 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.375 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.695 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.695 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.695 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.957 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.277 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.277 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.277 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.277 MiB    0.000 MiB   	matriz2=[]
    38   58.285 MiB    0.000 MiB   	for variavel in corners2:
    39   58.285 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.285 MiB    0.000 MiB   		matriz2.append(array)
    41   58.297 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.309 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.578 MiB    0.270 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.59115 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17055.0  17055.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        332.0    332.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3965.0   3965.0      0.2  	imagem1 = np.float32(img1)
    12         1      75944.0  75944.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13249.0  13249.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12379.0  12379.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5960.0   5960.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11463.0  11463.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         99.0     99.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21319.0  21319.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       4777.0    101.6      0.3  	for variavel in corners1:
    21        46       8460.0    183.9      0.5  		array=np.array([variavel])
    22        46       2868.0     62.3      0.2  		matriz1.append(array)
    23         1       1307.0   1307.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15739.0  15739.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        178.0    178.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78447.0  78447.0      4.9  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28474.0  28474.0      1.8  	imagem2 = np.float32(img2)
    30         1     580591.0 580591.0     36.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      95608.0  95608.0      6.0  	dst2 = cv2.dilate(dst2,None)
    32         1      84999.0  84999.0      5.3  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38966.0  38966.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76012.0  76012.0      4.8  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         93.0     93.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     174765.0 174765.0     11.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       287      20085.0     70.0      1.3  	for variavel in corners2:
    39       286      47920.0    167.6      3.0  		array=np.array([variavel])
    40       286      17916.0     62.6      1.1  		matriz2.append(array)
    41         1       7711.0   7711.0      0.5  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     139566.0 139566.0      8.8  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4793.0   4793.0      0.3  	matches = bf.match(des1,des2)

