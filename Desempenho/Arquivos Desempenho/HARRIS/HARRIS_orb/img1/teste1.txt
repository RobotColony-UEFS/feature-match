Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.820 MiB   48.820 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.793 MiB    0.973 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.859 MiB    0.066 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.094 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.414 MiB    1.320 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.746 MiB    0.332 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.926 MiB    0.180 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.926 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.102 MiB    0.176 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.102 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.160 MiB    0.059 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.160 MiB    0.000 MiB   	matriz1=[]
    20   52.160 MiB    0.000 MiB   	for variavel in corners1:
    21   52.160 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.160 MiB    0.000 MiB   		matriz1.append(array)
    23   52.285 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.488 MiB    0.203 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.488 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.070 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.391 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.711 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.711 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.711 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.973 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.293 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.293 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.293 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.293 MiB    0.000 MiB   	matriz2=[]
    38   58.301 MiB    0.000 MiB   	for variavel in corners2:
    39   58.301 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.301 MiB    0.000 MiB   		matriz2.append(array)
    41   58.312 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.324 MiB    0.012 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.672 MiB    0.348 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.63323 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17008.0  17008.0      1.0  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        237.0    237.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3917.0   3917.0      0.2  	imagem1 = np.float32(img1)
    12         1      76280.0  76280.0      4.7  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13200.0  13200.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12265.0  12265.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5197.0   5197.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11561.0  11561.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23260.0  23260.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         62.0     62.0      0.0  	matriz1=[]
    20        47       3046.0     64.8      0.2  	for variavel in corners1:
    21        46       8348.0    181.5      0.5  		array=np.array([variavel])
    22        46       2895.0     62.9      0.2  		matriz1.append(array)
    23         1       1437.0   1437.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15316.0  15316.0      0.9  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        291.0    291.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82487.0  82487.0      5.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26682.0  26682.0      1.6  	imagem2 = np.float32(img2)
    30         1     640975.0 640975.0     39.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97602.0  97602.0      6.0  	dst2 = cv2.dilate(dst2,None)
    32         1      84428.0  84428.0      5.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39636.0  39636.0      2.4  	dst2 = np.uint8(dst2)
    34         1      75851.0  75851.0      4.6  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     169347.0 169347.0     10.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       287      20682.0     72.1      1.3  	for variavel in corners2:
    39       286      48078.0    168.1      2.9  		array=np.array([variavel])
    40       286      17583.0     61.5      1.1  		matriz2.append(array)
    41         1       6545.0   6545.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     123707.0 123707.0      7.6  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       5075.0   5075.0      0.3  	matches = bf.match(des1,des2)

