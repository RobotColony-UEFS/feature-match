Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.582 MiB   48.582 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.457 MiB    0.875 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.578 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.812 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.102 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.559 MiB    0.457 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.746 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.746 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.887 MiB    0.141 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.887 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.902 MiB    0.016 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.902 MiB    0.000 MiB   	matriz1=[]
    20   51.902 MiB    0.000 MiB   	for variavel in corners1:
    21   51.902 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.902 MiB    0.000 MiB   		matriz1.append(array)
    23   51.992 MiB    0.090 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.359 MiB    0.367 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.359 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.941 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.262 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.582 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.582 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.633 MiB    0.051 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.895 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.215 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.215 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.215 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.215 MiB    0.000 MiB   	matriz2=[]
    38   58.223 MiB    0.000 MiB   	for variavel in corners2:
    39   58.223 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.223 MiB    0.000 MiB   		matriz2.append(array)
    41   58.234 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.242 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.465 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.65693 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17134.0  17134.0      1.0  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        340.0    340.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4855.0   4855.0      0.3  	imagem1 = np.float32(img1)
    12         1      75069.0  75069.0      4.5  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13121.0  13121.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      13239.0  13239.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5162.0   5162.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11690.0  11690.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21830.0  21830.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3040.0     64.7      0.2  	for variavel in corners1:
    21        46       7968.0    173.2      0.5  		array=np.array([variavel])
    22        46       2804.0     61.0      0.2  		matriz1.append(array)
    23         1       1230.0   1230.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15569.0  15569.0      0.9  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        183.0    183.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80277.0  80277.0      4.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26695.0  26695.0      1.6  	imagem2 = np.float32(img2)
    30         1     643605.0 643605.0     38.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96659.0  96659.0      5.8  	dst2 = cv2.dilate(dst2,None)
    32         1      85114.0  85114.0      5.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39252.0  39252.0      2.4  	dst2 = np.uint8(dst2)
    34         1      74913.0  74913.0      4.5  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     183338.0 183338.0     11.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       273      19181.0     70.3      1.2  	for variavel in corners2:
    39       272      45523.0    167.4      2.7  		array=np.array([variavel])
    40       272      16510.0     60.7      1.0  		matriz2.append(array)
    41         1       6155.0   6155.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     141434.0 141434.0      8.5  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       4758.0   4758.0      0.3  	matches = bf.match(des1,des2)

