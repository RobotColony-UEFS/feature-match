Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.625 MiB   48.625 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.504 MiB    0.879 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.625 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.918 MiB    0.293 MiB   	imagem1 = np.float32(img1)
    12   51.211 MiB    1.293 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.621 MiB    0.410 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.863 MiB    0.242 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.863 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.988 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.988 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.000 MiB    0.012 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.000 MiB    0.000 MiB   	matriz1=[]
    20   52.000 MiB    0.000 MiB   	for variavel in corners1:
    21   52.000 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.000 MiB    0.000 MiB   		matriz1.append(array)
    23   52.066 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.348 MiB    0.281 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.348 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.930 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.250 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.570 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.570 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.625 MiB    0.055 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.887 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.207 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.207 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.207 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.207 MiB    0.000 MiB   	matriz2=[]
    38   58.215 MiB    0.000 MiB   	for variavel in corners2:
    39   58.215 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.215 MiB    0.000 MiB   		matriz2.append(array)
    41   58.227 MiB    0.012 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.234 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.512 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.64009 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17691.0  17691.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        243.0    243.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4048.0   4048.0      0.2  	imagem1 = np.float32(img1)
    12         1      75439.0  75439.0      4.6  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13117.0  13117.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12500.0  12500.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4994.0   4994.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11519.0  11519.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21308.0  21308.0      1.3  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3016.0     64.2      0.2  	for variavel in corners1:
    21        46       7655.0    166.4      0.5  		array=np.array([variavel])
    22        46       2980.0     64.8      0.2  		matriz1.append(array)
    23         1       1288.0   1288.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16288.0  16288.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        244.0    244.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78816.0  78816.0      4.8  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27737.0  27737.0      1.7  	imagem2 = np.float32(img2)
    30         1     631410.0 631410.0     38.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97975.0  97975.0      6.0  	dst2 = cv2.dilate(dst2,None)
    32         1      84964.0  84964.0      5.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37058.0  37058.0      2.3  	dst2 = np.uint8(dst2)
    34         1      76961.0  76961.0      4.7  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     181439.0 181439.0     11.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       273      18177.0     66.6      1.1  	for variavel in corners2:
    39       272      44795.0    164.7      2.7  		array=np.array([variavel])
    40       272      17640.0     64.9      1.1  		matriz2.append(array)
    41         1       5383.0   5383.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     140102.0 140102.0      8.5  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       5028.0   5028.0      0.3  	matches = bf.match(des1,des2)

