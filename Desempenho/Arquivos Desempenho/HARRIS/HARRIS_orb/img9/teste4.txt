Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.668 MiB   48.668 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.414 MiB    0.746 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.535 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.770 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.059 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.480 MiB    0.422 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.668 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.668 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.762 MiB    0.094 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.762 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.793 MiB    0.031 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.793 MiB    0.000 MiB   	matriz1=[]
    20   51.793 MiB    0.000 MiB   	for variavel in corners1:
    21   51.793 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.793 MiB    0.000 MiB   		matriz1.append(array)
    23   51.895 MiB    0.102 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.203 MiB    0.309 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.203 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.785 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.105 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.426 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.426 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.426 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.688 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.008 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.008 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.008 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.008 MiB    0.000 MiB   	matriz2=[]
    38   58.012 MiB    0.000 MiB   	for variavel in corners2:
    39   58.012 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.012 MiB    0.000 MiB   		matriz2.append(array)
    41   58.020 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.027 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.305 MiB    0.277 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.48882 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      16762.0  16762.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        333.0    333.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4022.0   4022.0      0.3  	imagem1 = np.float32(img1)
    12         1      74397.0  74397.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14146.0  14146.0      1.0  	dst1 = cv2.dilate(dst1,None)
    14         1      12265.0  12265.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5076.0   5076.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11565.0  11565.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         85.0     85.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21737.0  21737.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       2990.0     63.6      0.2  	for variavel in corners1:
    21        46       7403.0    160.9      0.5  		array=np.array([variavel])
    22        46       2842.0     61.8      0.2  		matriz1.append(array)
    23         1       1308.0   1308.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16736.0  16736.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        228.0    228.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80223.0  80223.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28566.0  28566.0      1.9  	imagem2 = np.float32(img2)
    30         1     584511.0 584511.0     39.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96328.0  96328.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84987.0  84987.0      5.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39429.0  39429.0      2.6  	dst2 = np.uint8(dst2)
    34         1      74698.0  74698.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     106836.0 106836.0      7.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       190      12950.0     68.2      0.9  	for variavel in corners2:
    39       189      31796.0    168.2      2.1  		array=np.array([variavel])
    40       189      11551.0     61.1      0.8  		matriz2.append(array)
    41         1       4060.0   4060.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     137322.0 137322.0      9.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3475.0   3475.0      0.2  	matches = bf.match(des1,des2)

