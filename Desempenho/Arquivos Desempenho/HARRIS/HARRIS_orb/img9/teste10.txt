Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.125 MiB   49.125 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.941 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.004 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.238 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.520 MiB    1.281 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.895 MiB    0.375 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.078 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.078 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.180 MiB    0.102 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.180 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.219 MiB    0.039 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.219 MiB    0.000 MiB   	matriz1=[]
    20   52.219 MiB    0.000 MiB   	for variavel in corners1:
    21   52.219 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.219 MiB    0.000 MiB   		matriz1.append(array)
    23   52.328 MiB    0.109 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.566 MiB    0.238 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.629 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.211 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.531 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.852 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.852 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.852 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.113 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.434 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.434 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.434 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.434 MiB    0.000 MiB   	matriz2=[]
    38   58.438 MiB    0.000 MiB   	for variavel in corners2:
    39   58.438 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.438 MiB    0.000 MiB   		matriz2.append(array)
    41   58.445 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.453 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.676 MiB    0.223 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.50458 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17319.0  17319.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        230.0    230.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3857.0   3857.0      0.3  	imagem1 = np.float32(img1)
    12         1      75875.0  75875.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12979.0  12979.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12409.0  12409.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5089.0   5089.0      0.3  	dst1 = np.uint8(dst1)
    16         1      13269.0  13269.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22239.0  22239.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3149.0     67.0      0.2  	for variavel in corners1:
    21        46       7490.0    162.8      0.5  		array=np.array([variavel])
    22        46       2947.0     64.1      0.2  		matriz1.append(array)
    23         1       1321.0   1321.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15415.0  15415.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        180.0    180.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      81167.0  81167.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26692.0  26692.0      1.8  	imagem2 = np.float32(img2)
    30         1     597024.0 597024.0     39.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98250.0  98250.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85146.0  85146.0      5.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37252.0  37252.0      2.5  	dst2 = np.uint8(dst2)
    34         1      77481.0  77481.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     105334.0 105334.0      7.0  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       190      12158.0     64.0      0.8  	for variavel in corners2:
    39       189      31785.0    168.2      2.1  		array=np.array([variavel])
    40       189      13607.0     72.0      0.9  		matriz2.append(array)
    41         1       3879.0   3879.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     137359.0 137359.0      9.1  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3398.0   3398.0      0.2  	matches = bf.match(des1,des2)

