Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.613 MiB   48.613 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.355 MiB    0.742 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.477 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.711 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.051 MiB    1.340 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.527 MiB    0.477 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.715 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.715 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.801 MiB    0.086 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.801 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.824 MiB    0.023 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.824 MiB    0.000 MiB   	matriz1=[]
    20   51.824 MiB    0.000 MiB   	for variavel in corners1:
    21   51.824 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.824 MiB    0.000 MiB   		matriz1.append(array)
    23   51.922 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.230 MiB    0.309 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.289 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.871 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.191 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.512 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.512 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.559 MiB    0.047 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.820 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.141 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.141 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.141 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.141 MiB    0.000 MiB   	matriz2=[]
    38   58.145 MiB    0.000 MiB   	for variavel in corners2:
    39   58.145 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.145 MiB    0.000 MiB   		matriz2.append(array)
    41   58.152 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.160 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.395 MiB    0.234 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.5337 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17336.0  17336.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        226.0    226.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3870.0   3870.0      0.3  	imagem1 = np.float32(img1)
    12         1      75443.0  75443.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12901.0  12901.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      12425.0  12425.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5117.0   5117.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11589.0  11589.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20957.0  20957.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3041.0     64.7      0.2  	for variavel in corners1:
    21        46       7691.0    167.2      0.5  		array=np.array([variavel])
    22        46       2860.0     62.2      0.2  		matriz1.append(array)
    23         1       1334.0   1334.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      18215.0  18215.0      1.2  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        179.0    179.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79123.0  79123.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      30381.0  30381.0      2.0  	imagem2 = np.float32(img2)
    30         1     628402.0 628402.0     41.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96849.0  96849.0      6.3  	dst2 = cv2.dilate(dst2,None)
    32         1      85237.0  85237.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37124.0  37124.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76869.0  76869.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     105158.0 105158.0      6.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       190      13178.0     69.4      0.9  	for variavel in corners2:
    39       189      32623.0    172.6      2.1  		array=np.array([variavel])
    40       189      12810.0     67.8      0.8  		matriz2.append(array)
    41         1       4165.0   4165.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     134802.0 134802.0      8.8  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3519.0   3519.0      0.2  	matches = bf.match(des1,des2)

