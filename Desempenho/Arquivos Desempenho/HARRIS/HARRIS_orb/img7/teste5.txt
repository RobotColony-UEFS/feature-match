Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.891 MiB   48.891 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.797 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.918 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.152 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.500 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.887 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.188 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.188 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.375 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.375 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.375 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.375 MiB    0.000 MiB   	matriz1=[]
    20   52.375 MiB    0.000 MiB   	for variavel in corners1:
    21   52.375 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.375 MiB    0.000 MiB   		matriz1.append(array)
    23   52.441 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.711 MiB    0.270 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.711 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.293 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.613 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.934 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.934 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.934 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.195 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.516 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.516 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.516 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.516 MiB    0.000 MiB   	matriz2=[]
    38   58.520 MiB    0.000 MiB   	for variavel in corners2:
    39   58.520 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.520 MiB    0.000 MiB   		matriz2.append(array)
    41   58.523 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.531 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.805 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.43582 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17219.0  17219.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        239.0    239.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4697.0   4697.0      0.3  	imagem1 = np.float32(img1)
    12         1      75518.0  75518.0      5.3  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13238.0  13238.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12436.0  12436.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4891.0   4891.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11695.0  11695.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         88.0     88.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21210.0  21210.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3329.0     70.8      0.2  	for variavel in corners1:
    21        46       9402.0    204.4      0.7  		array=np.array([variavel])
    22        46       2863.0     62.2      0.2  		matriz1.append(array)
    23         1       1345.0   1345.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16363.0  16363.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        179.0    179.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79549.0  79549.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27687.0  27687.0      1.9  	imagem2 = np.float32(img2)
    30         1     596237.0 596237.0     41.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      98322.0  98322.0      6.8  	dst2 = cv2.dilate(dst2,None)
    32         1      84327.0  84327.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38562.0  38562.0      2.7  	dst2 = np.uint8(dst2)
    34         1      75283.0  75283.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      73011.0  73011.0      5.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       145       9305.0     64.2      0.6  	for variavel in corners2:
    39       144      24853.0    172.6      1.7  		array=np.array([variavel])
    40       144       9199.0     63.9      0.6  		matriz2.append(array)
    41         1       3366.0   3366.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     118177.0 118177.0      8.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3032.0   3032.0      0.2  	matches = bf.match(des1,des2)

