Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.902 MiB   48.902 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.867 MiB    0.965 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.930 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.164 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.379 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.766 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.941 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.941 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.051 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.051 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.098 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.098 MiB    0.000 MiB   	matriz1=[]
    20   52.098 MiB    0.000 MiB   	for variavel in corners1:
    21   52.098 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.098 MiB    0.000 MiB   		matriz1.append(array)
    23   52.215 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.445 MiB    0.230 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.508 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.090 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.410 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.730 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.730 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.730 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.992 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.312 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.312 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.312 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.312 MiB    0.000 MiB   	matriz2=[]
    38   58.316 MiB    0.000 MiB   	for variavel in corners2:
    39   58.316 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.316 MiB    0.000 MiB   		matriz2.append(array)
    41   58.320 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.328 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.617 MiB    0.289 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.46636 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17209.0  17209.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        337.0    337.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3955.0   3955.0      0.3  	imagem1 = np.float32(img1)
    12         1      72894.0  72894.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13199.0  13199.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12392.0  12392.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5614.0   5614.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11448.0  11448.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         84.0     84.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21149.0  21149.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         65.0     65.0      0.0  	matriz1=[]
    20        47       3057.0     65.0      0.2  	for variavel in corners1:
    21        46       7380.0    160.4      0.5  		array=np.array([variavel])
    22        46       3902.0     84.8      0.3  		matriz1.append(array)
    23         1       1386.0   1386.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15668.0  15668.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        337.0    337.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      80407.0  80407.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26721.0  26721.0      1.8  	imagem2 = np.float32(img2)
    30         1     614615.0 614615.0     41.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96686.0  96686.0      6.6  	dst2 = cv2.dilate(dst2,None)
    32         1      85927.0  85927.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37517.0  37517.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76165.0  76165.0      5.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      75092.0  75092.0      5.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       145       9248.0     63.8      0.6  	for variavel in corners2:
    39       144      22884.0    158.9      1.6  		array=np.array([variavel])
    40       144       8974.0     62.3      0.6  		matriz2.append(array)
    41         1       3032.0   3032.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     135981.0 135981.0      9.3  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       2893.0   2893.0      0.2  	matches = bf.match(des1,des2)

