Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.758 MiB   48.758 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.574 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.637 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.871 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.156 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.586 MiB    0.430 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.773 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.773 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.871 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.871 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.906 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.906 MiB    0.000 MiB   	matriz1=[]
    20   51.906 MiB    0.000 MiB   	for variavel in corners1:
    21   51.906 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.906 MiB    0.000 MiB   		matriz1.append(array)
    23   52.012 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.254 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.254 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.836 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.156 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.477 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.477 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.477 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.738 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.059 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.059 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.059 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.059 MiB    0.000 MiB   	matriz2=[]
    38   58.062 MiB    0.000 MiB   	for variavel in corners2:
    39   58.062 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.062 MiB    0.000 MiB   		matriz2.append(array)
    41   58.066 MiB    0.004 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.074 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.359 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.5037 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17250.0  17250.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        225.0    225.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3909.0   3909.0      0.3  	imagem1 = np.float32(img1)
    12         1      76332.0  76332.0      5.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13345.0  13345.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12213.0  12213.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5090.0   5090.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11783.0  11783.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         93.0     93.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21109.0  21109.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         60.0     60.0      0.0  	matriz1=[]
    20        47       3118.0     66.3      0.2  	for variavel in corners1:
    21        46       9296.0    202.1      0.6  		array=np.array([variavel])
    22        46       2938.0     63.9      0.2  		matriz1.append(array)
    23         1       1644.0   1644.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16392.0  16392.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        178.0    178.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79281.0  79281.0      5.3  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28158.0  28158.0      1.9  	imagem2 = np.float32(img2)
    30         1     640872.0 640872.0     42.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97567.0  97567.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      84859.0  84859.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37421.0  37421.0      2.5  	dst2 = np.uint8(dst2)
    34         1      76270.0  76270.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         86.0     86.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      76290.0  76290.0      5.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       145      12205.0     84.2      0.8  	for variavel in corners2:
    39       144      23958.0    166.4      1.6  		array=np.array([variavel])
    40       144       9493.0     65.9      0.6  		matriz2.append(array)
    41         1       3029.0   3029.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     136067.0 136067.0      9.0  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3112.0   3112.0      0.2  	matches = bf.match(des1,des2)

