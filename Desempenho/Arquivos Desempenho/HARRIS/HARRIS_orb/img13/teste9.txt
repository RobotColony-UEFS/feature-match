Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.926 MiB   48.926 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.812 MiB    0.887 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.934 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.168 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.516 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.906 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.145 MiB    0.238 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.145 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.270 MiB    0.125 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.270 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.270 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.270 MiB    0.000 MiB   	matriz1=[]
    20   52.270 MiB    0.000 MiB   	for variavel in corners1:
    21   52.270 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.270 MiB    0.000 MiB   		matriz1.append(array)
    23   52.336 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.613 MiB    0.277 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.613 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.195 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.516 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.836 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.836 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.836 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.098 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.418 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.418 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.418 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.418 MiB    0.000 MiB   	matriz2=[]
    38   58.422 MiB    0.000 MiB   	for variavel in corners2:
    39   58.422 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.422 MiB    0.000 MiB   		matriz2.append(array)
    41   58.430 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.438 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.711 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.52772 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17062.0  17062.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        234.0    234.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4053.0   4053.0      0.3  	imagem1 = np.float32(img1)
    12         1      73130.0  73130.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13164.0  13164.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12232.0  12232.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5192.0   5192.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12391.0  12391.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         90.0     90.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20828.0  20828.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       4497.0     95.7      0.3  	for variavel in corners1:
    21        46       8019.0    174.3      0.5  		array=np.array([variavel])
    22        46       2964.0     64.4      0.2  		matriz1.append(array)
    23         1       1413.0   1413.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15360.0  15360.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        181.0    181.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78014.0  78014.0      5.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28143.0  28143.0      1.8  	imagem2 = np.float32(img2)
    30         1     622239.0 622239.0     40.7  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97481.0  97481.0      6.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85614.0  85614.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38110.0  38110.0      2.5  	dst2 = np.uint8(dst2)
    34         1      75430.0  75430.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         77.0     77.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     112841.0 112841.0      7.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       180      11774.0     65.4      0.8  	for variavel in corners2:
    39       179      30739.0    171.7      2.0  		array=np.array([variavel])
    40       179      13141.0     73.4      0.9  		matriz2.append(array)
    41         1       3603.0   3603.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     136244.0 136244.0      8.9  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3350.0   3350.0      0.2  	matches = bf.match(des1,des2)

