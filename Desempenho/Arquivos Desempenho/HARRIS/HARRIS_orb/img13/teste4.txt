Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.750 MiB   48.750 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.719 MiB    0.969 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.781 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.016 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.281 MiB    1.266 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.664 MiB    0.383 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.965 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.965 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.148 MiB    0.184 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.148 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.211 MiB    0.062 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.211 MiB    0.000 MiB   	matriz1=[]
    20   52.211 MiB    0.000 MiB   	for variavel in corners1:
    21   52.211 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.211 MiB    0.000 MiB   		matriz1.append(array)
    23   52.336 MiB    0.125 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.602 MiB    0.266 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.602 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.184 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.504 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.824 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.824 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.824 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.086 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.406 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.406 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.406 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.406 MiB    0.000 MiB   	matriz2=[]
    38   58.410 MiB    0.000 MiB   	for variavel in corners2:
    39   58.410 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.410 MiB    0.000 MiB   		matriz2.append(array)
    41   58.418 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.426 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.695 MiB    0.270 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.53552 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      19193.0  19193.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        339.0    339.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3843.0   3843.0      0.3  	imagem1 = np.float32(img1)
    12         1      73247.0  73247.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14303.0  14303.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      14034.0  14034.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4930.0   4930.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11713.0  11713.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21751.0  21751.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3061.0     65.1      0.2  	for variavel in corners1:
    21        46       7423.0    161.4      0.5  		array=np.array([variavel])
    22        46       2851.0     62.0      0.2  		matriz1.append(array)
    23         1       1443.0   1443.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16590.0  16590.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        178.0    178.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78378.0  78378.0      5.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      28026.0  28026.0      1.8  	imagem2 = np.float32(img2)
    30         1     627912.0 627912.0     40.9  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97148.0  97148.0      6.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84003.0  84003.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      39090.0  39090.0      2.5  	dst2 = np.uint8(dst2)
    34         1      76380.0  76380.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     112140.0 112140.0      7.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         55.0     55.0      0.0  	matriz2=[]
    38       180      11810.0     65.6      0.8  	for variavel in corners2:
    39       179      30505.0    170.4      2.0  		array=np.array([variavel])
    40       179      11019.0     61.6      0.7  		matriz2.append(array)
    41         1       5387.0   5387.0      0.4  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     134937.0 134937.0      8.8  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3606.0   3606.0      0.2  	matches = bf.match(des1,des2)

