Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.801 MiB   48.801 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.617 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.680 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.914 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.199 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.629 MiB    0.430 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.816 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.816 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.914 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.914 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.949 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.949 MiB    0.000 MiB   	matriz1=[]
    20   51.949 MiB    0.000 MiB   	for variavel in corners1:
    21   51.949 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.949 MiB    0.000 MiB   		matriz1.append(array)
    23   52.055 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.297 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.297 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.879 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.199 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.520 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.520 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.520 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.781 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.102 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.102 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.102 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.102 MiB    0.000 MiB   	matriz2=[]
    38   58.105 MiB    0.000 MiB   	for variavel in corners2:
    39   58.105 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.105 MiB    0.000 MiB   		matriz2.append(array)
    41   58.113 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.121 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.406 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.53256 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18393.0  18393.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        226.0    226.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3846.0   3846.0      0.3  	imagem1 = np.float32(img1)
    12         1      75608.0  75608.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      12966.0  12966.0      0.8  	dst1 = cv2.dilate(dst1,None)
    14         1      13221.0  13221.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5216.0   5216.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11559.0  11559.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      20961.0  20961.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         54.0     54.0      0.0  	matriz1=[]
    20        47       3375.0     71.8      0.2  	for variavel in corners1:
    21        46       7522.0    163.5      0.5  		array=np.array([variavel])
    22        46       2893.0     62.9      0.2  		matriz1.append(array)
    23         1       1542.0   1542.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15360.0  15360.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        180.0    180.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79802.0  79802.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26699.0  26699.0      1.7  	imagem2 = np.float32(img2)
    30         1     629979.0 629979.0     41.1  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97082.0  97082.0      6.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84490.0  84490.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38102.0  38102.0      2.5  	dst2 = np.uint8(dst2)
    34         1      77276.0  77276.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         81.0     81.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     112270.0 112270.0      7.3  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       180      11624.0     64.6      0.8  	for variavel in corners2:
    39       179      29504.0    164.8      1.9  		array=np.array([variavel])
    40       179      11243.0     62.8      0.7  		matriz2.append(array)
    41         1       3705.0   3705.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     134166.0 134166.0      8.8  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3464.0   3464.0      0.2  	matches = bf.match(des1,des2)

