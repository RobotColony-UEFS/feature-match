Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.797 MiB   48.797 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.613 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.676 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.910 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.195 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.621 MiB    0.426 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.809 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.809 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.906 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.906 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.941 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.941 MiB    0.000 MiB   	matriz1=[]
    20   51.941 MiB    0.000 MiB   	for variavel in corners1:
    21   51.941 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.941 MiB    0.000 MiB   		matriz1.append(array)
    23   52.047 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.289 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.289 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.871 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.191 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.512 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.512 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.512 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.773 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.094 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.094 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.094 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.094 MiB    0.000 MiB   	matriz2=[]
    38   58.098 MiB    0.000 MiB   	for variavel in corners2:
    39   58.098 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.098 MiB    0.000 MiB   		matriz2.append(array)
    41   58.105 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.113 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.398 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.54139 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      18515.0  18515.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        375.0    375.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3954.0   3954.0      0.3  	imagem1 = np.float32(img1)
    12         1      74069.0  74069.0      4.8  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      14547.0  14547.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12393.0  12393.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5250.0   5250.0      0.3  	dst1 = np.uint8(dst1)
    16         1      12658.0  12658.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         83.0     83.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21034.0  21034.0      1.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3061.0     65.1      0.2  	for variavel in corners1:
    21        46       7315.0    159.0      0.5  		array=np.array([variavel])
    22        46       2859.0     62.2      0.2  		matriz1.append(array)
    23         1       1296.0   1296.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15277.0  15277.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        301.0    301.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      79613.0  79613.0      5.2  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26734.0  26734.0      1.7  	imagem2 = np.float32(img2)
    30         1     636302.0 636302.0     41.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97101.0  97101.0      6.3  	dst2 = cv2.dilate(dst2,None)
    32         1      84722.0  84722.0      5.5  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38412.0  38412.0      2.5  	dst2 = np.uint8(dst2)
    34         1      75541.0  75541.0      4.9  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         80.0     80.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     113648.0 113648.0      7.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         54.0     54.0      0.0  	matriz2=[]
    38       180      12991.0     72.2      0.8  	for variavel in corners2:
    39       179      28397.0    158.6      1.8  		array=np.array([variavel])
    40       179      11011.0     61.5      0.7  		matriz2.append(array)
    41         1       3722.0   3722.0      0.2  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     136681.0 136681.0      8.9  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3334.0   3334.0      0.2  	matches = bf.match(des1,des2)

