Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   49.223 MiB   49.223 MiB   @profile
     7                             def HARRIS_orb(img):
     8   50.145 MiB    0.922 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   50.207 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.441 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.652 MiB    1.211 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   52.043 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.227 MiB    0.184 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.227 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.387 MiB    0.160 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.387 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.438 MiB    0.051 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.438 MiB    0.000 MiB   	matriz1=[]
    20   52.438 MiB    0.000 MiB   	for variavel in corners1:
    21   52.438 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.438 MiB    0.000 MiB   		matriz1.append(array)
    23   52.559 MiB    0.121 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.801 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.801 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.383 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.703 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.023 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.023 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.023 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.285 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.605 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.605 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.605 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.605 MiB    0.000 MiB   	matriz2=[]
    38   58.609 MiB    0.000 MiB   	for variavel in corners2:
    39   58.609 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.609 MiB    0.000 MiB   		matriz2.append(array)
    41   58.617 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.625 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.918 MiB    0.293 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.53236 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17283.0  17283.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        228.0    228.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3952.0   3952.0      0.3  	imagem1 = np.float32(img1)
    12         1      75872.0  75872.0      5.0  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13118.0  13118.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12475.0  12475.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4925.0   4925.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11703.0  11703.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22958.0  22958.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         96.0     96.0      0.0  	matriz1=[]
    20        47       3169.0     67.4      0.2  	for variavel in corners1:
    21        46       7451.0    162.0      0.5  		array=np.array([variavel])
    22        46       2820.0     61.3      0.2  		matriz1.append(array)
    23         1       1375.0   1375.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15371.0  15371.0      1.0  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        181.0    181.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      82125.0  82125.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26634.0  26634.0      1.7  	imagem2 = np.float32(img2)
    30         1     624523.0 624523.0     40.8  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97885.0  97885.0      6.4  	dst2 = cv2.dilate(dst2,None)
    32         1      85673.0  85673.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37242.0  37242.0      2.4  	dst2 = np.uint8(dst2)
    34         1      76364.0  76364.0      5.0  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         83.0     83.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1     112994.0 112994.0      7.4  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         56.0     56.0      0.0  	matriz2=[]
    38       180      11350.0     63.1      0.7  	for variavel in corners2:
    39       179      31084.0    173.7      2.0  		array=np.array([variavel])
    40       179      11009.0     61.5      0.7  		matriz2.append(array)
    41         1       3866.0   3866.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     134773.0 134773.0      8.8  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3635.0   3635.0      0.2  	matches = bf.match(des1,des2)

