Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.758 MiB   48.758 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.574 MiB    0.816 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.637 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.871 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.156 MiB    1.285 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.586 MiB    0.430 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.773 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.773 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.871 MiB    0.098 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.871 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.906 MiB    0.035 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.906 MiB    0.000 MiB   	matriz1=[]
    20   51.906 MiB    0.000 MiB   	for variavel in corners1:
    21   51.906 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.906 MiB    0.000 MiB   		matriz1.append(array)
    23   52.012 MiB    0.105 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.254 MiB    0.242 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.254 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.836 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.156 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.477 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.477 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.477 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.738 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.059 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.059 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.059 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.059 MiB    0.000 MiB   	matriz2=[]
    38   58.062 MiB    0.000 MiB   	for variavel in corners2:
    39   58.062 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.062 MiB    0.000 MiB   		matriz2.append(array)
    41   58.070 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.078 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.363 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.44376 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17255.0  17255.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        339.0    339.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4011.0   4011.0      0.3  	imagem1 = np.float32(img1)
    12         1      75583.0  75583.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13031.0  13031.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12788.0  12788.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5156.0   5156.0      0.4  	dst1 = np.uint8(dst1)
    16         1      11594.0  11594.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         87.0     87.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23569.0  23569.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         57.0     57.0      0.0  	matriz1=[]
    20        47       3009.0     64.0      0.2  	for variavel in corners1:
    21        46       7481.0    162.6      0.5  		array=np.array([variavel])
    22        46       2837.0     61.7      0.2  		matriz1.append(array)
    23         1       1256.0   1256.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16498.0  16498.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        185.0    185.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78526.0  78526.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27702.0  27702.0      1.9  	imagem2 = np.float32(img2)
    30         1     576834.0 576834.0     40.0  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      96526.0  96526.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      85292.0  85292.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      38108.0  38108.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76011.0  76011.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         78.0     78.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      88510.0  88510.0      6.1  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         60.0     60.0      0.0  	matriz2=[]
    38       189      13158.0     69.6      0.9  	for variavel in corners2:
    39       188      30712.0    163.4      2.1  		array=np.array([variavel])
    40       188      11779.0     62.7      0.8  		matriz2.append(array)
    41         1       4506.0   4506.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     117982.0 117982.0      8.2  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3241.0   3241.0      0.2  	matches = bf.match(des1,des2)

