Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.648 MiB   48.648 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.453 MiB    0.805 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.574 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   49.809 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.098 MiB    1.289 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.570 MiB    0.473 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.758 MiB    0.188 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.758 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   51.848 MiB    0.090 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   51.848 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   51.875 MiB    0.027 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   51.875 MiB    0.000 MiB   	matriz1=[]
    20   51.875 MiB    0.000 MiB   	for variavel in corners1:
    21   51.875 MiB    0.000 MiB   		array=np.array([variavel])
    22   51.875 MiB    0.000 MiB   		matriz1.append(array)
    23   51.973 MiB    0.098 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.344 MiB    0.371 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.344 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   52.926 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.246 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.566 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.566 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.566 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   55.828 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.148 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.148 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.148 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.148 MiB    0.000 MiB   	matriz2=[]
    38   58.152 MiB    0.000 MiB   	for variavel in corners2:
    39   58.152 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.152 MiB    0.000 MiB   		matriz2.append(array)
    41   58.160 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.168 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.465 MiB    0.297 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.44796 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17145.0  17145.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        336.0    336.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4119.0   4119.0      0.3  	imagem1 = np.float32(img1)
    12         1      75018.0  75018.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13002.0  13002.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12573.0  12573.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5064.0   5064.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11578.0  11578.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         86.0     86.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      23566.0  23566.0      1.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         59.0     59.0      0.0  	matriz1=[]
    20        47       3046.0     64.8      0.2  	for variavel in corners1:
    21        46       7407.0    161.0      0.5  		array=np.array([variavel])
    22        46       2956.0     64.3      0.2  		matriz1.append(array)
    23         1       1233.0   1233.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15463.0  15463.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        182.0    182.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77869.0  77869.0      5.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27188.0  27188.0      1.9  	imagem2 = np.float32(img2)
    30         1     584181.0 584181.0     40.3  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97303.0  97303.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      87760.0  87760.0      6.1  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37213.0  37213.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76309.0  76309.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      85371.0  85371.0      5.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         58.0     58.0      0.0  	matriz2=[]
    38       189      12242.0     64.8      0.8  	for variavel in corners2:
    39       188      30637.0    163.0      2.1  		array=np.array([variavel])
    40       188      11979.0     63.7      0.8  		matriz2.append(array)
    41         1       3894.0   3894.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     119897.0 119897.0      8.3  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3147.0   3147.0      0.2  	matches = bf.match(des1,des2)

