Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.992 MiB   48.992 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.922 MiB    0.930 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.984 MiB    0.062 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.219 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.434 MiB    1.215 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.820 MiB    0.387 MiB   	dst1 = cv2.dilate(dst1,None)
    14   51.996 MiB    0.176 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   51.996 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.105 MiB    0.109 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.105 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.152 MiB    0.047 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.152 MiB    0.000 MiB   	matriz1=[]
    20   52.152 MiB    0.000 MiB   	for variavel in corners1:
    21   52.152 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.152 MiB    0.000 MiB   		matriz1.append(array)
    23   52.270 MiB    0.117 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.500 MiB    0.230 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.562 MiB    0.062 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.145 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.465 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   57.785 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   57.785 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   57.785 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.047 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.367 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.367 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.367 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.367 MiB    0.000 MiB   	matriz2=[]
    38   58.371 MiB    0.000 MiB   	for variavel in corners2:
    39   58.371 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.371 MiB    0.000 MiB   		matriz2.append(array)
    41   58.379 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.387 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.676 MiB    0.289 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.44577 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      16864.0  16864.0      1.2  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        245.0    245.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       4947.0   4947.0      0.3  	imagem1 = np.float32(img1)
    12         1      74484.0  74484.0      5.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13571.0  13571.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      13149.0  13149.0      0.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       4979.0   4979.0      0.3  	dst1 = np.uint8(dst1)
    16         1      13196.0  13196.0      0.9  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         81.0     81.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      21662.0  21662.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         58.0     58.0      0.0  	matriz1=[]
    20        47       3135.0     66.7      0.2  	for variavel in corners1:
    21        46       7429.0    161.5      0.5  		array=np.array([variavel])
    22        46       2857.0     62.1      0.2  		matriz1.append(array)
    23         1       1353.0   1353.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      15622.0  15622.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        293.0    293.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      78814.0  78814.0      5.5  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      26560.0  26560.0      1.8  	imagem2 = np.float32(img2)
    30         1     580956.0 580956.0     40.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97001.0  97001.0      6.7  	dst2 = cv2.dilate(dst2,None)
    32         1      85095.0  85095.0      5.9  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37511.0  37511.0      2.6  	dst2 = np.uint8(dst2)
    34         1      76524.0  76524.0      5.3  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         82.0     82.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      88947.0  88947.0      6.2  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         62.0     62.0      0.0  	matriz2=[]
    38       189      12189.0     64.5      0.8  	for variavel in corners2:
    39       188      31574.0    167.9      2.2  		array=np.array([variavel])
    40       188      12201.0     64.9      0.8  		matriz2.append(array)
    41         1       4024.0   4024.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     117073.0 117073.0      8.1  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3233.0   3233.0      0.2  	matches = bf.match(des1,des2)

