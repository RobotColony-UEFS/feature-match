Filename: HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   48.957 MiB   48.957 MiB   @profile
     7                             def HARRIS_orb(img):
     8   49.863 MiB    0.906 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9   49.984 MiB    0.121 MiB   	orb = cv2.ORB_create()
    10                             
    11   50.219 MiB    0.234 MiB   	imagem1 = np.float32(img1)
    12   51.566 MiB    1.348 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13   51.957 MiB    0.391 MiB   	dst1 = cv2.dilate(dst1,None)
    14   52.258 MiB    0.301 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15   52.258 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    16   52.445 MiB    0.188 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17   52.445 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18   52.445 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19   52.445 MiB    0.000 MiB   	matriz1=[]
    20   52.445 MiB    0.000 MiB   	for variavel in corners1:
    21   52.445 MiB    0.000 MiB   		array=np.array([variavel])
    22   52.445 MiB    0.000 MiB   		matriz1.append(array)
    23   52.512 MiB    0.066 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   52.781 MiB    0.270 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   52.781 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   53.363 MiB    0.582 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29   55.684 MiB    2.320 MiB   	imagem2 = np.float32(img2)
    30   58.004 MiB    2.320 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31   58.004 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32   58.004 MiB    0.000 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33   56.266 MiB    0.000 MiB   	dst2 = np.uint8(dst2)
    34   58.586 MiB    2.320 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35   58.586 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36   58.586 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37   58.586 MiB    0.000 MiB   	matriz2=[]
    38   58.590 MiB    0.000 MiB   	for variavel in corners2:
    39   58.590 MiB    0.004 MiB   		array=np.array([variavel])
    40   58.590 MiB    0.000 MiB   		matriz2.append(array)
    41   58.598 MiB    0.008 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42   58.605 MiB    0.008 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44   58.879 MiB    0.273 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.51306 s
File: HARRIS_orb.py
Function: HARRIS_orb at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def HARRIS_orb(img):
     8         1      17047.0  17047.0      1.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     9         1        337.0    337.0      0.0  	orb = cv2.ORB_create()
    10                                           
    11         1       3829.0   3829.0      0.3  	imagem1 = np.float32(img1)
    12         1      74686.0  74686.0      4.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    13         1      13885.0  13885.0      0.9  	dst1 = cv2.dilate(dst1,None)
    14         1      12548.0  12548.0      0.8  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    15         1       5002.0   5002.0      0.3  	dst1 = np.uint8(dst1)
    16         1      11550.0  11550.0      0.8  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    17         1         89.0     89.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    18         1      22255.0  22255.0      1.5  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    19         1         56.0     56.0      0.0  	matriz1=[]
    20        47       3509.0     74.7      0.2  	for variavel in corners1:
    21        46       8416.0    183.0      0.6  		array=np.array([variavel])
    22        46       2892.0     62.9      0.2  		matriz1.append(array)
    23         1       1545.0   1545.0      0.1  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      16384.0  16384.0      1.1  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1        178.0    178.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1      77464.0  77464.0      5.1  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    29         1      27778.0  27778.0      1.8  	imagem2 = np.float32(img2)
    30         1     627726.0 627726.0     41.5  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      97684.0  97684.0      6.5  	dst2 = cv2.dilate(dst2,None)
    32         1      85058.0  85058.0      5.6  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      37337.0  37337.0      2.5  	dst2 = np.uint8(dst2)
    34         1      77354.0  77354.0      5.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         79.0     79.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      89186.0  89186.0      5.9  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         57.0     57.0      0.0  	matriz2=[]
    38       189      12015.0     63.6      0.8  	for variavel in corners2:
    39       188      32541.0    173.1      2.2  		array=np.array([variavel])
    40       188      11559.0     61.5      0.8  		matriz2.append(array)
    41         1       4023.0   4023.0      0.3  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1     135661.0 135661.0      9.0  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       3325.0   3325.0      0.2  	matches = bf.match(des1,des2)

