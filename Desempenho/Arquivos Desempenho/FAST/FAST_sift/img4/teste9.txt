Filename: FAST_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   48.566 MiB   48.566 MiB   @profile
     8                             def FAST_sift(img):
     9   49.266 MiB    0.699 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                             
    11   49.328 MiB    0.062 MiB   	fast = cv2.FastFeatureDetector_create(threshold=25)
    12   49.449 MiB    0.121 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    13   49.570 MiB    0.121 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                             
    15   49.844 MiB    0.273 MiB   	kp1 = fast.detect(img1,None)
    16   54.730 MiB    4.887 MiB   	kp1, des1 = sift.compute(img1, kp1)
    17                             
    18   54.730 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                             
    20   54.770 MiB    0.039 MiB   	kp2 = fast.detect(img2,None)
    21   55.699 MiB    0.930 MiB   	kp2, des2 = sift.compute(img2, kp2)
    22   56.031 MiB    0.332 MiB   	matches = bf.match(des1,des2)


Wrote profile results to FAST_sift.py.lprof
Timer unit: 1e-06 s

Total time: 19.0435 s
File: FAST_sift.py
Function: FAST_sift at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def FAST_sift(img):
     9         1      17149.0  17149.0      0.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                                           
    11         1        390.0    390.0      0.0  	fast = cv2.FastFeatureDetector_create(threshold=25)
    12         1        289.0    289.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    13         1        227.0    227.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                                           
    15         1      11843.0  11843.0      0.1  	kp1 = fast.detect(img1,None)
    16         1    3088330.0 3088330.0     16.2  	kp1, des1 = sift.compute(img1, kp1)
    17                                           
    18         1      76680.0  76680.0      0.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                                           
    20         1      47423.0  47423.0      0.2  	kp2 = fast.detect(img2,None)
    21         1    9216530.0 9216530.0     48.4  	kp2, des2 = sift.compute(img2, kp2)
    22         1    6584632.0 6584632.0     34.6  	matches = bf.match(des1,des2)

