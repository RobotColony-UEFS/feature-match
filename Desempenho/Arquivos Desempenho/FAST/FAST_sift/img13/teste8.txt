Filename: FAST_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   48.855 MiB   48.855 MiB   @profile
     8                             def FAST_sift(img):
     9   49.707 MiB    0.852 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                             
    11   49.770 MiB    0.062 MiB   	fast = cv2.FastFeatureDetector_create(threshold=25)
    12   49.832 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    13   49.891 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                             
    15   50.219 MiB    0.328 MiB   	kp1 = fast.detect(img1,None)
    16   55.133 MiB    4.914 MiB   	kp1, des1 = sift.compute(img1, kp1)
    17                             
    18   55.133 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                             
    20   55.164 MiB    0.031 MiB   	kp2 = fast.detect(img2,None)
    21   55.992 MiB    0.828 MiB   	kp2, des2 = sift.compute(img2, kp2)
    22   56.277 MiB    0.285 MiB   	matches = bf.match(des1,des2)


Wrote profile results to FAST_sift.py.lprof
Timer unit: 1e-06 s

Total time: 17.7704 s
File: FAST_sift.py
Function: FAST_sift at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def FAST_sift(img):
     9         1      18118.0  18118.0      0.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                                           
    11         1        357.0    357.0      0.0  	fast = cv2.FastFeatureDetector_create(threshold=25)
    12         1        288.0    288.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    13         1        214.0    214.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                                           
    15         1      11578.0  11578.0      0.1  	kp1 = fast.detect(img1,None)
    16         1    3061345.0 3061345.0     17.2  	kp1, des1 = sift.compute(img1, kp1)
    17                                           
    18         1      74090.0  74090.0      0.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                                           
    20         1      44965.0  44965.0      0.3  	kp2 = fast.detect(img2,None)
    21         1    8687547.0 8687547.0     48.9  	kp2, des2 = sift.compute(img2, kp2)
    22         1    5871933.0 5871933.0     33.0  	matches = bf.match(des1,des2)

