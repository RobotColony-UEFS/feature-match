Filename: FAST_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     7   48.684 MiB   48.684 MiB   @profile
     8                             def FAST_sift(img):
     9   49.531 MiB    0.848 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                             
    11   49.594 MiB    0.062 MiB   	fast = cv2.FastFeatureDetector_create(threshold=25)
    12   49.656 MiB    0.062 MiB   	sift = cv2.xfeatures2d.SIFT_create()
    13   49.715 MiB    0.059 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                             
    15   50.051 MiB    0.336 MiB   	kp1 = fast.detect(img1,None)
    16   54.906 MiB    4.855 MiB   	kp1, des1 = sift.compute(img1, kp1)
    17                             
    18   54.906 MiB    0.000 MiB   	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                             
    20   54.949 MiB    0.043 MiB   	kp2 = fast.detect(img2,None)
    21   55.914 MiB    0.965 MiB   	kp2, des2 = sift.compute(img2, kp2)
    22   56.203 MiB    0.289 MiB   	matches = bf.match(des1,des2)


Wrote profile results to FAST_sift.py.lprof
Timer unit: 1e-06 s

Total time: 19.5742 s
File: FAST_sift.py
Function: FAST_sift at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def FAST_sift(img):
     9         1      17151.0  17151.0      0.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
    10                                           
    11         1        258.0    258.0      0.0  	fast = cv2.FastFeatureDetector_create(threshold=25)
    12         1        675.0    675.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
    13         1        317.0    317.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    14                                           
    15         1      12560.0  12560.0      0.1  	kp1 = fast.detect(img1,None)
    16         1    3076819.0 3076819.0     15.7  	kp1, des1 = sift.compute(img1, kp1)
    17                                           
    18         1      75633.0  75633.0      0.4  	img2 = cv2.imread("../imgTeste/img"+str(img)+".jpg", 0)
    19                                           
    20         1      48072.0  48072.0      0.2  	kp2 = fast.detect(img2,None)
    21         1    9476308.0 9476308.0     48.4  	kp2, des2 = sift.compute(img2, kp2)
    22         1    6866366.0 6866366.0     35.1  	matches = bf.match(des1,des2)

