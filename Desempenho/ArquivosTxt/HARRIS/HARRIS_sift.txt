Filename: HARRIS/HARRIS_sift.py

Line #    Mem usage    Increment   Line Contents
================================================
     5   58.340 MiB   58.340 MiB   @profile
     6                             def HARRIS_sift():
     7   59.930 MiB    1.590 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     8   59.930 MiB    0.000 MiB   	sift = cv2.xfeatures2d.SIFT_create()
     9                             
    10   62.109 MiB    2.180 MiB   	imagem1 = np.float32(img1)
    11   65.531 MiB    3.422 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    12   66.285 MiB    0.754 MiB   	dst1 = cv2.dilate(dst1,None)
    13   66.539 MiB    0.254 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    14   66.539 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    15   66.539 MiB    0.000 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    16   66.539 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    17   66.539 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    18   66.539 MiB    0.000 MiB   	matriz1=[]
    19   67.148 MiB    0.000 MiB   	for variavel in corners1:
    20   67.148 MiB    0.000 MiB   		array=np.array([variavel])
    21   67.148 MiB    0.609 MiB   		matriz1.append(array)
    22                             
    23   67.148 MiB    0.000 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   68.387 MiB    1.238 MiB   	kp1, des1 = sift.compute(img1, kp1)
    25                             
    26   68.387 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27   77.723 MiB    9.336 MiB   	img2 = cv2.imread("../imgTeste/img1.jpg", 0)	
    28  114.586 MiB   36.863 MiB   	imagem2 = np.float32(img2)
    29  151.871 MiB   37.285 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    30  151.871 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    31  152.422 MiB    0.551 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    32  122.176 MiB  -30.246 MiB   	dst2 = np.uint8(dst2)
    33  159.320 MiB   37.145 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    34  159.320 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    35  159.320 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    36  159.320 MiB    0.000 MiB   	matriz2=[]
    37  159.320 MiB    0.000 MiB   	for variavel in corners2:
    38  159.320 MiB    0.000 MiB   		array=np.array([variavel])
    39  159.320 MiB    0.000 MiB   		matriz2.append(array)
    40  159.574 MiB    0.254 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    41  169.203 MiB    9.629 MiB   	kp2, des2 = sift.compute(img2, kp2)
    42                             
    43  169.203 MiB    0.000 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_sift.py.lprof
Timer unit: 1e-06 s

Total time: 2.19323 s
File: HARRIS/HARRIS_sift.py
Function: HARRIS_sift at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           @profile
     6                                           def HARRIS_sift():
     7         1      29145.0  29145.0      1.3  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     8         1         21.0     21.0      0.0  	sift = cv2.xfeatures2d.SIFT_create()
     9                                           
    10         1       1633.0   1633.0      0.1  	imagem1 = np.float32(img1)
    11         1      25972.0  25972.0      1.2  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    12         1       2740.0   2740.0      0.1  	dst1 = cv2.dilate(dst1,None)
    13         1       6699.0   6699.0      0.3  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    14         1        596.0    596.0      0.0  	dst1 = np.uint8(dst1)
    15         1       9829.0   9829.0      0.4  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    16         1          8.0      8.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    17         1       8951.0   8951.0      0.4  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    18         1         11.0     11.0      0.0  	matriz1=[]
    19       234        529.0      2.3      0.0  	for variavel in corners1:
    20       233       1170.0      5.0      0.1  		array=np.array([variavel])
    21       233        567.0      2.4      0.0  		matriz1.append(array)
    22                                           
    23         1        155.0    155.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1      50671.0  50671.0      2.3  	kp1, des1 = sift.compute(img1, kp1)
    25                                           
    26         1        106.0    106.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    27         1     198964.0 198964.0      9.1  	img2 = cv2.imread("../imgTeste/img1.jpg", 0)	
    28         1      25469.0  25469.0      1.2  	imagem2 = np.float32(img2)
    29         1     402621.0 402621.0     18.4  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    30         1      48734.0  48734.0      2.2  	dst2 = cv2.dilate(dst2,None)
    31         1      29753.0  29753.0      1.4  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    32         1      18738.0  18738.0      0.9  	dst2 = np.uint8(dst2)
    33         1     169042.0 169042.0      7.7  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    34         1         10.0     10.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    35         1      58552.0  58552.0      2.7  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    36         1          5.0      5.0      0.0  	matriz2=[]
    37      1418       2663.0      1.9      0.1  	for variavel in corners2:
    38      1417       5021.0      3.5      0.2  		array=np.array([variavel])
    39      1417       2747.0      1.9      0.1  		matriz2.append(array)
    40         1       1057.0   1057.0      0.0  	kp2 = cv2.KeyPoint_convert(matriz2)
    41         1    1061246.0 1061246.0     48.4  	kp2, des2 = sift.compute(img2, kp2)
    42                                           
    43         1      29807.0  29807.0      1.4  	matches = bf.match(des1,des2)

