Filename: HARRIS/HARRIS_orb.py

Line #    Mem usage    Increment   Line Contents
================================================
     5   58.641 MiB   58.641 MiB   @profile
     6                             def HARRIS_orb():
     7   60.141 MiB    1.500 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     8   60.141 MiB    0.000 MiB   	orb = cv2.ORB_create()
     9                             
    10   62.258 MiB    2.117 MiB   	imagem1 = np.float32(img1)
    11   65.609 MiB    3.352 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    12   66.230 MiB    0.621 MiB   	dst1 = cv2.dilate(dst1,None)
    13   67.242 MiB    1.012 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    14   67.242 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    15   67.242 MiB    0.000 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    16   67.242 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    17   67.242 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    18   67.242 MiB    0.000 MiB   	matriz1=[]
    19   67.930 MiB    0.000 MiB   	for variavel in corners1:
    20   67.930 MiB    0.000 MiB   		array=np.array([variavel])
    21   67.930 MiB    0.688 MiB   		matriz1.append(array)
    22                             
    23   67.930 MiB    0.000 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    24   67.930 MiB    0.000 MiB   	kp1, des1 = orb.compute(img1, kp1)
    25                             
    26   67.930 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                             
    28   77.461 MiB    9.531 MiB   	img2 = cv2.imread("../imgTeste/img1.jpg", 0)	
    29  114.324 MiB   36.863 MiB   	imagem2 = np.float32(img2)
    30  151.609 MiB   37.285 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31  151.609 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    32  151.918 MiB    0.309 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33  122.758 MiB  -29.160 MiB   	dst2 = np.uint8(dst2)
    34  159.832 MiB   37.074 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35  159.832 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36  159.832 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37  159.832 MiB    0.000 MiB   	matriz2=[]
    38  159.832 MiB    0.000 MiB   	for variavel in corners2:
    39  159.832 MiB    0.000 MiB   		array=np.array([variavel])
    40  159.832 MiB    0.000 MiB   		matriz2.append(array)
    41  159.832 MiB    0.000 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    42  169.625 MiB    9.793 MiB   	kp2, des2 = orb.compute(img2, kp2)
    43                             
    44  169.625 MiB    0.000 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_orb.py.lprof
Timer unit: 1e-06 s

Total time: 1.41338 s
File: HARRIS/HARRIS_orb.py
Function: HARRIS_orb at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           @profile
     6                                           def HARRIS_orb():
     7         1      44249.0  44249.0      3.1  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     8         1         25.0     25.0      0.0  	orb = cv2.ORB_create()
     9                                           
    10         1       3013.0   3013.0      0.2  	imagem1 = np.float32(img1)
    11         1      26927.0  26927.0      1.9  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    12         1       4595.0   4595.0      0.3  	dst1 = cv2.dilate(dst1,None)
    13         1      27051.0  27051.0      1.9  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    14         1        646.0    646.0      0.0  	dst1 = np.uint8(dst1)
    15         1      10360.0  10360.0      0.7  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    16         1         11.0     11.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    17         1      13976.0  13976.0      1.0  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    18         1          8.0      8.0      0.0  	matriz1=[]
    19       234        735.0      3.1      0.1  	for variavel in corners1:
    20       233       3806.0     16.3      0.3  		array=np.array([variavel])
    21       233        703.0      3.0      0.0  		matriz1.append(array)
    22                                           
    23         1        536.0    536.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    24         1       5002.0   5002.0      0.4  	kp1, des1 = orb.compute(img1, kp1)
    25                                           
    26         1         42.0     42.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    27                                           
    28         1     271452.0 271452.0     19.2  	img2 = cv2.imread("../imgTeste/img1.jpg", 0)	
    29         1      41679.0  41679.0      2.9  	imagem2 = np.float32(img2)
    30         1     454753.0 454753.0     32.2  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    31         1      46916.0  46916.0      3.3  	dst2 = cv2.dilate(dst2,None)
    32         1      30448.0  30448.0      2.2  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    33         1      22669.0  22669.0      1.6  	dst2 = np.uint8(dst2)
    34         1     213809.0 213809.0     15.1  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    35         1         12.0     12.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    36         1      78413.0  78413.0      5.5  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    37         1         22.0     22.0      0.0  	matriz2=[]
    38      1418       3649.0      2.6      0.3  	for variavel in corners2:
    39      1417       7945.0      5.6      0.6  		array=np.array([variavel])
    40      1417       3566.0      2.5      0.3  		matriz2.append(array)
    41         1       1589.0   1589.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    42         1      86240.0  86240.0      6.1  	kp2, des2 = orb.compute(img2, kp2)
    43                                           
    44         1       8535.0   8535.0      0.6  	matches = bf.match(des1,des2)

