Filename: HARRIS/HARRIS_brisk.py

Line #    Mem usage    Increment   Line Contents
================================================
     5   58.613 MiB   58.613 MiB   @profile
     6                             def HARRIS_brisk():
     7   60.117 MiB    1.504 MiB   	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     8  105.410 MiB   45.293 MiB   	brisk = cv2.BRISK_create()
     9                             
    10  107.473 MiB    2.062 MiB   	imagem1 = np.float32(img1)
    11  110.715 MiB    3.242 MiB   	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    12  111.340 MiB    0.625 MiB   	dst1 = cv2.dilate(dst1,None)
    13  112.363 MiB    1.023 MiB   	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    14  112.363 MiB    0.000 MiB   	dst1 = np.uint8(dst1)
    15  112.363 MiB    0.000 MiB   	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    16  112.363 MiB    0.000 MiB   	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    17  112.363 MiB    0.000 MiB   	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    18  112.363 MiB    0.000 MiB   	matriz1=[]
    19  113.051 MiB    0.000 MiB   	for variavel in corners1:
    20  113.051 MiB    0.000 MiB   		array=np.array([variavel])
    21  113.051 MiB    0.688 MiB   		matriz1.append(array)
    22  113.051 MiB    0.000 MiB   	kp1=cv2.KeyPoint_convert(matriz1)
    23  113.711 MiB    0.660 MiB   	kp1, des1 = brisk.compute(img1, kp1)
    24                             
    25  113.711 MiB    0.000 MiB   	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    26                             
    27  123.180 MiB    9.469 MiB   	img2 = cv2.imread("../imgTeste/img1.jpg", 0)	
    28  160.043 MiB   36.863 MiB   	imagem2 = np.float32(img2)
    29  197.328 MiB   37.285 MiB   	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    30  197.328 MiB    0.000 MiB   	dst2 = cv2.dilate(dst2,None)
    31  196.594 MiB   -0.734 MiB   	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    32  166.840 MiB  -29.754 MiB   	dst2 = np.uint8(dst2)
    33  203.914 MiB   37.074 MiB   	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    34  203.914 MiB    0.000 MiB   	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    35  203.914 MiB    0.000 MiB   	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    36  203.914 MiB    0.000 MiB   	matriz2=[]
    37  203.914 MiB    0.000 MiB   	for variavel in corners2:
    38  203.914 MiB    0.000 MiB   		array=np.array([variavel])
    39  203.914 MiB    0.000 MiB   		matriz2.append(array)
    40  203.914 MiB    0.000 MiB   	kp2 = cv2.KeyPoint_convert(matriz2)
    41  204.086 MiB    0.172 MiB   	kp2, des2 = brisk.compute(img2, kp2)
    42                             
    43  204.086 MiB    0.000 MiB   	matches = bf.match(des1,des2)


Wrote profile results to HARRIS_brisk.py.lprof
Timer unit: 1e-06 s

Total time: 1.65968 s
File: HARRIS/HARRIS_brisk.py
Function: HARRIS_brisk at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           @profile
     6                                           def HARRIS_brisk():
     7         1      29397.0  29397.0      1.8  	img1 = cv2.imread("../imgReferencia/img00.jpg", 0)
     8         1     554884.0 554884.0     33.4  	brisk = cv2.BRISK_create()
     9                                           
    10         1       1282.0   1282.0      0.1  	imagem1 = np.float32(img1)
    11         1      18028.0  18028.0      1.1  	dst1 = cv2.cornerHarris(imagem1,2,3,0.04)
    12         1       3085.0   3085.0      0.2  	dst1 = cv2.dilate(dst1,None)
    13         1       3435.0   3435.0      0.2  	ret1, dst1 = cv2.threshold(dst1,0.01*dst1.max(),255,0)
    14         1        760.0    760.0      0.0  	dst1 = np.uint8(dst1)
    15         1       8157.0   8157.0      0.5  	ret1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(dst1)
    16         1         18.0     18.0      0.0  	criteria1 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    17         1       9975.0   9975.0      0.6  	corners1 = cv2.cornerSubPix(imagem1,np.float32(centroids1),(5,5),(-1,-1),criteria1)
    18         1          5.0      5.0      0.0  	matriz1=[]
    19       234        433.0      1.9      0.0  	for variavel in corners1:
    20       233       1044.0      4.5      0.1  		array=np.array([variavel])
    21       233        471.0      2.0      0.0  		matriz1.append(array)
    22         1        179.0    179.0      0.0  	kp1=cv2.KeyPoint_convert(matriz1)
    23         1       4655.0   4655.0      0.3  	kp1, des1 = brisk.compute(img1, kp1)
    24                                           
    25         1         18.0     18.0      0.0  	bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    26                                           
    27         1     194501.0 194501.0     11.7  	img2 = cv2.imread("../imgTeste/img1.jpg", 0)	
    28         1      26428.0  26428.0      1.6  	imagem2 = np.float32(img2)
    29         1     390944.0 390944.0     23.6  	dst2 = cv2.cornerHarris(imagem2,2,3,0.04)
    30         1      39403.0  39403.0      2.4  	dst2 = cv2.dilate(dst2,None)
    31         1      28621.0  28621.0      1.7  	ret2, dst2 = cv2.threshold(dst2,0.01*dst2.max(),255,0)
    32         1      18202.0  18202.0      1.1  	dst2 = np.uint8(dst2)
    33         1     169631.0 169631.0     10.2  	ret2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(dst2)
    34         1          7.0      7.0      0.0  	criteria2 = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
    35         1      59633.0  59633.0      3.6  	corners2 = cv2.cornerSubPix(imagem2,np.float32(centroids2),(5,5),(-1,-1),criteria2)
    36         1         10.0     10.0      0.0  	matriz2=[]
    37      1418       3250.0      2.3      0.2  	for variavel in corners2:
    38      1417       6050.0      4.3      0.4  		array=np.array([variavel])
    39      1417       3154.0      2.2      0.2  		matriz2.append(array)
    40         1        914.0    914.0      0.1  	kp2 = cv2.KeyPoint_convert(matriz2)
    41         1      68503.0  68503.0      4.1  	kp2, des2 = brisk.compute(img2, kp2)
    42                                           
    43         1      14606.0  14606.0      0.9  	matches = bf.match(des1,des2)

